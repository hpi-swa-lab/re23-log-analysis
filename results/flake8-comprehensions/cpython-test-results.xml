<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="129" failures="0" skipped="0" tests="129" time="0.408" timestamp="2023-11-21T20:18:12.109009" hostname="80ac3eb7f7f2"><testcase classname="tests.test_flake8_comprehensions" name="test_version" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 28&#10;  def test_version(flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 28
  def test_version(flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C400_pass[foo = [x + 1 for x in range(10)]]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 35&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = [x + 1 for x in range(10)]&quot;,&#10;      ],&#10;  )&#10;  def test_C400_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 35
  @pytest.mark.parametrize(
      "code",
      [
          "foo = [x + 1 for x in range(10)]",
      ],
  )
  def test_C400_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C400_fail[foo = list(x + 1 for x in range(10))-failures0]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 47&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = list(x + 1 for x in range(10))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C400 Unnecessary generator - rewrite as a list &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;&quot;&quot;\&#10;              foobar = list(&#10;                  str(x)&#10;                  for x&#10;                  in range(10)&#10;              )&#10;              &quot;&quot;&quot;,&#10;              [&#10;                  &quot;./example.py:1:10: C400 Unnecessary generator - rewrite as a list &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C400_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 47
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = list(x + 1 for x in range(10))",
              [
                  "./example.py:1:7: C400 Unnecessary generator - rewrite as a list "
                  + "comprehension."
              ],
          ),
          (
              """\
              foobar = list(
                  str(x)
                  for x
                  in range(10)
              )
              """,
              [
                  "./example.py:1:10: C400 Unnecessary generator - rewrite as a list "
                  + "comprehension."
              ],
          ),
      ],
  )
  def test_C400_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C400_fail[            foobar = list(\n                str(x)\n                for x\n                in range(10)\n            )\n            -failures1]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 47&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = list(x + 1 for x in range(10))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C400 Unnecessary generator - rewrite as a list &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;&quot;&quot;\&#10;              foobar = list(&#10;                  str(x)&#10;                  for x&#10;                  in range(10)&#10;              )&#10;              &quot;&quot;&quot;,&#10;              [&#10;                  &quot;./example.py:1:10: C400 Unnecessary generator - rewrite as a list &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C400_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 47
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = list(x + 1 for x in range(10))",
              [
                  "./example.py:1:7: C400 Unnecessary generator - rewrite as a list "
                  + "comprehension."
              ],
          ),
          (
              """\
              foobar = list(
                  str(x)
                  for x
                  in range(10)
              )
              """,
              [
                  "./example.py:1:10: C400 Unnecessary generator - rewrite as a list "
                  + "comprehension."
              ],
          ),
      ],
  )
  def test_C400_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C401_pass[foo = {x + 1 for x in range(10)}]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 78&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = {x + 1 for x in range(10)}&quot;,&#10;      ],&#10;  )&#10;  def test_C401_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 78
  @pytest.mark.parametrize(
      "code",
      [
          "foo = {x + 1 for x in range(10)}",
      ],
  )
  def test_C401_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C401_fail[foo = set(x + 1 for x in range(10))-failures0]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 90&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = set(x + 1 for x in range(10))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C401 Unnecessary generator - rewrite as a set &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;&quot;&quot;\&#10;              foobar = set(&#10;                  str(x) for x&#10;                  in range(10)&#10;              )&#10;              &quot;&quot;&quot;,&#10;              [&#10;                  &quot;./example.py:1:10: C401 Unnecessary generator - rewrite as a set &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C401_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 90
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = set(x + 1 for x in range(10))",
              [
                  "./example.py:1:7: C401 Unnecessary generator - rewrite as a set "
                  + "comprehension."
              ],
          ),
          (
              """\
              foobar = set(
                  str(x) for x
                  in range(10)
              )
              """,
              [
                  "./example.py:1:10: C401 Unnecessary generator - rewrite as a set "
                  + "comprehension."
              ],
          ),
      ],
  )
  def test_C401_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C401_fail[            foobar = set(\n                str(x) for x\n                in range(10)\n            )\n            -failures1]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 90&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = set(x + 1 for x in range(10))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C401 Unnecessary generator - rewrite as a set &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;&quot;&quot;\&#10;              foobar = set(&#10;                  str(x) for x&#10;                  in range(10)&#10;              )&#10;              &quot;&quot;&quot;,&#10;              [&#10;                  &quot;./example.py:1:10: C401 Unnecessary generator - rewrite as a set &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C401_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 90
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = set(x + 1 for x in range(10))",
              [
                  "./example.py:1:7: C401 Unnecessary generator - rewrite as a set "
                  + "comprehension."
              ],
          ),
          (
              """\
              foobar = set(
                  str(x) for x
                  in range(10)
              )
              """,
              [
                  "./example.py:1:10: C401 Unnecessary generator - rewrite as a set "
                  + "comprehension."
              ],
          ),
      ],
  )
  def test_C401_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C402_pass[foo = {x: str(x) for x in range(10)}]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 120&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = {x: str(x) for x in range(10)}&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = ['a=1', 'b=2', 'c=3']&#10;          dict(pair.split('=') for pair in foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('a', 1), ('b', 2), ('c', 3)]&#10;          dict(pair for pair in foo if pair[1] % 2 == 0)&#10;          &quot;&quot;&quot;,&#10;          # Previously a false positive:&#10;          &quot;dict(((x, str(x)) for x in range(10)), c=1)&quot;,&#10;      ],&#10;  )&#10;  def test_C402_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 120
  @pytest.mark.parametrize(
      "code",
      [
          "foo = {x: str(x) for x in range(10)}",
          """\
          foo = ['a=1', 'b=2', 'c=3']
          dict(pair.split('=') for pair in foo)
          """,
          """\
          foo = [('a', 1), ('b', 2), ('c', 3)]
          dict(pair for pair in foo if pair[1] % 2 == 0)
          """,
          # Previously a false positive:
          "dict(((x, str(x)) for x in range(10)), c=1)",
      ],
  )
  def test_C402_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C402_pass[        foo = ['a=1', 'b=2', 'c=3']\n        dict(pair.split('=') for pair in foo)\n        ]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 120&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = {x: str(x) for x in range(10)}&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = ['a=1', 'b=2', 'c=3']&#10;          dict(pair.split('=') for pair in foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('a', 1), ('b', 2), ('c', 3)]&#10;          dict(pair for pair in foo if pair[1] % 2 == 0)&#10;          &quot;&quot;&quot;,&#10;          # Previously a false positive:&#10;          &quot;dict(((x, str(x)) for x in range(10)), c=1)&quot;,&#10;      ],&#10;  )&#10;  def test_C402_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 120
  @pytest.mark.parametrize(
      "code",
      [
          "foo = {x: str(x) for x in range(10)}",
          """\
          foo = ['a=1', 'b=2', 'c=3']
          dict(pair.split('=') for pair in foo)
          """,
          """\
          foo = [('a', 1), ('b', 2), ('c', 3)]
          dict(pair for pair in foo if pair[1] % 2 == 0)
          """,
          # Previously a false positive:
          "dict(((x, str(x)) for x in range(10)), c=1)",
      ],
  )
  def test_C402_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C402_pass[        foo = [('a', 1), ('b', 2), ('c', 3)]\n        dict(pair for pair in foo if pair[1] % 2 == 0)\n        ]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 120&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = {x: str(x) for x in range(10)}&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = ['a=1', 'b=2', 'c=3']&#10;          dict(pair.split('=') for pair in foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('a', 1), ('b', 2), ('c', 3)]&#10;          dict(pair for pair in foo if pair[1] % 2 == 0)&#10;          &quot;&quot;&quot;,&#10;          # Previously a false positive:&#10;          &quot;dict(((x, str(x)) for x in range(10)), c=1)&quot;,&#10;      ],&#10;  )&#10;  def test_C402_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 120
  @pytest.mark.parametrize(
      "code",
      [
          "foo = {x: str(x) for x in range(10)}",
          """\
          foo = ['a=1', 'b=2', 'c=3']
          dict(pair.split('=') for pair in foo)
          """,
          """\
          foo = [('a', 1), ('b', 2), ('c', 3)]
          dict(pair for pair in foo if pair[1] % 2 == 0)
          """,
          # Previously a false positive:
          "dict(((x, str(x)) for x in range(10)), c=1)",
      ],
  )
  def test_C402_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C402_pass[dict(((x, str(x)) for x in range(10)), c=1)]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 120&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = {x: str(x) for x in range(10)}&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = ['a=1', 'b=2', 'c=3']&#10;          dict(pair.split('=') for pair in foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('a', 1), ('b', 2), ('c', 3)]&#10;          dict(pair for pair in foo if pair[1] % 2 == 0)&#10;          &quot;&quot;&quot;,&#10;          # Previously a false positive:&#10;          &quot;dict(((x, str(x)) for x in range(10)), c=1)&quot;,&#10;      ],&#10;  )&#10;  def test_C402_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 120
  @pytest.mark.parametrize(
      "code",
      [
          "foo = {x: str(x) for x in range(10)}",
          """\
          foo = ['a=1', 'b=2', 'c=3']
          dict(pair.split('=') for pair in foo)
          """,
          """\
          foo = [('a', 1), ('b', 2), ('c', 3)]
          dict(pair for pair in foo if pair[1] % 2 == 0)
          """,
          # Previously a false positive:
          "dict(((x, str(x)) for x in range(10)), c=1)",
      ],
  )
  def test_C402_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C402_fail[foo = dict((x, str(x)) for x in range(10))-failures0]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 142&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = dict((x, str(x)) for x in range(10))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C402 Unnecessary generator - rewrite as a dict &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;&quot;&quot;\&#10;              foobar = dict(&#10;                  (x, str(x))&#10;                  for x&#10;                  in range(10)&#10;              )&#10;              &quot;&quot;&quot;,&#10;              [&#10;                  &quot;./example.py:1:10: C402 Unnecessary generator - rewrite as a dict &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C402_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 142
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = dict((x, str(x)) for x in range(10))",
              [
                  "./example.py:1:7: C402 Unnecessary generator - rewrite as a dict "
                  + "comprehension."
              ],
          ),
          (
              """\
              foobar = dict(
                  (x, str(x))
                  for x
                  in range(10)
              )
              """,
              [
                  "./example.py:1:10: C402 Unnecessary generator - rewrite as a dict "
                  + "comprehension."
              ],
          ),
      ],
  )
  def test_C402_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C402_fail[            foobar = dict(\n                (x, str(x))\n                for x\n                in range(10)\n            )\n            -failures1]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 142&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = dict((x, str(x)) for x in range(10))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C402 Unnecessary generator - rewrite as a dict &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;&quot;&quot;\&#10;              foobar = dict(&#10;                  (x, str(x))&#10;                  for x&#10;                  in range(10)&#10;              )&#10;              &quot;&quot;&quot;,&#10;              [&#10;                  &quot;./example.py:1:10: C402 Unnecessary generator - rewrite as a dict &quot;&#10;                  + &quot;comprehension.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C402_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 142
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = dict((x, str(x)) for x in range(10))",
              [
                  "./example.py:1:7: C402 Unnecessary generator - rewrite as a dict "
                  + "comprehension."
              ],
          ),
          (
              """\
              foobar = dict(
                  (x, str(x))
                  for x
                  in range(10)
              )
              """,
              [
                  "./example.py:1:10: C402 Unnecessary generator - rewrite as a dict "
                  + "comprehension."
              ],
          ),
      ],
  )
  def test_C402_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C403_pass[foo = {x + 1 for x in range(10)}]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 173&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = {x + 1 for x in range(10)}&quot;,&#10;      ],&#10;  )&#10;  def test_C403_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 173
  @pytest.mark.parametrize(
      "code",
      [
          "foo = {x + 1 for x in range(10)}",
      ],
  )
  def test_C403_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C403_fail[foo = set([x + 1 for x in range(10)])-failures0]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 185&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = set([x + 1 for x in range(10)])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C403 Unnecessary list comprehension - rewrite as a &quot;&#10;                  + &quot;set comprehension.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C403_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 185
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = set([x + 1 for x in range(10)])",
              [
                  "./example.py:1:7: C403 Unnecessary list comprehension - rewrite as a "
                  + "set comprehension."
              ],
          ),
      ],
  )
  def test_C403_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C404_pass[foo = {x: x for x in range(10)}]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 203&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = {x: x for x in range(10)}&quot;,&#10;          # Previously a false positive:&#10;          &quot;foo = dict([x.split('=') for x in ['a=1', 'b=2']])&quot;,&#10;          # Previously a false positive:&#10;          &quot;dict([(x, x) for x in range(10)], y=2)&quot;,&#10;      ],&#10;  )&#10;  def test_C404_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 203
  @pytest.mark.parametrize(
      "code",
      [
          "foo = {x: x for x in range(10)}",
          # Previously a false positive:
          "foo = dict([x.split('=') for x in ['a=1', 'b=2']])",
          # Previously a false positive:
          "dict([(x, x) for x in range(10)], y=2)",
      ],
  )
  def test_C404_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C404_pass[foo = dict([x.split('=') for x in ['a=1', 'b=2']])]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 203&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = {x: x for x in range(10)}&quot;,&#10;          # Previously a false positive:&#10;          &quot;foo = dict([x.split('=') for x in ['a=1', 'b=2']])&quot;,&#10;          # Previously a false positive:&#10;          &quot;dict([(x, x) for x in range(10)], y=2)&quot;,&#10;      ],&#10;  )&#10;  def test_C404_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 203
  @pytest.mark.parametrize(
      "code",
      [
          "foo = {x: x for x in range(10)}",
          # Previously a false positive:
          "foo = dict([x.split('=') for x in ['a=1', 'b=2']])",
          # Previously a false positive:
          "dict([(x, x) for x in range(10)], y=2)",
      ],
  )
  def test_C404_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C404_pass[dict([(x, x) for x in range(10)], y=2)]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 203&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = {x: x for x in range(10)}&quot;,&#10;          # Previously a false positive:&#10;          &quot;foo = dict([x.split('=') for x in ['a=1', 'b=2']])&quot;,&#10;          # Previously a false positive:&#10;          &quot;dict([(x, x) for x in range(10)], y=2)&quot;,&#10;      ],&#10;  )&#10;  def test_C404_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 203
  @pytest.mark.parametrize(
      "code",
      [
          "foo = {x: x for x in range(10)}",
          # Previously a false positive:
          "foo = dict([x.split('=') for x in ['a=1', 'b=2']])",
          # Previously a false positive:
          "dict([(x, x) for x in range(10)], y=2)",
      ],
  )
  def test_C404_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C404_fail[foo = dict([(x, x) for x in range(10)])-failures0]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 219&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = dict([(x, x) for x in range(10)])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C404 Unnecessary list comprehension - rewrite as a &quot;&#10;                  + &quot;dict comprehension.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C404_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 219
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = dict([(x, x) for x in range(10)])",
              [
                  "./example.py:1:7: C404 Unnecessary list comprehension - rewrite as a "
                  + "dict comprehension."
              ],
          ),
      ],
  )
  def test_C404_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C405_pass[foo = set(range)]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 237&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = set(range)&quot;,&#10;      ],&#10;  )&#10;  def test_C405_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 237
  @pytest.mark.parametrize(
      "code",
      [
          "foo = set(range)",
      ],
  )
  def test_C405_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C405_fail[foo = set([])-failures0]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 249&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = set([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary list literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set([1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary list literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set((1,))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C405_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 249
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = set([])",
              [
                  "./example.py:1:7: C405 Unnecessary list literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set([1])",
              [
                  "./example.py:1:7: C405 Unnecessary list literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set(())",
              [
                  "./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set((1,))",
              [
                  "./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set "
                  + "literal."
              ],
          ),
      ],
  )
  def test_C405_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C405_fail[foo = set([1])-failures1]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 249&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = set([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary list literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set([1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary list literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set((1,))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C405_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 249
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = set([])",
              [
                  "./example.py:1:7: C405 Unnecessary list literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set([1])",
              [
                  "./example.py:1:7: C405 Unnecessary list literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set(())",
              [
                  "./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set((1,))",
              [
                  "./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set "
                  + "literal."
              ],
          ),
      ],
  )
  def test_C405_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C405_fail[foo = set(())-failures2]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 249&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = set([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary list literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set([1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary list literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set((1,))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C405_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 249
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = set([])",
              [
                  "./example.py:1:7: C405 Unnecessary list literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set([1])",
              [
                  "./example.py:1:7: C405 Unnecessary list literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set(())",
              [
                  "./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set((1,))",
              [
                  "./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set "
                  + "literal."
              ],
          ),
      ],
  )
  def test_C405_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C405_fail[foo = set((1,))-failures3]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 249&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = set([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary list literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set([1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary list literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = set((1,))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C405_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 249
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = set([])",
              [
                  "./example.py:1:7: C405 Unnecessary list literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set([1])",
              [
                  "./example.py:1:7: C405 Unnecessary list literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set(())",
              [
                  "./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set "
                  + "literal."
              ],
          ),
          (
              "foo = set((1,))",
              [
                  "./example.py:1:7: C405 Unnecessary tuple literal - rewrite as a set "
                  + "literal."
              ],
          ),
      ],
  )
  def test_C405_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C406_pass[foo = dict(range)]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 288&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = dict(range)&quot;,&#10;          &quot;something = (1, 2); dict([something])&quot;,&#10;          &quot;dict([(1,)])&quot;,&#10;      ],&#10;  )&#10;  def test_C406_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 288
  @pytest.mark.parametrize(
      "code",
      [
          "foo = dict(range)",
          "something = (1, 2); dict([something])",
          "dict([(1,)])",
      ],
  )
  def test_C406_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C406_pass[something = (1, 2); dict([something])]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 288&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = dict(range)&quot;,&#10;          &quot;something = (1, 2); dict([something])&quot;,&#10;          &quot;dict([(1,)])&quot;,&#10;      ],&#10;  )&#10;  def test_C406_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 288
  @pytest.mark.parametrize(
      "code",
      [
          "foo = dict(range)",
          "something = (1, 2); dict([something])",
          "dict([(1,)])",
      ],
  )
  def test_C406_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C406_pass[dict([(1,)])]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 288&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = dict(range)&quot;,&#10;          &quot;something = (1, 2); dict([something])&quot;,&#10;          &quot;dict([(1,)])&quot;,&#10;      ],&#10;  )&#10;  def test_C406_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 288
  @pytest.mark.parametrize(
      "code",
      [
          "foo = dict(range)",
          "something = (1, 2); dict([something])",
          "dict([(1,)])",
      ],
  )
  def test_C406_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C406_fail[foo = dict([])-failures0]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 302&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = dict([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict([(1, 2)])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict(((1, 2),))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C406_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 302
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = dict([])",
              [
                  "./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict([(1, 2)])",
              [
                  "./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict(())",
              [
                  "./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict(((1, 2),))",
              [
                  "./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict "
                  + "literal."
              ],
          ),
      ],
  )
  def test_C406_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C406_fail[foo = dict([(1, 2)])-failures1]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 302&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = dict([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict([(1, 2)])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict(((1, 2),))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C406_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 302
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = dict([])",
              [
                  "./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict([(1, 2)])",
              [
                  "./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict(())",
              [
                  "./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict(((1, 2),))",
              [
                  "./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict "
                  + "literal."
              ],
          ),
      ],
  )
  def test_C406_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C406_fail[foo = dict(())-failures2]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 302&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = dict([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict([(1, 2)])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict(((1, 2),))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C406_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 302
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = dict([])",
              [
                  "./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict([(1, 2)])",
              [
                  "./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict(())",
              [
                  "./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict(((1, 2),))",
              [
                  "./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict "
                  + "literal."
              ],
          ),
      ],
  )
  def test_C406_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C406_fail[foo = dict(((1, 2),))-failures3]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 302&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = dict([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict([(1, 2)])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = dict(((1, 2),))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict &quot;&#10;                  + &quot;literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C406_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 302
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = dict([])",
              [
                  "./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict([(1, 2)])",
              [
                  "./example.py:1:7: C406 Unnecessary list literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict(())",
              [
                  "./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict "
                  + "literal."
              ],
          ),
          (
              "foo = dict(((1, 2),))",
              [
                  "./example.py:1:7: C406 Unnecessary tuple literal - rewrite as a dict "
                  + "literal."
              ],
          ),
      ],
  )
  def test_C406_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_pass[()]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;()&quot;,&#10;          &quot;[]&quot;,&#10;          &quot;{}&quot;,&#10;          &quot;set()&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('foo', 2)]&#10;          dict(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = {}&#10;          dict(bar=1, **foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(*foo)&#10;          &quot;&quot;&quot;,&#10;      ],&#10;  )&#10;  def test_C408_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341
  @pytest.mark.parametrize(
      "code",
      [
          "()",
          "[]",
          "{}",
          "set()",
          """\
          foo = [('foo', 2)]
          dict(foo)
          """,
          """\
          foo = {}
          dict(bar=1, **foo)
          """,
          """\
          foo = [1, 2]
          list(foo)
          """,
          """\
          foo = [1, 2]
          list(*foo)
          """,
      ],
  )
  def test_C408_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_pass[[]]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;()&quot;,&#10;          &quot;[]&quot;,&#10;          &quot;{}&quot;,&#10;          &quot;set()&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('foo', 2)]&#10;          dict(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = {}&#10;          dict(bar=1, **foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(*foo)&#10;          &quot;&quot;&quot;,&#10;      ],&#10;  )&#10;  def test_C408_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341
  @pytest.mark.parametrize(
      "code",
      [
          "()",
          "[]",
          "{}",
          "set()",
          """\
          foo = [('foo', 2)]
          dict(foo)
          """,
          """\
          foo = {}
          dict(bar=1, **foo)
          """,
          """\
          foo = [1, 2]
          list(foo)
          """,
          """\
          foo = [1, 2]
          list(*foo)
          """,
      ],
  )
  def test_C408_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_pass[{}]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;()&quot;,&#10;          &quot;[]&quot;,&#10;          &quot;{}&quot;,&#10;          &quot;set()&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('foo', 2)]&#10;          dict(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = {}&#10;          dict(bar=1, **foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(*foo)&#10;          &quot;&quot;&quot;,&#10;      ],&#10;  )&#10;  def test_C408_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341
  @pytest.mark.parametrize(
      "code",
      [
          "()",
          "[]",
          "{}",
          "set()",
          """\
          foo = [('foo', 2)]
          dict(foo)
          """,
          """\
          foo = {}
          dict(bar=1, **foo)
          """,
          """\
          foo = [1, 2]
          list(foo)
          """,
          """\
          foo = [1, 2]
          list(*foo)
          """,
      ],
  )
  def test_C408_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_pass[set()]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;()&quot;,&#10;          &quot;[]&quot;,&#10;          &quot;{}&quot;,&#10;          &quot;set()&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('foo', 2)]&#10;          dict(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = {}&#10;          dict(bar=1, **foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(*foo)&#10;          &quot;&quot;&quot;,&#10;      ],&#10;  )&#10;  def test_C408_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341
  @pytest.mark.parametrize(
      "code",
      [
          "()",
          "[]",
          "{}",
          "set()",
          """\
          foo = [('foo', 2)]
          dict(foo)
          """,
          """\
          foo = {}
          dict(bar=1, **foo)
          """,
          """\
          foo = [1, 2]
          list(foo)
          """,
          """\
          foo = [1, 2]
          list(*foo)
          """,
      ],
  )
  def test_C408_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_pass[        foo = [('foo', 2)]\n        dict(foo)\n        ]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;()&quot;,&#10;          &quot;[]&quot;,&#10;          &quot;{}&quot;,&#10;          &quot;set()&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('foo', 2)]&#10;          dict(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = {}&#10;          dict(bar=1, **foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(*foo)&#10;          &quot;&quot;&quot;,&#10;      ],&#10;  )&#10;  def test_C408_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341
  @pytest.mark.parametrize(
      "code",
      [
          "()",
          "[]",
          "{}",
          "set()",
          """\
          foo = [('foo', 2)]
          dict(foo)
          """,
          """\
          foo = {}
          dict(bar=1, **foo)
          """,
          """\
          foo = [1, 2]
          list(foo)
          """,
          """\
          foo = [1, 2]
          list(*foo)
          """,
      ],
  )
  def test_C408_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_pass[        foo = {}\n        dict(bar=1, **foo)\n        ]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;()&quot;,&#10;          &quot;[]&quot;,&#10;          &quot;{}&quot;,&#10;          &quot;set()&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('foo', 2)]&#10;          dict(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = {}&#10;          dict(bar=1, **foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(*foo)&#10;          &quot;&quot;&quot;,&#10;      ],&#10;  )&#10;  def test_C408_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341
  @pytest.mark.parametrize(
      "code",
      [
          "()",
          "[]",
          "{}",
          "set()",
          """\
          foo = [('foo', 2)]
          dict(foo)
          """,
          """\
          foo = {}
          dict(bar=1, **foo)
          """,
          """\
          foo = [1, 2]
          list(foo)
          """,
          """\
          foo = [1, 2]
          list(*foo)
          """,
      ],
  )
  def test_C408_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_pass[        foo = [1, 2]\n        list(foo)\n        ]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;()&quot;,&#10;          &quot;[]&quot;,&#10;          &quot;{}&quot;,&#10;          &quot;set()&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('foo', 2)]&#10;          dict(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = {}&#10;          dict(bar=1, **foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(*foo)&#10;          &quot;&quot;&quot;,&#10;      ],&#10;  )&#10;  def test_C408_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341
  @pytest.mark.parametrize(
      "code",
      [
          "()",
          "[]",
          "{}",
          "set()",
          """\
          foo = [('foo', 2)]
          dict(foo)
          """,
          """\
          foo = {}
          dict(bar=1, **foo)
          """,
          """\
          foo = [1, 2]
          list(foo)
          """,
          """\
          foo = [1, 2]
          list(*foo)
          """,
      ],
  )
  def test_C408_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_pass[        foo = [1, 2]\n        list(*foo)\n        ]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;()&quot;,&#10;          &quot;[]&quot;,&#10;          &quot;{}&quot;,&#10;          &quot;set()&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [('foo', 2)]&#10;          dict(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = {}&#10;          dict(bar=1, **foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(foo)&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          foo = [1, 2]&#10;          list(*foo)&#10;          &quot;&quot;&quot;,&#10;      ],&#10;  )&#10;  def test_C408_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 341
  @pytest.mark.parametrize(
      "code",
      [
          "()",
          "[]",
          "{}",
          "set()",
          """\
          foo = [('foo', 2)]
          dict(foo)
          """,
          """\
          foo = {}
          dict(bar=1, **foo)
          """,
          """\
          foo = [1, 2]
          list(foo)
          """,
          """\
          foo = [1, 2]
          list(*foo)
          """,
      ],
  )
  def test_C408_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_fail[tuple()-failures0]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 372&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;tuple()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary tuple call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;list()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary list call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;dict()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;dict(a=1)&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal.&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C408_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 372
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "tuple()",
              ["./example.py:1:1: C408 Unnecessary tuple call - rewrite as a literal."],
          ),
          (
              "list()",
              ["./example.py:1:1: C408 Unnecessary list call - rewrite as a literal."],
          ),
          (
              "dict()",
              ["./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal."],
          ),
          (
              "dict(a=1)",
              ["./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal."],
          ),
      ],
  )
  def test_C408_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_fail[list()-failures1]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 372&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;tuple()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary tuple call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;list()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary list call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;dict()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;dict(a=1)&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal.&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C408_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 372
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "tuple()",
              ["./example.py:1:1: C408 Unnecessary tuple call - rewrite as a literal."],
          ),
          (
              "list()",
              ["./example.py:1:1: C408 Unnecessary list call - rewrite as a literal."],
          ),
          (
              "dict()",
              ["./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal."],
          ),
          (
              "dict(a=1)",
              ["./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal."],
          ),
      ],
  )
  def test_C408_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_fail[dict()-failures2]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 372&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;tuple()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary tuple call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;list()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary list call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;dict()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;dict(a=1)&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal.&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C408_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 372
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "tuple()",
              ["./example.py:1:1: C408 Unnecessary tuple call - rewrite as a literal."],
          ),
          (
              "list()",
              ["./example.py:1:1: C408 Unnecessary list call - rewrite as a literal."],
          ),
          (
              "dict()",
              ["./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal."],
          ),
          (
              "dict(a=1)",
              ["./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal."],
          ),
      ],
  )
  def test_C408_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C408_fail[dict(a=1)-failures3]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 372&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;tuple()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary tuple call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;list()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary list call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;dict()&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal.&quot;],&#10;          ),&#10;          (&#10;              &quot;dict(a=1)&quot;,&#10;              [&quot;./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal.&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C408_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 372
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "tuple()",
              ["./example.py:1:1: C408 Unnecessary tuple call - rewrite as a literal."],
          ),
          (
              "list()",
              ["./example.py:1:1: C408 Unnecessary list call - rewrite as a literal."],
          ),
          (
              "dict()",
              ["./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal."],
          ),
          (
              "dict(a=1)",
              ["./example.py:1:1: C408 Unnecessary dict call - rewrite as a literal."],
          ),
      ],
  )
  def test_C408_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C409_pass[foo = tuple(range)]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 399&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = tuple(range)&quot;,&#10;      ],&#10;  )&#10;  def test_C409_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 399
  @pytest.mark.parametrize(
      "code",
      [
          "foo = tuple(range)",
      ],
  )
  def test_C409_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C409_fail[foo = tuple([])-failures0]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 411&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = tuple([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary list passed to tuple() - &quot;&#10;                  + &quot;rewrite as a tuple literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple([1, 2])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary list passed to tuple() - &quot;&#10;                  + &quot;rewrite as a tuple literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove &quot;&#10;                  + &quot;the outer call to tuple().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple((1, 2))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove &quot;&#10;                  + &quot;the outer call to tuple().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C409_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 411
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = tuple([])",
              [
                  "./example.py:1:7: C409 Unnecessary list passed to tuple() - "
                  + "rewrite as a tuple literal."
              ],
          ),
          (
              "foo = tuple([1, 2])",
              [
                  "./example.py:1:7: C409 Unnecessary list passed to tuple() - "
                  + "rewrite as a tuple literal."
              ],
          ),
          (
              "foo = tuple(())",
              [
                  "./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove "
                  + "the outer call to tuple()."
              ],
          ),
          (
              "foo = tuple((1, 2))",
              [
                  "./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove "
                  + "the outer call to tuple()."
              ],
          ),
      ],
  )
  def test_C409_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C409_fail[foo = tuple([1, 2])-failures1]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 411&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = tuple([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary list passed to tuple() - &quot;&#10;                  + &quot;rewrite as a tuple literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple([1, 2])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary list passed to tuple() - &quot;&#10;                  + &quot;rewrite as a tuple literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove &quot;&#10;                  + &quot;the outer call to tuple().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple((1, 2))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove &quot;&#10;                  + &quot;the outer call to tuple().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C409_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 411
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = tuple([])",
              [
                  "./example.py:1:7: C409 Unnecessary list passed to tuple() - "
                  + "rewrite as a tuple literal."
              ],
          ),
          (
              "foo = tuple([1, 2])",
              [
                  "./example.py:1:7: C409 Unnecessary list passed to tuple() - "
                  + "rewrite as a tuple literal."
              ],
          ),
          (
              "foo = tuple(())",
              [
                  "./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove "
                  + "the outer call to tuple()."
              ],
          ),
          (
              "foo = tuple((1, 2))",
              [
                  "./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove "
                  + "the outer call to tuple()."
              ],
          ),
      ],
  )
  def test_C409_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C409_fail[foo = tuple(())-failures2]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 411&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = tuple([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary list passed to tuple() - &quot;&#10;                  + &quot;rewrite as a tuple literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple([1, 2])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary list passed to tuple() - &quot;&#10;                  + &quot;rewrite as a tuple literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove &quot;&#10;                  + &quot;the outer call to tuple().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple((1, 2))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove &quot;&#10;                  + &quot;the outer call to tuple().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C409_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 411
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = tuple([])",
              [
                  "./example.py:1:7: C409 Unnecessary list passed to tuple() - "
                  + "rewrite as a tuple literal."
              ],
          ),
          (
              "foo = tuple([1, 2])",
              [
                  "./example.py:1:7: C409 Unnecessary list passed to tuple() - "
                  + "rewrite as a tuple literal."
              ],
          ),
          (
              "foo = tuple(())",
              [
                  "./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove "
                  + "the outer call to tuple()."
              ],
          ),
          (
              "foo = tuple((1, 2))",
              [
                  "./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove "
                  + "the outer call to tuple()."
              ],
          ),
      ],
  )
  def test_C409_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C409_fail[foo = tuple((1, 2))-failures3]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 411&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = tuple([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary list passed to tuple() - &quot;&#10;                  + &quot;rewrite as a tuple literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple([1, 2])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary list passed to tuple() - &quot;&#10;                  + &quot;rewrite as a tuple literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove &quot;&#10;                  + &quot;the outer call to tuple().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = tuple((1, 2))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove &quot;&#10;                  + &quot;the outer call to tuple().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C409_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 411
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = tuple([])",
              [
                  "./example.py:1:7: C409 Unnecessary list passed to tuple() - "
                  + "rewrite as a tuple literal."
              ],
          ),
          (
              "foo = tuple([1, 2])",
              [
                  "./example.py:1:7: C409 Unnecessary list passed to tuple() - "
                  + "rewrite as a tuple literal."
              ],
          ),
          (
              "foo = tuple(())",
              [
                  "./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove "
                  + "the outer call to tuple()."
              ],
          ),
          (
              "foo = tuple((1, 2))",
              [
                  "./example.py:1:7: C409 Unnecessary tuple passed to tuple() - remove "
                  + "the outer call to tuple()."
              ],
          ),
      ],
  )
  def test_C409_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C410_pass[foo = list(range)]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 450&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;foo = list(range)&quot;,&#10;      ],&#10;  )&#10;  def test_C410_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 450
  @pytest.mark.parametrize(
      "code",
      [
          "foo = list(range)",
      ],
  )
  def test_C410_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C410_fail[foo = list([])-failures0]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 462&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = list([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary list passed to list() - remove the &quot;&#10;                  + &quot;outer call to list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list([1, 2])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary list passed to list() - remove the &quot;&#10;                  + &quot;outer call to list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary tuple passed to list() - &quot;&#10;                  + &quot;rewrite as a list literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list((1, 2))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary tuple passed to list() - &quot;&#10;                  + &quot;rewrite as a list literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C410_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 462
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = list([])",
              [
                  "./example.py:1:7: C410 Unnecessary list passed to list() - remove the "
                  + "outer call to list()."
              ],
          ),
          (
              "foo = list([1, 2])",
              [
                  "./example.py:1:7: C410 Unnecessary list passed to list() - remove the "
                  + "outer call to list()."
              ],
          ),
          (
              "foo = list(())",
              [
                  "./example.py:1:7: C410 Unnecessary tuple passed to list() - "
                  + "rewrite as a list literal."
              ],
          ),
          (
              "foo = list((1, 2))",
              [
                  "./example.py:1:7: C410 Unnecessary tuple passed to list() - "
                  + "rewrite as a list literal."
              ],
          ),
      ],
  )
  def test_C410_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C410_fail[foo = list([1, 2])-failures1]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 462&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = list([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary list passed to list() - remove the &quot;&#10;                  + &quot;outer call to list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list([1, 2])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary list passed to list() - remove the &quot;&#10;                  + &quot;outer call to list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary tuple passed to list() - &quot;&#10;                  + &quot;rewrite as a list literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list((1, 2))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary tuple passed to list() - &quot;&#10;                  + &quot;rewrite as a list literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C410_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 462
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = list([])",
              [
                  "./example.py:1:7: C410 Unnecessary list passed to list() - remove the "
                  + "outer call to list()."
              ],
          ),
          (
              "foo = list([1, 2])",
              [
                  "./example.py:1:7: C410 Unnecessary list passed to list() - remove the "
                  + "outer call to list()."
              ],
          ),
          (
              "foo = list(())",
              [
                  "./example.py:1:7: C410 Unnecessary tuple passed to list() - "
                  + "rewrite as a list literal."
              ],
          ),
          (
              "foo = list((1, 2))",
              [
                  "./example.py:1:7: C410 Unnecessary tuple passed to list() - "
                  + "rewrite as a list literal."
              ],
          ),
      ],
  )
  def test_C410_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C410_fail[foo = list(())-failures2]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 462&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = list([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary list passed to list() - remove the &quot;&#10;                  + &quot;outer call to list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list([1, 2])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary list passed to list() - remove the &quot;&#10;                  + &quot;outer call to list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary tuple passed to list() - &quot;&#10;                  + &quot;rewrite as a list literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list((1, 2))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary tuple passed to list() - &quot;&#10;                  + &quot;rewrite as a list literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C410_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 462
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = list([])",
              [
                  "./example.py:1:7: C410 Unnecessary list passed to list() - remove the "
                  + "outer call to list()."
              ],
          ),
          (
              "foo = list([1, 2])",
              [
                  "./example.py:1:7: C410 Unnecessary list passed to list() - remove the "
                  + "outer call to list()."
              ],
          ),
          (
              "foo = list(())",
              [
                  "./example.py:1:7: C410 Unnecessary tuple passed to list() - "
                  + "rewrite as a list literal."
              ],
          ),
          (
              "foo = list((1, 2))",
              [
                  "./example.py:1:7: C410 Unnecessary tuple passed to list() - "
                  + "rewrite as a list literal."
              ],
          ),
      ],
  )
  def test_C410_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C410_fail[foo = list((1, 2))-failures3]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 462&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;foo = list([])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary list passed to list() - remove the &quot;&#10;                  + &quot;outer call to list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list([1, 2])&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary list passed to list() - remove the &quot;&#10;                  + &quot;outer call to list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list(())&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary tuple passed to list() - &quot;&#10;                  + &quot;rewrite as a list literal.&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;foo = list((1, 2))&quot;,&#10;              [&#10;                  &quot;./example.py:1:7: C410 Unnecessary tuple passed to list() - &quot;&#10;                  + &quot;rewrite as a list literal.&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C410_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 462
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "foo = list([])",
              [
                  "./example.py:1:7: C410 Unnecessary list passed to list() - remove the "
                  + "outer call to list()."
              ],
          ),
          (
              "foo = list([1, 2])",
              [
                  "./example.py:1:7: C410 Unnecessary list passed to list() - remove the "
                  + "outer call to list()."
              ],
          ),
          (
              "foo = list(())",
              [
                  "./example.py:1:7: C410 Unnecessary tuple passed to list() - "
                  + "rewrite as a list literal."
              ],
          ),
          (
              "foo = list((1, 2))",
              [
                  "./example.py:1:7: C410 Unnecessary tuple passed to list() - "
                  + "rewrite as a list literal."
              ],
          ),
      ],
  )
  def test_C410_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C411_pass[[x + 1 for x in range(10)]]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 501&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;[x + 1 for x in range(10)]&quot;,&#10;      ],&#10;  )&#10;  def test_C411_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 501
  @pytest.mark.parametrize(
      "code",
      [
          "[x + 1 for x in range(10)]",
      ],
  )
  def test_C411_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C411_fail[list([x + 1 for x in range(10)])-failures0]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 513&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list([x + 1 for x in range(10)])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C411 Unnecessary list call - remove the outer call &quot;&#10;                  + &quot;to list().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C411_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 513
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list([x + 1 for x in range(10)])",
              [
                  "./example.py:1:1: C411 Unnecessary list call - remove the outer call "
                  + "to list()."
              ],
          ),
      ],
  )
  def test_C411_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_pass[sorted([2, 3, 1])]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;sorted([2, 3, 1])&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=True)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=False)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=0)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=1)&quot;,&#10;          &quot;reversed([2, 3, 1])&quot;,&#10;      ],&#10;  )&#10;  def test_C413_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531
  @pytest.mark.parametrize(
      "code",
      [
          "sorted([2, 3, 1])",
          "sorted([2, 3, 1], reverse=True)",
          "sorted([2, 3, 1], reverse=False)",
          "sorted([2, 3, 1], reverse=0)",
          "sorted([2, 3, 1], reverse=1)",
          "reversed([2, 3, 1])",
      ],
  )
  def test_C413_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_pass[sorted([2, 3, 1], reverse=True)]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;sorted([2, 3, 1])&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=True)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=False)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=0)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=1)&quot;,&#10;          &quot;reversed([2, 3, 1])&quot;,&#10;      ],&#10;  )&#10;  def test_C413_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531
  @pytest.mark.parametrize(
      "code",
      [
          "sorted([2, 3, 1])",
          "sorted([2, 3, 1], reverse=True)",
          "sorted([2, 3, 1], reverse=False)",
          "sorted([2, 3, 1], reverse=0)",
          "sorted([2, 3, 1], reverse=1)",
          "reversed([2, 3, 1])",
      ],
  )
  def test_C413_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_pass[sorted([2, 3, 1], reverse=False)]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;sorted([2, 3, 1])&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=True)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=False)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=0)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=1)&quot;,&#10;          &quot;reversed([2, 3, 1])&quot;,&#10;      ],&#10;  )&#10;  def test_C413_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531
  @pytest.mark.parametrize(
      "code",
      [
          "sorted([2, 3, 1])",
          "sorted([2, 3, 1], reverse=True)",
          "sorted([2, 3, 1], reverse=False)",
          "sorted([2, 3, 1], reverse=0)",
          "sorted([2, 3, 1], reverse=1)",
          "reversed([2, 3, 1])",
      ],
  )
  def test_C413_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_pass[sorted([2, 3, 1], reverse=0)]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;sorted([2, 3, 1])&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=True)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=False)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=0)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=1)&quot;,&#10;          &quot;reversed([2, 3, 1])&quot;,&#10;      ],&#10;  )&#10;  def test_C413_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531
  @pytest.mark.parametrize(
      "code",
      [
          "sorted([2, 3, 1])",
          "sorted([2, 3, 1], reverse=True)",
          "sorted([2, 3, 1], reverse=False)",
          "sorted([2, 3, 1], reverse=0)",
          "sorted([2, 3, 1], reverse=1)",
          "reversed([2, 3, 1])",
      ],
  )
  def test_C413_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_pass[sorted([2, 3, 1], reverse=1)]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;sorted([2, 3, 1])&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=True)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=False)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=0)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=1)&quot;,&#10;          &quot;reversed([2, 3, 1])&quot;,&#10;      ],&#10;  )&#10;  def test_C413_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531
  @pytest.mark.parametrize(
      "code",
      [
          "sorted([2, 3, 1])",
          "sorted([2, 3, 1], reverse=True)",
          "sorted([2, 3, 1], reverse=False)",
          "sorted([2, 3, 1], reverse=0)",
          "sorted([2, 3, 1], reverse=1)",
          "reversed([2, 3, 1])",
      ],
  )
  def test_C413_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_pass[reversed([2, 3, 1])]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;sorted([2, 3, 1])&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=True)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=False)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=0)&quot;,&#10;          &quot;sorted([2, 3, 1], reverse=1)&quot;,&#10;          &quot;reversed([2, 3, 1])&quot;,&#10;      ],&#10;  )&#10;  def test_C413_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 531
  @pytest.mark.parametrize(
      "code",
      [
          "sorted([2, 3, 1])",
          "sorted([2, 3, 1], reverse=True)",
          "sorted([2, 3, 1], reverse=False)",
          "sorted([2, 3, 1], reverse=0)",
          "sorted([2, 3, 1], reverse=1)",
          "reversed([2, 3, 1])",
      ],
  )
  def test_C413_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_fail[list(sorted([2, 3, 1]))-failures0]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(sorted([2, 3, 1]))&quot;,&#10;              [&quot;./example.py:1:1: C413 Unnecessary list call around sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1]))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=False))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=0))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=1))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=bool()))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=not True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C413_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(sorted([2, 3, 1]))",
              ["./example.py:1:1: C413 Unnecessary list call around sorted()."],
          ),
          (
              "reversed(sorted([2, 3, 1]))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=False))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=0))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=1))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=bool()))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=not True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
      ],
  )
  def test_C413_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_fail[reversed(sorted([2, 3, 1]))-failures1]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(sorted([2, 3, 1]))&quot;,&#10;              [&quot;./example.py:1:1: C413 Unnecessary list call around sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1]))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=False))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=0))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=1))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=bool()))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=not True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C413_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(sorted([2, 3, 1]))",
              ["./example.py:1:1: C413 Unnecessary list call around sorted()."],
          ),
          (
              "reversed(sorted([2, 3, 1]))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=False))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=0))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=1))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=bool()))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=not True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
      ],
  )
  def test_C413_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_fail[reversed(sorted([2, 3, 1], reverse=False))-failures2]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(sorted([2, 3, 1]))&quot;,&#10;              [&quot;./example.py:1:1: C413 Unnecessary list call around sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1]))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=False))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=0))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=1))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=bool()))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=not True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C413_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(sorted([2, 3, 1]))",
              ["./example.py:1:1: C413 Unnecessary list call around sorted()."],
          ),
          (
              "reversed(sorted([2, 3, 1]))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=False))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=0))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=1))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=bool()))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=not True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
      ],
  )
  def test_C413_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_fail[reversed(sorted([2, 3, 1], reverse=True))-failures3]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(sorted([2, 3, 1]))&quot;,&#10;              [&quot;./example.py:1:1: C413 Unnecessary list call around sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1]))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=False))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=0))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=1))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=bool()))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=not True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C413_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(sorted([2, 3, 1]))",
              ["./example.py:1:1: C413 Unnecessary list call around sorted()."],
          ),
          (
              "reversed(sorted([2, 3, 1]))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=False))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=0))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=1))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=bool()))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=not True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
      ],
  )
  def test_C413_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_fail[reversed(sorted([2, 3, 1], reverse=0))-failures4]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(sorted([2, 3, 1]))&quot;,&#10;              [&quot;./example.py:1:1: C413 Unnecessary list call around sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1]))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=False))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=0))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=1))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=bool()))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=not True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C413_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(sorted([2, 3, 1]))",
              ["./example.py:1:1: C413 Unnecessary list call around sorted()."],
          ),
          (
              "reversed(sorted([2, 3, 1]))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=False))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=0))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=1))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=bool()))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=not True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
      ],
  )
  def test_C413_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_fail[reversed(sorted([2, 3, 1], reverse=1))-failures5]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(sorted([2, 3, 1]))&quot;,&#10;              [&quot;./example.py:1:1: C413 Unnecessary list call around sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1]))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=False))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=0))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=1))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=bool()))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=not True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C413_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(sorted([2, 3, 1]))",
              ["./example.py:1:1: C413 Unnecessary list call around sorted()."],
          ),
          (
              "reversed(sorted([2, 3, 1]))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=False))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=0))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=1))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=bool()))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=not True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
      ],
  )
  def test_C413_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_fail[reversed(sorted([2, 3, 1], reverse=bool()))-failures6]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(sorted([2, 3, 1]))&quot;,&#10;              [&quot;./example.py:1:1: C413 Unnecessary list call around sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1]))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=False))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=0))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=1))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=bool()))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=not True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C413_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(sorted([2, 3, 1]))",
              ["./example.py:1:1: C413 Unnecessary list call around sorted()."],
          ),
          (
              "reversed(sorted([2, 3, 1]))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=False))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=0))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=1))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=bool()))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=not True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
      ],
  )
  def test_C413_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C413_fail[reversed(sorted([2, 3, 1], reverse=not True))-failures7]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(sorted([2, 3, 1]))&quot;,&#10;              [&quot;./example.py:1:1: C413 Unnecessary list call around sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1]))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=False))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=0))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=True).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=1))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - use sorted(..., reverse=False).&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=bool()))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed(sorted([2, 3, 1], reverse=not True))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C413 Unnecessary reversed call around sorted()&quot;&#10;                  + &quot; - toggle reverse argument to sorted().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C413_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 548
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(sorted([2, 3, 1]))",
              ["./example.py:1:1: C413 Unnecessary list call around sorted()."],
          ),
          (
              "reversed(sorted([2, 3, 1]))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=False))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=0))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=True)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=1))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - use sorted(..., reverse=False)."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=bool()))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
          (
              "reversed(sorted([2, 3, 1], reverse=not True))",
              [
                  "./example.py:1:1: C413 Unnecessary reversed call around sorted()"
                  + " - toggle reverse argument to sorted()."
              ],
          ),
      ],
  )
  def test_C413_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_pass[list(set(a))]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 612&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;list(set(a))&quot;,&#10;          &quot;tuple(set(a))&quot;,&#10;          &quot;sorted(set(a))&quot;,&#10;      ],&#10;  )&#10;  def test_C414_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 612
  @pytest.mark.parametrize(
      "code",
      [
          "list(set(a))",
          "tuple(set(a))",
          "sorted(set(a))",
      ],
  )
  def test_C414_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_pass[tuple(set(a))]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 612&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;list(set(a))&quot;,&#10;          &quot;tuple(set(a))&quot;,&#10;          &quot;sorted(set(a))&quot;,&#10;      ],&#10;  )&#10;  def test_C414_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 612
  @pytest.mark.parametrize(
      "code",
      [
          "list(set(a))",
          "tuple(set(a))",
          "sorted(set(a))",
      ],
  )
  def test_C414_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_pass[sorted(set(a))]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 612&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;list(set(a))&quot;,&#10;          &quot;tuple(set(a))&quot;,&#10;          &quot;sorted(set(a))&quot;,&#10;      ],&#10;  )&#10;  def test_C414_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 612
  @pytest.mark.parametrize(
      "code",
      [
          "list(set(a))",
          "tuple(set(a))",
          "sorted(set(a))",
      ],
  )
  def test_C414_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[list(list(a))-failures0]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[list(tuple(a))-failures1]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[tuple(list(a))-failures2]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[tuple(tuple(a))-failures3]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[set(set(a))-failures4]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[set(list(a))-failures5]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[set(tuple(a))-failures6]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[set(sorted(a))-failures7]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[set(sorted(a, reverse=True))-failures8]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[set(reversed(a))-failures9]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[sorted(list(a))-failures10]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[sorted(tuple(a))-failures11]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[sorted(sorted(a))-failures12]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[sorted(sorted(a), reverse=True)-failures13]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[sorted(sorted(a, reverse=True))-failures14]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[sorted(sorted(a, reverse=True), reverse=True)-failures15]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[sorted(reversed(a))-failures16]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C414_fail[sorted(reversed(a), reverse=True)-failures17]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;list(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;list(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within list().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within tuple().&quot;],&#10;          ),&#10;          (&#10;              &quot;tuple(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within tuple().&quot;],&#10;          ),&#10;          (&quot;set(set(a))&quot;, [&quot;./example.py:1:1: C414 Unnecessary set call within set().&quot;]),&#10;          (&#10;              &quot;set(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;set(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within set().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(list(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary list call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(tuple(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary tuple call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(sorted(a, reverse=True), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary sorted call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a))&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;          (&#10;              &quot;sorted(reversed(a), reverse=True)&quot;,&#10;              [&quot;./example.py:1:1: C414 Unnecessary reversed call within sorted().&quot;],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C414_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 626
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "list(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within list()."],
          ),
          (
              "list(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within list()."],
          ),
          (
              "tuple(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within tuple()."],
          ),
          (
              "tuple(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within tuple()."],
          ),
          ("set(set(a))", ["./example.py:1:1: C414 Unnecessary set call within set()."]),
          (
              "set(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within set()."],
          ),
          (
              "set(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within set()."],
          ),
          (
              "set(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within set()."],
          ),
          (
              "set(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within set()."],
          ),
          (
              "sorted(list(a))",
              ["./example.py:1:1: C414 Unnecessary list call within sorted()."],
          ),
          (
              "sorted(tuple(a))",
              ["./example.py:1:1: C414 Unnecessary tuple call within sorted()."],
          ),
          (
              "sorted(sorted(a))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True))",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(sorted(a, reverse=True), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary sorted call within sorted()."],
          ),
          (
              "sorted(reversed(a))",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
          (
              "sorted(reversed(a), reverse=True)",
              ["./example.py:1:1: C414 Unnecessary reversed call within sorted()."],
          ),
      ],
  )
  def test_C414_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C415_pass[set([2, 3, 1][::1])]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 706&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;set([2, 3, 1][::1])&quot;,&#10;          &quot;sorted([2, 3, 1][::1])&quot;,&#10;          &quot;reversed([2, 3, 1][::1])&quot;,&#10;      ],&#10;  )&#10;  def test_C415_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 706
  @pytest.mark.parametrize(
      "code",
      [
          "set([2, 3, 1][::1])",
          "sorted([2, 3, 1][::1])",
          "reversed([2, 3, 1][::1])",
      ],
  )
  def test_C415_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C415_pass[sorted([2, 3, 1][::1])]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 706&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;set([2, 3, 1][::1])&quot;,&#10;          &quot;sorted([2, 3, 1][::1])&quot;,&#10;          &quot;reversed([2, 3, 1][::1])&quot;,&#10;      ],&#10;  )&#10;  def test_C415_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 706
  @pytest.mark.parametrize(
      "code",
      [
          "set([2, 3, 1][::1])",
          "sorted([2, 3, 1][::1])",
          "reversed([2, 3, 1][::1])",
      ],
  )
  def test_C415_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C415_pass[reversed([2, 3, 1][::1])]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 706&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;set([2, 3, 1][::1])&quot;,&#10;          &quot;sorted([2, 3, 1][::1])&quot;,&#10;          &quot;reversed([2, 3, 1][::1])&quot;,&#10;      ],&#10;  )&#10;  def test_C415_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 706
  @pytest.mark.parametrize(
      "code",
      [
          "set([2, 3, 1][::1])",
          "sorted([2, 3, 1][::1])",
          "reversed([2, 3, 1][::1])",
      ],
  )
  def test_C415_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C415_fail[set([2, 3, 1][::-1])-failures0]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 720&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;set([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within set().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;sorted([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;sorted([2, 3, 1][::-1], reverse=True)&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within reversed().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C415_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 720
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "set([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within set()."
              ],
          ),
          (
              "sorted([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within sorted()."
              ],
          ),
          (
              "sorted([2, 3, 1][::-1], reverse=True)",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within sorted()."
              ],
          ),
          (
              "reversed([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within reversed()."
              ],
          ),
      ],
  )
  def test_C415_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C415_fail[sorted([2, 3, 1][::-1])-failures1]" time="0.006"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 720&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;set([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within set().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;sorted([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;sorted([2, 3, 1][::-1], reverse=True)&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within reversed().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C415_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 720
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "set([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within set()."
              ],
          ),
          (
              "sorted([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within sorted()."
              ],
          ),
          (
              "sorted([2, 3, 1][::-1], reverse=True)",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within sorted()."
              ],
          ),
          (
              "reversed([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within reversed()."
              ],
          ),
      ],
  )
  def test_C415_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C415_fail[sorted([2, 3, 1][::-1], reverse=True)-failures2]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 720&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;set([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within set().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;sorted([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;sorted([2, 3, 1][::-1], reverse=True)&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within reversed().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C415_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 720
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "set([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within set()."
              ],
          ),
          (
              "sorted([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within sorted()."
              ],
          ),
          (
              "sorted([2, 3, 1][::-1], reverse=True)",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within sorted()."
              ],
          ),
          (
              "reversed([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within reversed()."
              ],
          ),
      ],
  )
  def test_C415_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C415_fail[reversed([2, 3, 1][::-1])-failures3]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 720&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;set([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within set().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;sorted([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;sorted([2, 3, 1][::-1], reverse=True)&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within sorted().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;reversed([2, 3, 1][::-1])&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C415 Unnecessary subscript reversal of iterable &quot;&#10;                  + &quot;within reversed().&quot;&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C415_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 720
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "set([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within set()."
              ],
          ),
          (
              "sorted([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within sorted()."
              ],
          ),
          (
              "sorted([2, 3, 1][::-1], reverse=True)",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within sorted()."
              ],
          ),
          (
              "reversed([2, 3, 1][::-1])",
              [
                  "./example.py:1:1: C415 Unnecessary subscript reversal of iterable "
                  + "within reversed()."
              ],
          ),
      ],
  )
  def test_C415_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[{x, y for x, y, z in zip('abc', '123', 'def')}]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[{y: x for x, y in zip('abc', '123')}]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[{x: y for x, (y,) in zip('a', ('1',))}]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[{x: z for x, (y,), z in zip('a', ('1',), 'b')}]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[[str(x) for x in range(5)]]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[[x + 1 for x in range(5)]]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[[x for x in range(5) if x % 2]]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[{str(x) for x in range(5)}]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[{x + 1 for x in range(5)}]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[{x for x in range(5) if x % 2}]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[        async def foo():\n            [x async for x in range(5)]\n        ]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[        async def foo():\n            return {x async for x in range(5)}\n        ]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[[(x, y, 1) for x, y in []]]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[[(x, y) for x, y in zip('abc', '123')]]" time="0.000"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[[(x, y) for (x, y) in zip('abc', '123')]]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[{(x, y) for x, y in zip('abc', '123')}]" time="0.003"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_pass[{(x, y) for (x, y) in zip('abc', '123')}]" time="0.005"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;{x, y for x, y, z in zip('abc', '123', 'def')}&quot;,&#10;          &quot;{y: x for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{x: y for x, (y,) in zip('a', ('1',))}&quot;,&#10;          &quot;{x: z for x, (y,), z in zip('a', ('1',), 'b')}&quot;,&#10;          &quot;[str(x) for x in range(5)]&quot;,&#10;          &quot;[x + 1 for x in range(5)]&quot;,&#10;          &quot;[x for x in range(5) if x % 2]&quot;,&#10;          &quot;{str(x) for x in range(5)}&quot;,&#10;          &quot;{x + 1 for x in range(5)}&quot;,&#10;          &quot;{x for x in range(5) if x % 2}&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              [x async for x in range(5)]&#10;          &quot;&quot;&quot;,&#10;          &quot;&quot;&quot;\&#10;          async def foo():&#10;              return {x async for x in range(5)}&#10;          &quot;&quot;&quot;,&#10;          &quot;[(x, y, 1) for x, y in []]&quot;,&#10;          # We can't assume unpacking came from tuples:&#10;          &quot;[(x, y) for x, y in zip('abc', '123')]&quot;,&#10;          &quot;[(x, y) for (x, y) in zip('abc', '123')]&quot;,&#10;          &quot;{(x, y) for x, y in zip('abc', '123')}&quot;,&#10;          &quot;{(x, y) for (x, y) in zip('abc', '123')}&quot;,&#10;      ],&#10;  )&#10;  def test_C416_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 759
  @pytest.mark.parametrize(
      "code",
      [
          "{x, y for x, y, z in zip('abc', '123', 'def')}",
          "{y: x for x, y in zip('abc', '123')}",
          "{x: y for x, (y,) in zip('a', ('1',))}",
          "{x: z for x, (y,), z in zip('a', ('1',), 'b')}",
          "[str(x) for x in range(5)]",
          "[x + 1 for x in range(5)]",
          "[x for x in range(5) if x % 2]",
          "{str(x) for x in range(5)}",
          "{x + 1 for x in range(5)}",
          "{x for x in range(5) if x % 2}",
          """\
          async def foo():
              [x async for x in range(5)]
          """,
          """\
          async def foo():
              return {x async for x in range(5)}
          """,
          "[(x, y, 1) for x, y in []]",
          # We can't assume unpacking came from tuples:
          "[(x, y) for x, y in zip('abc', '123')]",
          "[(x, y) for (x, y) in zip('abc', '123')]",
          "{(x, y) for x, y in zip('abc', '123')}",
          "{(x, y) for (x, y) in zip('abc', '123')}",
      ],
  )
  def test_C416_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_fail[{x: y for x, y in zip(range(5), range(5))}-failures0]" time="0.002"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 802&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;{x: y for x, y in zip(range(5), range(5))}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary dict comprehension - &quot;&#10;                  + &quot;rewrite using dict().&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;{x: y for (x, y) in zip(range(5), range(5))}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary dict comprehension - &quot;&#10;                  + &quot;rewrite using dict().&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;[x for x in range(5)]&quot;,&#10;              [&#10;                  f&quot;./example.py:1:{1 + list_comp_col_offset}: C416 Unnecessary &quot;&#10;                  + &quot;list comprehension - rewrite using list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;{x for x in range(5)}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary set comprehension - &quot;&#10;                  + &quot;rewrite using set().&quot;,&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C416_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 802
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "{x: y for x, y in zip(range(5), range(5))}",
              [
                  "./example.py:1:1: C416 Unnecessary dict comprehension - "
                  + "rewrite using dict().",
              ],
          ),
          (
              "{x: y for (x, y) in zip(range(5), range(5))}",
              [
                  "./example.py:1:1: C416 Unnecessary dict comprehension - "
                  + "rewrite using dict().",
              ],
          ),
          (
              "[x for x in range(5)]",
              [
                  f"./example.py:1:{1 + list_comp_col_offset}: C416 Unnecessary "
                  + "list comprehension - rewrite using list()."
              ],
          ),
          (
              "{x for x in range(5)}",
              [
                  "./example.py:1:1: C416 Unnecessary set comprehension - "
                  + "rewrite using set().",
              ],
          ),
      ],
  )
  def test_C416_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_fail[{x: y for (x, y) in zip(range(5), range(5))}-failures1]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 802&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;{x: y for x, y in zip(range(5), range(5))}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary dict comprehension - &quot;&#10;                  + &quot;rewrite using dict().&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;{x: y for (x, y) in zip(range(5), range(5))}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary dict comprehension - &quot;&#10;                  + &quot;rewrite using dict().&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;[x for x in range(5)]&quot;,&#10;              [&#10;                  f&quot;./example.py:1:{1 + list_comp_col_offset}: C416 Unnecessary &quot;&#10;                  + &quot;list comprehension - rewrite using list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;{x for x in range(5)}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary set comprehension - &quot;&#10;                  + &quot;rewrite using set().&quot;,&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C416_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 802
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "{x: y for x, y in zip(range(5), range(5))}",
              [
                  "./example.py:1:1: C416 Unnecessary dict comprehension - "
                  + "rewrite using dict().",
              ],
          ),
          (
              "{x: y for (x, y) in zip(range(5), range(5))}",
              [
                  "./example.py:1:1: C416 Unnecessary dict comprehension - "
                  + "rewrite using dict().",
              ],
          ),
          (
              "[x for x in range(5)]",
              [
                  f"./example.py:1:{1 + list_comp_col_offset}: C416 Unnecessary "
                  + "list comprehension - rewrite using list()."
              ],
          ),
          (
              "{x for x in range(5)}",
              [
                  "./example.py:1:1: C416 Unnecessary set comprehension - "
                  + "rewrite using set().",
              ],
          ),
      ],
  )
  def test_C416_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_fail[[x for x in range(5)]-failures2]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 802&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;{x: y for x, y in zip(range(5), range(5))}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary dict comprehension - &quot;&#10;                  + &quot;rewrite using dict().&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;{x: y for (x, y) in zip(range(5), range(5))}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary dict comprehension - &quot;&#10;                  + &quot;rewrite using dict().&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;[x for x in range(5)]&quot;,&#10;              [&#10;                  f&quot;./example.py:1:{1 + list_comp_col_offset}: C416 Unnecessary &quot;&#10;                  + &quot;list comprehension - rewrite using list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;{x for x in range(5)}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary set comprehension - &quot;&#10;                  + &quot;rewrite using set().&quot;,&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C416_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 802
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "{x: y for x, y in zip(range(5), range(5))}",
              [
                  "./example.py:1:1: C416 Unnecessary dict comprehension - "
                  + "rewrite using dict().",
              ],
          ),
          (
              "{x: y for (x, y) in zip(range(5), range(5))}",
              [
                  "./example.py:1:1: C416 Unnecessary dict comprehension - "
                  + "rewrite using dict().",
              ],
          ),
          (
              "[x for x in range(5)]",
              [
                  f"./example.py:1:{1 + list_comp_col_offset}: C416 Unnecessary "
                  + "list comprehension - rewrite using list()."
              ],
          ),
          (
              "{x for x in range(5)}",
              [
                  "./example.py:1:1: C416 Unnecessary set comprehension - "
                  + "rewrite using set().",
              ],
          ),
      ],
  )
  def test_C416_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C416_fail[{x for x in range(5)}-failures3]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 802&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;{x: y for x, y in zip(range(5), range(5))}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary dict comprehension - &quot;&#10;                  + &quot;rewrite using dict().&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;{x: y for (x, y) in zip(range(5), range(5))}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary dict comprehension - &quot;&#10;                  + &quot;rewrite using dict().&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;[x for x in range(5)]&quot;,&#10;              [&#10;                  f&quot;./example.py:1:{1 + list_comp_col_offset}: C416 Unnecessary &quot;&#10;                  + &quot;list comprehension - rewrite using list().&quot;&#10;              ],&#10;          ),&#10;          (&#10;              &quot;{x for x in range(5)}&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C416 Unnecessary set comprehension - &quot;&#10;                  + &quot;rewrite using set().&quot;,&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C416_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 802
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "{x: y for x, y in zip(range(5), range(5))}",
              [
                  "./example.py:1:1: C416 Unnecessary dict comprehension - "
                  + "rewrite using dict().",
              ],
          ),
          (
              "{x: y for (x, y) in zip(range(5), range(5))}",
              [
                  "./example.py:1:1: C416 Unnecessary dict comprehension - "
                  + "rewrite using dict().",
              ],
          ),
          (
              "[x for x in range(5)]",
              [
                  f"./example.py:1:{1 + list_comp_col_offset}: C416 Unnecessary "
                  + "list comprehension - rewrite using list()."
              ],
          ),
          (
              "{x for x in range(5)}",
              [
                  "./example.py:1:1: C416 Unnecessary set comprehension - "
                  + "rewrite using set().",
              ],
          ),
      ],
  )
  def test_C416_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C417_pass[map()]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;map()&quot;,&#10;          &quot;map(str, numbers)&quot;,&#10;          &quot;list(map())&quot;,&#10;          &quot;list(map(str, numbers))&quot;,&#10;          &quot;set(map(f, items))&quot;,&#10;          &quot;dict(map(enumerate, values))&quot;,&#10;          &quot;dict(map(lambda v: data[v], values))&quot;,&#10;      ],&#10;  )&#10;  def test_C417_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841
  @pytest.mark.parametrize(
      "code",
      [
          "map()",
          "map(str, numbers)",
          "list(map())",
          "list(map(str, numbers))",
          "set(map(f, items))",
          "dict(map(enumerate, values))",
          "dict(map(lambda v: data[v], values))",
      ],
  )
  def test_C417_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C417_pass[map(str, numbers)]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;map()&quot;,&#10;          &quot;map(str, numbers)&quot;,&#10;          &quot;list(map())&quot;,&#10;          &quot;list(map(str, numbers))&quot;,&#10;          &quot;set(map(f, items))&quot;,&#10;          &quot;dict(map(enumerate, values))&quot;,&#10;          &quot;dict(map(lambda v: data[v], values))&quot;,&#10;      ],&#10;  )&#10;  def test_C417_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841
  @pytest.mark.parametrize(
      "code",
      [
          "map()",
          "map(str, numbers)",
          "list(map())",
          "list(map(str, numbers))",
          "set(map(f, items))",
          "dict(map(enumerate, values))",
          "dict(map(lambda v: data[v], values))",
      ],
  )
  def test_C417_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C417_pass[list(map())]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;map()&quot;,&#10;          &quot;map(str, numbers)&quot;,&#10;          &quot;list(map())&quot;,&#10;          &quot;list(map(str, numbers))&quot;,&#10;          &quot;set(map(f, items))&quot;,&#10;          &quot;dict(map(enumerate, values))&quot;,&#10;          &quot;dict(map(lambda v: data[v], values))&quot;,&#10;      ],&#10;  )&#10;  def test_C417_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841
  @pytest.mark.parametrize(
      "code",
      [
          "map()",
          "map(str, numbers)",
          "list(map())",
          "list(map(str, numbers))",
          "set(map(f, items))",
          "dict(map(enumerate, values))",
          "dict(map(lambda v: data[v], values))",
      ],
  )
  def test_C417_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C417_pass[list(map(str, numbers))]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;map()&quot;,&#10;          &quot;map(str, numbers)&quot;,&#10;          &quot;list(map())&quot;,&#10;          &quot;list(map(str, numbers))&quot;,&#10;          &quot;set(map(f, items))&quot;,&#10;          &quot;dict(map(enumerate, values))&quot;,&#10;          &quot;dict(map(lambda v: data[v], values))&quot;,&#10;      ],&#10;  )&#10;  def test_C417_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841
  @pytest.mark.parametrize(
      "code",
      [
          "map()",
          "map(str, numbers)",
          "list(map())",
          "list(map(str, numbers))",
          "set(map(f, items))",
          "dict(map(enumerate, values))",
          "dict(map(lambda v: data[v], values))",
      ],
  )
  def test_C417_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C417_pass[set(map(f, items))]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;map()&quot;,&#10;          &quot;map(str, numbers)&quot;,&#10;          &quot;list(map())&quot;,&#10;          &quot;list(map(str, numbers))&quot;,&#10;          &quot;set(map(f, items))&quot;,&#10;          &quot;dict(map(enumerate, values))&quot;,&#10;          &quot;dict(map(lambda v: data[v], values))&quot;,&#10;      ],&#10;  )&#10;  def test_C417_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841
  @pytest.mark.parametrize(
      "code",
      [
          "map()",
          "map(str, numbers)",
          "list(map())",
          "list(map(str, numbers))",
          "set(map(f, items))",
          "dict(map(enumerate, values))",
          "dict(map(lambda v: data[v], values))",
      ],
  )
  def test_C417_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C417_pass[dict(map(enumerate, values))]" time="0.002"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;map()&quot;,&#10;          &quot;map(str, numbers)&quot;,&#10;          &quot;list(map())&quot;,&#10;          &quot;list(map(str, numbers))&quot;,&#10;          &quot;set(map(f, items))&quot;,&#10;          &quot;dict(map(enumerate, values))&quot;,&#10;          &quot;dict(map(lambda v: data[v], values))&quot;,&#10;      ],&#10;  )&#10;  def test_C417_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841
  @pytest.mark.parametrize(
      "code",
      [
          "map()",
          "map(str, numbers)",
          "list(map())",
          "list(map(str, numbers))",
          "set(map(f, items))",
          "dict(map(enumerate, values))",
          "dict(map(lambda v: data[v], values))",
      ],
  )
  def test_C417_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C417_pass[dict(map(lambda v: data[v], values))]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841&#10;  @pytest.mark.parametrize(&#10;      &quot;code&quot;,&#10;      [&#10;          &quot;map()&quot;,&#10;          &quot;map(str, numbers)&quot;,&#10;          &quot;list(map())&quot;,&#10;          &quot;list(map(str, numbers))&quot;,&#10;          &quot;set(map(f, items))&quot;,&#10;          &quot;dict(map(enumerate, values))&quot;,&#10;          &quot;dict(map(lambda v: data[v], values))&quot;,&#10;      ],&#10;  )&#10;  def test_C417_pass(code, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 841
  @pytest.mark.parametrize(
      "code",
      [
          "map()",
          "map(str, numbers)",
          "list(map())",
          "list(map(str, numbers))",
          "set(map(f, items))",
          "dict(map(enumerate, values))",
          "dict(map(lambda v: data[v], values))",
      ],
  )
  def test_C417_pass(code, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C417_fail[map(lambda x: x * 2, iterable)-failures0]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 859&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;map(lambda x: x * 2, iterable)&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a generator expression instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;list(map(lambda x: x * 2, iterable))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a list comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;set(map(lambda num: num % 2 == 0, nums))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a set comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;dict(map(lambda v: (v, v ** 2), values))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  &quot;use a dict comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C417_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 859
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "map(lambda x: x * 2, iterable)",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a generator expression instead.",
              ],
          ),
          (
              "list(map(lambda x: x * 2, iterable))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a list comprehension instead.",
              ],
          ),
          (
              "set(map(lambda num: num % 2 == 0, nums))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a set comprehension instead.",
              ],
          ),
          (
              "dict(map(lambda v: (v, v ** 2), values))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  "use a dict comprehension instead.",
              ],
          ),
      ],
  )
  def test_C417_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C417_fail[list(map(lambda x: x * 2, iterable))-failures1]" time="0.002"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 859&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;map(lambda x: x * 2, iterable)&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a generator expression instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;list(map(lambda x: x * 2, iterable))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a list comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;set(map(lambda num: num % 2 == 0, nums))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a set comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;dict(map(lambda v: (v, v ** 2), values))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  &quot;use a dict comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C417_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 859
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "map(lambda x: x * 2, iterable)",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a generator expression instead.",
              ],
          ),
          (
              "list(map(lambda x: x * 2, iterable))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a list comprehension instead.",
              ],
          ),
          (
              "set(map(lambda num: num % 2 == 0, nums))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a set comprehension instead.",
              ],
          ),
          (
              "dict(map(lambda v: (v, v ** 2), values))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  "use a dict comprehension instead.",
              ],
          ),
      ],
  )
  def test_C417_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C417_fail[set(map(lambda num: num % 2 == 0, nums))-failures2]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 859&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;map(lambda x: x * 2, iterable)&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a generator expression instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;list(map(lambda x: x * 2, iterable))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a list comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;set(map(lambda num: num % 2 == 0, nums))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a set comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;dict(map(lambda v: (v, v ** 2), values))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  &quot;use a dict comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C417_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 859
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "map(lambda x: x * 2, iterable)",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a generator expression instead.",
              ],
          ),
          (
              "list(map(lambda x: x * 2, iterable))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a list comprehension instead.",
              ],
          ),
          (
              "set(map(lambda num: num % 2 == 0, nums))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a set comprehension instead.",
              ],
          ),
          (
              "dict(map(lambda v: (v, v ** 2), values))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  "use a dict comprehension instead.",
              ],
          ),
      ],
  )
  def test_C417_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase><testcase classname="tests.test_flake8_comprehensions" name="test_C417_fail[dict(map(lambda v: (v, v ** 2), values))-failures3]" time="0.001"><error message="failed on setup with &quot;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 859&#10;  @pytest.mark.parametrize(&#10;      &quot;code,failures&quot;,&#10;      [&#10;          (&#10;              &quot;map(lambda x: x * 2, iterable)&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a generator expression instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;list(map(lambda x: x * 2, iterable))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a list comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;set(map(lambda num: num % 2 == 0, nums))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  + &quot;use a set comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;          (&#10;              &quot;dict(map(lambda v: (v, v ** 2), values))&quot;,&#10;              [&#10;                  &quot;./example.py:1:1: C417 Unnecessary use of map - &quot;&#10;                  &quot;use a dict comprehension instead.&quot;,&#10;              ],&#10;          ),&#10;      ],&#10;  )&#10;  def test_C417_fail(code, failures, flake8_path):&#10;file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15&#10;  @pytest.fixture&#10;  def flake8_path(flake8_path):&#10;E       recursive dependency involving fixture 'flake8_path' detected&#10;&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15&quot;">file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 859
  @pytest.mark.parametrize(
      "code,failures",
      [
          (
              "map(lambda x: x * 2, iterable)",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a generator expression instead.",
              ],
          ),
          (
              "list(map(lambda x: x * 2, iterable))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a list comprehension instead.",
              ],
          ),
          (
              "set(map(lambda num: num % 2 == 0, nums))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  + "use a set comprehension instead.",
              ],
          ),
          (
              "dict(map(lambda v: (v, v ** 2), values))",
              [
                  "./example.py:1:1: C417 Unnecessary use of map - "
                  "use a dict comprehension instead.",
              ],
          ),
      ],
  )
  def test_C417_fail(code, failures, flake8_path):
file /workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py, line 15
  @pytest.fixture
  def flake8_path(flake8_path):
E       recursive dependency involving fixture 'flake8_path' detected
&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, flake8_path, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/workdir/flake8-comprehensions-3.11.1/tests/test_flake8_comprehensions.py:15</error></testcase></testsuite></testsuites>