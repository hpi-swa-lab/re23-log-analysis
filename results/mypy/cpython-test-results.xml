<?xml version="1.0" encoding="utf-8"?>
<testsuites>
  <testsuite name="pytest" errors="2" failures="0" skipped="1" tests="449" time="19.371"
    timestamp="2023-11-22T08:19:37.330902" hostname="80ac3eb7f7f2">
    <testcase classname="mypy.test.test_find_sources.SourceFinderSuite" name="test_crawl_namespace"
      time="0.002" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testDynamicallyTypedReadWriteAbstractProperty" time="0.046" />
    <testcase classname="mypy.test.test_find_sources.SourceFinderSuite"
      name="test_crawl_namespace_explicit_base" time="0.001" />
    <testcase classname="mypy.test.test_find_sources.SourceFinderSuite"
      name="test_crawl_namespace_multi_dir" time="0.001" />
    <testcase classname="mypy.test.test_find_sources.SourceFinderSuite"
      name="test_crawl_no_namespace" time="0.001" />
    <testcase classname="mypy.test.test_find_sources.SourceFinderSuite"
      name="test_find_sources_exclude" time="0.007" />
    <testcase classname="mypy.test.test_find_sources.SourceFinderSuite"
      name="test_find_sources_in_dir_namespace" time="0.001" />
    <testcase classname="mypy.test.test_find_sources.SourceFinderSuite"
      name="test_find_sources_in_dir_namespace_explicit_base" time="0.002" />
    <testcase classname="mypy.test.test_find_sources.SourceFinderSuite"
      name="test_find_sources_in_dir_namespace_multi_dir" time="0.001" />
    <testcase classname="mypy.test.test_find_sources.SourceFinderSuite"
      name="test_find_sources_in_dir_no_namespace" time="0.001" />
    <testcase classname="mypy.test.testapi.APISuite" name="test_capture_bad_opt" time="0.005" />
    <testcase classname="mypy.test.testapi.APISuite" name="test_capture_empty" time="0.005" />
    <testcase classname="mypy.test.testapi.APISuite" name="test_capture_help" time="0.008" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testMixinTypedAbstractProperty" time="0.063" />
    <testcase classname="mypy.test.testapi.APISuite" name="test_capture_version" time="0.005" />
    <testcase classname="mypy.test.testargs.ArgSuite" name="test_coherence" time="0.007" />
    <testcase classname="mypy.test.testargs.ArgSuite" name="test_executable_inference" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeNoAttribute" time="0.075" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testMixinTypedProperty" time="0.041" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testMixinSubtypedProperty" time="0.040" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeUndefinedName" time="0.040" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testMixinTypedPropertyReversed" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeUnclassifiedError" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testNestedAbstractClass" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeNoteHasNoCode" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testAbstractNewTypeAllowed" time="0.138" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeSyntaxError" time="0.005" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeSyntaxError2" time="0.004" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeSyntaxError3" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeSyntaxErrorIgnoreNote" time="0.024" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeIgnore1" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeIgnore2" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeIgnoreMultiple1" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testSubclassOfABCFromDictionary" time="0.067" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeIgnoreMultiple2" time="0.025" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeWarnUnusedIgnores1" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testAbstractClassesWorkWithGenericDecorators" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeWarnUnusedIgnores2" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeWarnUnusedIgnores3" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testAbstractPropertiesAllowed" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeWarnUnusedIgnores4" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyProhibitedFunction" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeWarnUnusedIgnores5" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyProhibitedMethodNonAbstract" time="0.037" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeWarnUnusedIgnores6_NoDetailWhenSingleErrorCode" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyProhibitedPropertyNonAbstract" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeMissingWhenRequired" time="0.025" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeMissingDoesntTrampleUnusedIgnoresWarning" time="0.024" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyNoteABCMeta" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeMissingWholeFileIgnores" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyAllowedFunctionStub" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeMissingMultiple" time="0.069" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyAllowedMethodNonAbstractStub" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyAllowedPropertyNonAbstractStub" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeIgnoreWithExtraSpace" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyAllowedMethodAbstract" time="0.042" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeIgnoreAfterArgComment" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyAllowedPropertyAbstract" time="0.037" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeIgnoreWithNote" time="0.024" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeBadIgnore" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyImplicitlyAbstractProtocol" time="0.040" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeBadIgnoreNoExtraComment" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyImplicitlyAbstractProtocolProperty" time="0.034" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeArgKindAndCount" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeArgType" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyImplicitlyAbstractProtocolStub" time="0.044" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeInvalidType" time="0.044" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyUnsafeAbstractSuper" time="0.047" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeNeedTypeAnnotation" time="0.037" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyUnsafeAbstractSuperProperty" time="0.043" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeBadOverride" time="0.039" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyUnsafeAbstractSuperOverloads" time="0.073" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeReturnValue" time="0.038" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeMissingReturnValueInReturnStatement" time="0.025" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyNoSuperWarningWithoutStrict" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeAssignment" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeMissingTypeArg" time="0.037" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyNoSuperWarningOptionalReturn" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeUnionAttribute" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-abstract.test"
      name="testEmptyBodyTypeCheckingOnly" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeFunctionHasNoAnnotation" time="0.074" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testRedundantCast" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testRedundantCastWithIsinstance" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testCastToSuperclassNotRedundant" time="0.041" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeCallUntypedFunction" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testCastToAnyTypeNotRedundant" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeIndexing" time="0.052" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testUnusedTypeIgnore" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeInvalidTypeArg" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testUnusedTypeIgnoreImport" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeOperators" time="0.049" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test" name="testNoReturn"
      time="0.036" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testNoReturnWhile" time="0.039" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeListOrDictItem" time="0.051" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testNoReturnExcept" time="0.034" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeTypedDict" time="0.109" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testNoReturnEmptyBodyWithDocstring" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testReturnAnyFromTypedFunction" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testReturnAnyForNotImplementedInBinaryMagicMethods" time="0.050" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeTypedDictNoteIgnore" time="0.165" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testReturnAnyForNotImplementedInNormalMethods" time="0.040" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testReturnAnyFromTypedFunctionWithSpecificFormatting" time="0.093" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testReturnAnySilencedFromTypedFunction" time="0.036" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeCannotDetermineType" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testReturnAnyFromUntypedFunction" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeRedundantCast" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testReturnAnyFromAnyTypedFunction" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeInvalidCommentSignature" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testOKReturnAnyIfProperSubtype" time="0.039" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeNonOverlappingEquality" time="0.079" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-warnings.test"
      name="testReturnAnyDeferred" time="0.042" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeMissingModule" time="0.088" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testForcedAssignment" time="0.118" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeAlreadyDefined" time="0.070" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testJoinAny" time="0.055" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeMissingReturn" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testGeneratorExpressionTypes" time="0.038" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeReturnValueNotExpected" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeFunctionDoesNotReturnValue" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceNestedTuple" time="0.054" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeInstantiateAbstract" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testClassAttributeInitialization" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeNewTypeNotSubclassable" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testAssignmentSubtypes" time="0.051" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeOverloadVariant" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeOverloadVariantIgnore" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testFunctionDefaultArgs" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeAnyFromUnfollowedImport" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceFancyConditionals" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeReturnAny" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testSubtypingWithAny" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeFormatCall" time="0.058" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testSingleMultiAssignment" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionMultiAssignment" time="0.050" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeIgnoreNamedDefinedNote" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeProtocolProblemsIgnore" time="0.065" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionIfZigzag" time="0.045" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testTwoLoopsUnion" time="0.065" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeNoneReturnNoteIgnore" time="0.039" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeVarianceNoteIgnore" time="0.038" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testComplicatedBlocks" time="0.064" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeAssignToMethod" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeDefinedHereNoteIgnore" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionTryExcept" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeUnionNoteIgnore" time="0.039" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionTryExcept2" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionTryExcept3" time="0.043" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeTypeIgnoreMisspelled1" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeTypeIgnoreMisspelled2" time="0.004" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionTryExcept4" time="0.130" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCode__exit__Return" time="0.025" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeOverloadedOperatorMethod" time="0.038" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeMultiLineBinaryOperatorOperand" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeSpecialArgTypeErrors" time="0.080" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionTryFinally" time="0.039" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionTryFinally2" time="0.038" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testRedundantExpressions" time="0.069" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionTryFinally3" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionTryFinally4" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testNamedTupleNameMismatch" time="0.146" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionTryFinally5" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionTryFinally6" time="0.025" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionListIsinstance" time="0.058" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testTypedDictNameMismatch" time="0.069" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionListIsinstance2" time="0.046" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionStrictDefnBasic" time="0.054" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testTruthyBool" time="0.040" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testTruthyFunctions" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testSubtypeRedefinitionBasic" time="0.046" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testNoOverloadImplementation" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceBasic" time="0.046" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testSliceInDict39" time="0.052" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceIndexing" time="0.052" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testSliceInDict38" time="0.051" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceSubClassMember" time="0.054" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testSliceInCustomTensorType" time="0.039" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testNoteAboutChangedTypedDictErrorCode" time="0.092" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceSubClassReset" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceTuple" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceNeverWidens" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testRecommendErrorCode" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testMemberAssignmentChanges" time="0.054" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testShowErrorCodesInConfig" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testErrorCodeUnsafeSuper_no_empty" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceSubClassMemberHard" time="0.053" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testDedicatedErrorCodeForEmpty_no_empty" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testDedicatedErrorCodeTypeAbstract" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceReturn" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testUncheckedAnnotationCodeShown" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceBadBreak" time="0.053" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-errorcodes.test"
      name="testUncheckedAnnotationSuppressed" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningModuleVar" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceThreeUnion" time="0.061" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningInstanceVar" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningInstanceVarImplicit" time="0.041" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceThreeUnion2" time="0.055" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalBadDefinitionTooManyArgs" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceThreeUnion3" time="0.053" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalInvalidDefinitions" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningInstanceVarStubs" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testRemovingTypeRepeatedly" time="0.055" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningFunc" time="0.025" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningFuncOverloaded" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningMeth" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testModifyRepeatedly" time="0.056" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningMethOverloaded" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testModifyLoop" time="0.053" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningMethOverloadedStubs" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningProperty" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testModifyLoop2" time="0.052" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningOuterOnly" time="0.038" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningNotInMethod" time="0.025" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testModifyLoop3" time="0.052" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningNotInMethodExtensions" time="0.058" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testModifyLoopWhile4" time="0.054" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningNoRhs" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningNoRhsSubclass" time="0.025" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testModifyLoopFor4" time="0.054" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningNoTypevarsExplicit" time="0.039" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testModifyNestedLoop" time="0.055" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningTypevarsImplicit" time="0.041" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningNotInOtherMethod" time="0.041" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testModifyLoopLong" time="0.066" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningOnlyOnSelf" time="0.045" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testWhileExitCondition1" time="0.050" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalNotInProtocol" time="0.047" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testWhileExitCondition2" time="0.039" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalNotInLoops" time="0.038" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testWhileLinkedList" time="0.036" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDelayedDefinition" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testReturnAndFlow" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDelayedDefinitionOtherMethod" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testCastIsinstance" time="0.055" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignModuleVar" time="0.040" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignModuleVar2" time="0.049" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableCode" time="0.076" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignModuleVar3" time="0.047" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableCode2" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignModuleReexport" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableWhileTrue" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignFuncScope" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableAssertFalse" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignModuleVarExternal" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableAssertFalse2" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignInstanceVarClassBody" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableReturnOrAssertFalse" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignInstanceVarInit" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableTryExcept" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignInstanceVarClassVsInit" time="0.040" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableTryExceptElse" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignInstanceVarMethod" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableTryReturnFinally1" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignInstanceVarExternalClass" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableTryReturnFinally2" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalReassignInstanceVarExternalInstance" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableTryReturnExceptRaise" time="0.036" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalWorksWithComplexTargets" time="0.037" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnreachableReturnLambda" time="0.034" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalInplaceAssign" time="0.036" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceAnd" time="0.049" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingVarClassBody" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceShortcircuit" time="0.054" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingVarClassBodyExplicit" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingVarInit" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceExpression" time="0.051" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingVarInit2" time="0.034" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceMultiAnd" time="0.059" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingVarOtherMethod" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingVarMultipleInheritanceClass" time="0.034" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceMultiAndSpecialCase" time="0.089" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingVarMultipleInheritanceInit" time="0.062" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingVarMultipleInheritanceMixed" time="0.038" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testReturnWithCallExprAndIsinstance" time="0.056" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingVarWithMethod" time="0.034" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceOr1" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingVarWithMethodClass" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceOr2" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingMethodRegular" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingMethodInitNew" time="0.037" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceOr3" time="0.050" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingMethodWithVar" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceWithOverlappingUnionType" time="0.036" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingMethodWithVarImplicit" time="0.034" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceWithOverlappingUnionType2" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalCanOverrideMethodWithFinal" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceWithOverlappingPromotionTypes" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingMethodMultipleInheritance" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceOfSuperclass" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingMethodMultipleInheritanceVar" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceOfNonoverlapping" time="0.037" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingClassMethod" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testAssertIsinstance" time="0.034" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingStaticMethod" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testUnionAssertIsinstance" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingProperty" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalOverridingMethodOverloads" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testAnyAssertIsinstance" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalClassNoInheritance" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceOfGenericClassRetainsParameters" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalClassNoInheritanceMulti" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceOrIsinstance" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalCantOverrideWriteable" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testComprehensionIsInstance" time="0.049" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalCanUseTypingExtensions" time="0.058" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceInWrongOrderInBooleanOp" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalCanUseTypingExtensionsAliased" time="0.056" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceAndOr" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceWithUnknownType" time="0.049" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalMultiassignAllowed" time="0.173" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceWithBoundedType" time="0.040" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceWithEmtpy2ndArg" time="0.189" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalInDeferredMethod" time="0.046" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalUsedWithClassVar" time="0.023" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalClassWithAbstractMethod" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceWithTypeObject" time="0.041" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalDefiningFuncWithAbstractMethod" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-final.test"
      name="testFinalClassVariableRedefinitionDoesNotCrash" time="0.025" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIssubclassUnreachable" time="0.044" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-singledispatch.test"
      name="testIncorrectDispatchArgumentWhenDoesntMatchFallback" time="1.313" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIssubclasDestructuringUnions1" time="0.053" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIssubclasDestructuringUnions2" time="0.063" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIssubclasDestructuringUnions3" time="0.056" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIssubclass" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIssubclassDeepHierarchy" time="0.051" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIssubclassTuple" time="0.057" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIssubclassBuiltins" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceTypeArgs" time="0.109" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceAnyAlias" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceTypeArgsAliases" time="0.085" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIssubclassTypeArgs" time="0.168" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIssubclassWithMetaclasses" time="0.036" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIssubclassWithMetaclassesStrictOptional" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceAndNarrowTypeVariable" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceAndTypeType" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceVariableSubstitution" time="0.046" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceTooFewArgs" time="0.042" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsSubclassTooFewArgs" time="0.044" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceTooManyArgs" time="0.044" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceNarrowAny" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowTypeAfterInList" time="0.037" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowTypeAfterInListOfOptional" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowTypeAfterInListNonOverlapping" time="0.036" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowTypeAfterInListNested" time="0.036" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowTypeAfterInTuple" time="0.041" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-singledispatch.test"
      name="testMultipleUnderscoreFunctionsIsntError" time="1.185" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowTypeAfterInNamedTuple" time="0.043" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowTypeAfterInDict" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowTypeAfterInNoAnyOrObject" time="0.041" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowTypeAfterInUserDefined" time="0.083" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowTypeAfterInSet" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowTypeAfterInTypedDict" time="0.120" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceWidensWithAnyArg" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceWidensUnionWithAnyArg" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceIgnoredImport" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsinstanceIgnoredImportDualAny" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceInitialNoneCheckSkipsImpossibleCasesNoStrictOptional" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceInitialNoneCheckSkipsImpossibleCasesInNoStrictOptional" time="0.038" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNoneCheckDoesNotNarrowWhenUsingTypeVars" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNoneCheckDoesNotNarrowWhenUsingTypeVarsNoStrictOptional" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNoneAndGenericTypesOverlapNoStrictOptional" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNoneAndGenericTypesOverlapStrictOptional" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceWithStarExpression" time="0.054" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceWithStarExpressionAndVariable" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceWithWrongStarExpression" time="0.045" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionBasic" time="0.034" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionRepeatedChecks" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionIncompatibleClasses" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionReversed" time="0.059" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionGenerics" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionGenericsWithValues" time="0.037" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionGenericsWithValuesDirectReturn" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-singledispatch.test"
      name="testCheckNonDispatchArgumentsWithTypeAlwaysTheSame" time="1.344" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionUsage" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionReinfer" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionWithUnions" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionSameNames" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionBadMro" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsInstanceAdHocIntersectionAmbiguousClass" time="0.183" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testIsSubclassAdHocIntersection" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testTypeEqualsCheck" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testMultipleTypeEqualsCheck" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testTypeEqualsCheckUsingIs" time="0.025" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testTypeEqualsNarrowingUnionWithElse" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testTypeEqualsMultipleTypesShouldntNarrow" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testTypeNotEqualsCheck" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testTypeNotEqualsCheckUsingIsNot" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowInElseCaseIfFinal" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testNarrowInIfCaseIfFinalUsingIsNot" time="0.025" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrExistingAttribute" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrMissingAttributeInstance" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrMissingAttributeFunction" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrMissingAttributeClassObject" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrMissingAttributeTypeType" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrMissingAttributeTypeVar" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrMissingAttributeChained" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrMissingAttributeNested" time="0.036" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrPreciseType" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrMissingAttributeUnion" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrMissingAttributeOuterUnion" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrDoesntInterfereGetAttr" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrMissingAttributeLiteral" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrDeferred" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrModule" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-isinstance.test"
      name="testHasAttrDoesntInterfereModuleGetAttr" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineLocalWithDifferentType" time="0.027" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testCannotConditionallyRedefineLocalWithDifferentType" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineFunctionArg" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineAnnotationOnly" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineLocalUsingOldValue" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineLocalForLoopIndexVariable" time="0.035" />
    <testcase time="0.001" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testCannotRedefineLocalWithinTry" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineLocalWithinWith" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testCannotRedefineAcrossNestedFunction" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testCannotRedefineAcrossNestedDecoratedFunction" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testCannotRedefineAcrossNestedOverloadedFunction" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineLocalInMultipleAssignment" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineUnderscore" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineWithBreakAndContinue" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineLocalAndNestedLoops" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testCannotRedefineVarAsFunction" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testCannotRedefineVarAsClass" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineVarAsTypeVar" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testCannotRedefineVarAsModule" time="0.035" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineLocalWithTypeAnnotation" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineLocalWithTypeAnnotationSpecialCases" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testCannotRedefineSelf" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineGlobalWithDifferentType" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineGlobalForIndex" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineGlobalBasedOnPreviousValues" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineGlobalWithSeparateDeclaration" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineGlobalUsingForLoop" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testNoRedefinitionIfOnlyInitialized" time="0.030" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testNoRedefinitionIfNoValueAssigned" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testNoRedefinitionIfExplicitlyDisallowed" time="0.048" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineAsException" time="0.033" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineUsingWithStatement" time="0.032" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefineModuleAsException" time="0.031" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefiningUnderscoreFunctionIsntAnError" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testTypeErrorsInUnderscoreFunctionsReported" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testCallingUnderscoreFunctionIsNotAllowed" time="0.002">
      <skipped type="pytest.skip" message="Skipped">/workdir/mypy-0.991/mypy/test/data.py:277:
        Skipped</skipped>
    </testcase>
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testFunctionStillTypeCheckedWhenAliasedAsUnderscoreDuringImport" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testCallToFunctionStillTypeCheckedWhenAssignedToUnderscoreVariable" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefiningUnderscoreFunctionWithDecoratorWithUnderscoreFunctionsNextToEachOther"
      time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testRedefiningUnderscoreFunctionWithDecoratorInDifferentPlaces" time="0.026" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-redefine.test"
      name="testOverwritingImportedFunctionThatWasAliasedAsUnderscore" time="0.029" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-dynamic-typing.test"
      name="testAssignmentWithDynamic" time="0.028" />
    <testcase classname="mypy.test.testcheck.TypeCheckSuite.check-dynamic-typing.test"
      name="testMultipleAssignmentWithDynamic" time="0.043" />
    <testcase time="0.001" />
    <testcase classname="pytest" name="internal" time="0.000">
      <error message="internal error">def worker_internal_error(self, node, formatted_error):
        """
        pytest_internalerror() was called on the worker.

        pytest_internalerror() arguments are an excinfo and an excrepr, which can't
        be serialized, so we go with a poor man's solution of raising an exception
        here ourselves using the formatted message.
        """
        self._active_nodes.remove(node)
        try:
        &gt; assert False, formatted_error
        E AssertionError: Traceback (most recent call last):
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/main.py",
        line 271, in wrap_session
        E session.exitstatus = doit(config, session) or 0
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/main.py",
        line 325, in _main
        E config.hook.pytest_runtestloop(session=session)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py",
        line 493, in __call__
        E return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py",
        line 115, in _hookexec
        E return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py",
        line 152, in _multicall
        E return outcome.get_result()
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py",
        line 114, in get_result
        E raise exc.with_traceback(exc.__traceback__)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py",
        line 77, in _multicall
        E res = hook_impl.function(*args)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/xdist/remote.py",
        line 157, in pytest_runtestloop
        E self.run_one_test()
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/xdist/remote.py",
        line 174, in run_one_test
        E self.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py",
        line 493, in __call__
        E return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py",
        line 115, in _hookexec
        E return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py",
        line 152, in _multicall
        E return outcome.get_result()
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py",
        line 114, in get_result
        E raise exc.with_traceback(exc.__traceback__)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py",
        line 77, in _multicall
        E res = hook_impl.function(*args)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py",
        line 114, in pytest_runtest_protocol
        E runtestprotocol(item, nextitem=nextitem)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py",
        line 133, in runtestprotocol
        E reports.append(call_and_report(item, "call", log))
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py",
        line 224, in call_and_report
        E report: TestReport = hook.pytest_runtest_makereport(item=item, call=call)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py",
        line 493, in __call__
        E return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py",
        line 115, in _hookexec
        E return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py",
        line 130, in _multicall
        E teardown[0].send(outcome)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/skipping.py",
        line 266, in pytest_runtest_makereport
        E rep = outcome.get_result()
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py",
        line 114, in get_result
        E raise exc.with_traceback(exc.__traceback__)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py",
        line 77, in _multicall
        E res = hook_impl.function(*args)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py",
        line 368, in pytest_runtest_makereport
        E return TestReport.from_item_and_call(item, call)
        E File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/reports.py",
        line 362, in from_item_and_call
        E longrepr = item.repr_failure(excinfo)
        E File "/workdir/mypy-0.991/mypy/test/data.py", line 357, in repr_failure
        E self.parent._prunetraceback(excinfo)
        E AttributeError: 'DataFileCollector' object has no attribute '_prunetraceback'
        E assert False
        .tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/xdist/dsession.py:200:
        AssertionError</error>
      <error message="internal error">
        Traceback (most recent call last):
        File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/main.py",
        line 271, in wrap_session
        session.exitstatus = doit(config, session) or 0
        File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/main.py",
        line 325, in _main
        config.hook.pytest_runtestloop(session=session)
        File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py",
        line 493, in __call__
        return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
        File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py",
        line 115, in _hookexec
        return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
        File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py",
        line 152, in _multicall
        return outcome.get_result()
        File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py",
        line 114, in get_result
        raise exc.with_traceback(exc.__traceback__)
        File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py",
        line 77, in _multicall
        res = hook_impl.function(*args)
        File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/xdist/dsession.py",
        line 123, in pytest_runtestloop
        self.loop_once()
        File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/xdist/dsession.py",
        line 148, in loop_once
        call(**kwargs)
        File
        "/workdir/mypy-0.991/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/xdist/dsession.py",
        line 187, in worker_workerfinished
        assert not crashitem, (crashitem, node)
        AssertionError:
        ('mypy/test/testcheck.py::TypeCheckSuite::check-singledispatch.test::testImplementationHasSameDispatchTypeAsFallback',
        &lt;WorkerController gw0&gt;)
        assert not
        'mypy/test/testcheck.py::TypeCheckSuite::check-singledispatch.test::testImplementationHasSameDispatchTypeAsFallback'</error>
    </testcase>
  </testsuite>
</testsuites>