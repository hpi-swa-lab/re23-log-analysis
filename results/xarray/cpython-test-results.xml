<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="23" skipped="6382" tests="10827" time="102.945" timestamp="2023-11-30T23:32:07.600774" hostname="be2d8ee410eb"><testcase classname="" name="xarray.tests.test_calendar_ops" time="0.000"><skipped message="collection skipped">('/workdir/xarray-2022.12.0/xarray/tests/test_calendar_ops.py', 13, "Skipped: could not import 'cftime': No module named 'cftime'")</skipped></testcase><testcase classname="" name="xarray.tests.test_cftime_offsets" time="0.000"><skipped message="collection skipped">('/workdir/xarray-2022.12.0/xarray/tests/test_cftime_offsets.py', 39, "Skipped: could not import 'cftime': No module named 'cftime'")</skipped></testcase><testcase classname="" name="xarray.tests.test_cftimeindex_resample" time="0.000"><skipped message="collection skipped">('/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex_resample.py', 12, "Skipped: could not import 'cftime': No module named 'cftime'")</skipped></testcase><testcase classname="" name="xarray.tests.test_cupy" time="0.000"><skipped message="collection skipped">('/workdir/xarray-2022.12.0/xarray/tests/test_cupy.py', 9, "Skipped: could not import 'cupy': No module named 'cupy'")</skipped></testcase><testcase classname="" name="xarray.tests.test_dask" time="0.000"><skipped message="collection skipped">('/workdir/xarray-2022.12.0/xarray/tests/test_dask.py', 34, "Skipped: could not import 'dask': No module named 'dask'")</skipped></testcase><testcase classname="" name="xarray.tests.test_distributed" time="0.000"><skipped message="collection skipped">('/workdir/xarray-2022.12.0/xarray/tests/test_distributed.py', 16, "Skipped: could not import 'dask': No module named 'dask'")</skipped></testcase><testcase classname="" name="xarray.tests.test_sparse" time="0.000"><skipped message="collection skipped">('/workdir/xarray-2022.12.0/xarray/tests/test_sparse.py', 22, "Skipped: could not import 'sparse': No module named 'sparse'")</skipped></testcase><testcase classname="" name="xarray.tests.test_units" time="0.000"><skipped message="collection skipped">('/workdir/xarray-2022.12.0/xarray/tests/test_units.py', 31, "Skipped: could not import 'pint': No module named 'pint'")</skipped></testcase><testcase classname="" name="properties.test_encode_decode" time="0.000"><skipped message="collection skipped">('/workdir/xarray-2022.12.0/properties/test_encode_decode.py', 9, "Skipped: could not import 'hypothesis': No module named 'hypothesis'")</skipped></testcase><testcase classname="" name="properties.test_pandas_roundtrip" time="0.000"><skipped message="collection skipped">('/workdir/xarray-2022.12.0/properties/test_pandas_roundtrip.py', 12, "Skipped: could not import 'hypothesis': No module named 'hypothesis'")</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[year]" time="0.008" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[month]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[day]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[hour]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[minute]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[second]" time="0.006" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[microsecond]" time="0.006" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[nanosecond]" time="0.006" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[week]" time="0.008" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[weekofyear]" time="0.008" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[dayofweek]" time="0.006" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[weekday]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[dayofyear]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[quarter]" time="0.006" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[date]" time="0.006" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[time]" time="0.006" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[is_month_start]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[is_month_end]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[is_quarter_start]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[is_quarter_end]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[is_year_start]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[is_year_end]" time="0.004" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_field_access[is_leap_year]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_isocalendar[year-year]" time="0.007" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_isocalendar[week-week]" time="0.007" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_isocalendar[weekday-day]" time="0.007" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_calendar" time="0.003" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_strftime" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_not_datetime_type" time="0.004" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[minute]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[second]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[microsecond]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[nanosecond]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[week]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[weekofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[weekday]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[quarter]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[date]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[time]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[is_month_start]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[is_month_end]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[is_quarter_start]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[is_quarter_end]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[is_year_start]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[is_year_end]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_field_access[is_leap_year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:126: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_isocalendar_dask[year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:173: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_isocalendar_dask[week]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:173: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_isocalendar_dask[weekday]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:173: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_accessor_method[floor-D]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:199: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_accessor_method[ceil-D]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:199: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_accessor_method[round-D]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:199: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_dask_accessor_method[strftime-%Y-%m-%d %H:%M:%S]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:199: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_seasons" time="0.006" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_accessor_method[floor-D]" time="0.007" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_accessor_method[ceil-D]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestDatetimeAccessor" name="test_accessor_method[round-D]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_not_datetime_type" time="0.004" /><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_field_access[days]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_field_access[seconds]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_field_access[microseconds]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_field_access[nanoseconds]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_accessor_methods[floor-D]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_accessor_methods[ceil-D]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_accessor_methods[round-D]" time="0.005" /><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_dask_field_access[days]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:311: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_dask_field_access[seconds]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:311: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_dask_field_access[microseconds]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:311: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_dask_field_access[nanoseconds]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:311: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_dask_accessor_method[floor-D]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:332: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_dask_accessor_method[ceil-D]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:332: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt.TestTimedeltaAccessor" name="test_dask_accessor_method[round-D]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:332: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[365_day-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[365_day-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[365_day-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[365_day-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[365_day-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[365_day-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[360_day-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[360_day-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[360_day-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[360_day-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[360_day-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[360_day-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[julian-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[julian-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[julian-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[julian-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[julian-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[julian-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[all_leap-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[all_leap-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[all_leap-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[all_leap-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[all_leap-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[all_leap-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[366_day-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[366_day-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[366_day-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[366_day-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[366_day-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[366_day-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[gregorian-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[gregorian-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[gregorian-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[gregorian-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[gregorian-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[gregorian-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[proleptic_gregorian-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[proleptic_gregorian-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[proleptic_gregorian-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[proleptic_gregorian-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[proleptic_gregorian-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_field_access[proleptic_gregorian-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:402: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_calendar_cftime[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_calendar_cftime[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_calendar_cftime[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_calendar_cftime[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_calendar_cftime[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_calendar_cftime[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_calendar_cftime[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_calendar_datetime64_2d" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:425: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_calendar_datetime64_3d_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:431: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_calendar_dask_cftime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:442: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_isocalendar_cftime[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:460: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_isocalendar_cftime[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:460: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_isocalendar_cftime[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:460: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_isocalendar_cftime[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:460: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_isocalendar_cftime[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:460: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_isocalendar_cftime[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:460: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_isocalendar_cftime[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:460: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_date_cftime[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:469: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_date_cftime[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:469: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_date_cftime[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:469: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_date_cftime[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:469: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_date_cftime[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:469: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_date_cftime[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:469: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_date_cftime[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:469: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_strftime_access[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:479: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_strftime_access[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:479: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_strftime_access[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:479: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_strftime_access[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:479: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_strftime_access[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:479: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_strftime_access[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:479: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_strftime_access[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:479: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[365_day-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[365_day-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[365_day-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[365_day-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[365_day-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[365_day-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[360_day-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[360_day-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[360_day-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[360_day-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[360_day-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[360_day-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[julian-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[julian-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[julian-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[julian-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[julian-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[julian-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[all_leap-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[all_leap-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[all_leap-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[all_leap-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[all_leap-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[all_leap-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[366_day-year]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[366_day-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[366_day-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[366_day-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[366_day-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[366_day-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[gregorian-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[gregorian-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[gregorian-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[gregorian-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[gregorian-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[gregorian-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[proleptic_gregorian-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[proleptic_gregorian-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[proleptic_gregorian-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[proleptic_gregorian-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[proleptic_gregorian-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access_1d[proleptic_gregorian-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:495: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[365_day-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[365_day-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[365_day-day]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[365_day-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[365_day-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[365_day-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[360_day-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[360_day-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[360_day-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[360_day-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[360_day-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[360_day-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[julian-year]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[julian-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[julian-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[julian-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[julian-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[julian-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[all_leap-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[all_leap-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[all_leap-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[all_leap-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[all_leap-dayofyear]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[all_leap-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[366_day-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[366_day-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[366_day-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[366_day-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[366_day-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[366_day-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[gregorian-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[gregorian-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[gregorian-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[gregorian-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[gregorian-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[gregorian-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[proleptic_gregorian-year]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[proleptic_gregorian-month]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[proleptic_gregorian-day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[proleptic_gregorian-hour]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[proleptic_gregorian-dayofyear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_dask_field_access[proleptic_gregorian-dayofweek]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:515: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_seasons[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:545: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_seasons[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:545: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_seasons[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:545: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_seasons[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:545: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_seasons[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:545: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_seasons[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:545: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_seasons[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:545: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[365_day-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[365_day-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[360_day-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[360_day-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[julian-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[julian-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[all_leap-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[all_leap-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[366_day-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[366_day-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[gregorian-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[gregorian-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[proleptic_gregorian-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_floor_accessor[proleptic_gregorian-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:580: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[365_day-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[365_day-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[360_day-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[360_day-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[julian-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[julian-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[all_leap-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[all_leap-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[366_day-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[366_day-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[gregorian-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[gregorian-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[proleptic_gregorian-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_ceil_accessor[proleptic_gregorian-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:613: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[365_day-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[365_day-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[360_day-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[360_day-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[julian-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[julian-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[all_leap-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[all_leap-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[366_day-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[366_day-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[gregorian-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[gregorian-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[proleptic_gregorian-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_dt" name="test_cftime_round_accessor[proleptic_gregorian-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_dt.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_str" name="test_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_accessor_str.py:59: requires dask</skipped></testcase><testcase classname="xarray.tests.test_accessor_str" name="test_count[str]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_count[bytes]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_count_broadcast[str]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_count_broadcast[bytes]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_contains[str]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_contains[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_contains_broadcast[str]" time="0.010" /><testcase classname="xarray.tests.test_accessor_str" name="test_contains_broadcast[bytes]" time="0.009" /><testcase classname="xarray.tests.test_accessor_str" name="test_starts_ends_with[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_starts_ends_with[bytes]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_starts_ends_with_broadcast[str]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_starts_ends_with_broadcast[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_case_bytes" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_case_str" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_replace[str]" time="0.012" /><testcase classname="xarray.tests.test_accessor_str" name="test_replace[bytes]" time="0.011" /><testcase classname="xarray.tests.test_accessor_str" name="test_replace_callable" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_replace_unicode" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_replace_compiled_regex[str]" time="0.010" /><testcase classname="xarray.tests.test_accessor_str" name="test_replace_compiled_regex[bytes]" time="0.010" /><testcase classname="xarray.tests.test_accessor_str" name="test_replace_literal[str]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_replace_literal[bytes]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_extractall_findall_empty_raises[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_extractall_findall_empty_raises[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_multi_None_raises[str]" time="0.002" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_multi_None_raises[bytes]" time="0.002" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_extractall_findall_case_re_raises[str]" time="0.002" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_extractall_findall_case_re_raises[bytes]" time="0.002" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_extractall_name_collision_raises[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_extractall_name_collision_raises[bytes]" time="0.002" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_single_case[str]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_single_case[bytes]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_single_nocase[str]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_single_nocase[bytes]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_multi_case[str]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_multi_case[bytes]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_multi_nocase[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_multi_nocase[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_broadcast[str]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_extract_broadcast[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_single_single_case[str]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_single_single_case[bytes]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_single_single_nocase[str]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_single_single_nocase[bytes]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_single_multi_case[str]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_single_multi_case[bytes]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_single_multi_nocase[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_single_multi_nocase[bytes]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_multi_single_case[str]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_multi_single_case[bytes]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_multi_single_nocase[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_multi_single_nocase[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_multi_multi_case[str]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_multi_multi_case[bytes]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_multi_multi_nocase[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_multi_multi_nocase[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_broadcast[str]" time="0.009" /><testcase classname="xarray.tests.test_accessor_str" name="test_extractall_broadcast[bytes]" time="0.009" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_single_single_case[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_single_single_case[bytes]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_single_single_nocase[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_single_single_nocase[bytes]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_single_multi_case[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_single_multi_case[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_single_multi_nocase[str]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_single_multi_nocase[bytes]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_multi_single_case[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_multi_single_case[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_multi_single_nocase[str]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_multi_single_nocase[bytes]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_multi_multi_case[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_multi_multi_case[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_multi_multi_nocase[str]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_multi_multi_nocase[bytes]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_broadcast[str]" time="0.007" /><testcase classname="xarray.tests.test_accessor_str" name="test_findall_broadcast[bytes]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_repeat[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_repeat[bytes]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_repeat_broadcast[str]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_repeat_broadcast[bytes]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_match[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_match[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_empty_str_methods" time="0.024" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[str-isalnum]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[str-isalpha]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[str-isdigit]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[str-islower]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[str-isspace]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[str-istitle]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[str-isupper]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[bytes-isalnum]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[bytes-isalpha]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[bytes-isdigit]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[bytes-islower]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[bytes-isspace]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[bytes-istitle]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_ismethods[bytes-isupper]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_isnumeric" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_len[str]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_len[bytes]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_find[str]" time="0.009" /><testcase classname="xarray.tests.test_accessor_str" name="test_find[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_find_broadcast[str]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_find_broadcast[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_index[str]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_index[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_index_broadcast[str]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_index_broadcast[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_translate" time="0.002" /><testcase classname="xarray.tests.test_accessor_str" name="test_pad_center_ljust_rjust[str]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_pad_center_ljust_rjust[bytes]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_pad_center_ljust_rjust_fillchar[str]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_pad_center_ljust_rjust_fillchar[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_pad_center_ljust_rjust_broadcast[str]" time="0.011" /><testcase classname="xarray.tests.test_accessor_str" name="test_pad_center_ljust_rjust_broadcast[bytes]" time="0.011" /><testcase classname="xarray.tests.test_accessor_str" name="test_zfill[str]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_zfill[bytes]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_zfill_broadcast[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_zfill_broadcast[bytes]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_slice[str]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_slice[bytes]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_slice_broadcast[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_slice_broadcast[bytes]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_slice_replace[str]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_slice_replace[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_slice_replace_broadcast[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_slice_replace_broadcast[bytes]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_strip_lstrip_rstrip[str]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_strip_lstrip_rstrip[bytes]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_strip_lstrip_rstrip_args[str]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_strip_lstrip_rstrip_args[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_strip_lstrip_rstrip_broadcast[str]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_strip_lstrip_rstrip_broadcast[bytes]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_wrap" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_wrap_kwargs_passed" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_get[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_get[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_get_default[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_get_default[bytes]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_get_broadcast[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_get_broadcast[bytes]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_encode_decode" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_encode_decode_errors" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_partition_whitespace[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_partition_whitespace[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_partition_comma[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_partition_comma[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_partition_empty[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_partition_empty[bytes]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_nodim[str-split_full]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_nodim[str-rsplit_full]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_nodim[str-split_1]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_nodim[str-rsplit_1]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_nodim[bytes-split_full]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_nodim[bytes-rsplit_full]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_nodim[bytes-split_1]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_nodim[bytes-rsplit_1]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_dim[str-split_full]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_dim[str-rsplit_full]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_dim[str-split_1]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_dim[str-rsplit_1]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_dim[bytes-split_full]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_dim[bytes-rsplit_full]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_dim[bytes-split_1]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_whitespace_dim[bytes-rsplit_1]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[str-split_full]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[str-rsplit_full]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[str-split_1]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[str-rsplit_1]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[str-split_10]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[str-rsplit_10]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[bytes-split_full]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[bytes-rsplit_full]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[bytes-split_1]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[bytes-rsplit_1]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[bytes-split_10]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_nodim[bytes-rsplit_10]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[str-split_full]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[str-rsplit_full]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[str-split_1]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[str-rsplit_1]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[str-split_10]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[str-rsplit_10]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[bytes-split_full]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[bytes-rsplit_full]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[bytes-split_1]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[bytes-rsplit_1]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[bytes-split_10]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_comma_dim[bytes-rsplit_10]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_splitters_broadcast[str]" time="0.011" /><testcase classname="xarray.tests.test_accessor_str" name="test_splitters_broadcast[bytes]" time="0.011" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_empty[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_split_empty[bytes]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_get_dummies[str]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_get_dummies[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_get_dummies_broadcast[str]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_get_dummies_broadcast[bytes]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_get_dummies_empty[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_get_dummies_empty[bytes]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_splitters_empty_str[str]" time="0.012" /><testcase classname="xarray.tests.test_accessor_str" name="test_splitters_empty_str[bytes]" time="0.012" /><testcase classname="xarray.tests.test_accessor_str" name="test_cat_str[str]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_cat_str[bytes]" time="0.006" /><testcase classname="xarray.tests.test_accessor_str" name="test_cat_uniform[str]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_cat_uniform[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_cat_broadcast_right[str]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_cat_broadcast_right[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_cat_broadcast_left[str]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_cat_broadcast_left[bytes]" time="0.009" /><testcase classname="xarray.tests.test_accessor_str" name="test_cat_broadcast_both[str]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_cat_broadcast_both[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_cat_multi" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_join_scalar[str]" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_join_scalar[bytes]" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_join_vector[str]" time="0.009" /><testcase classname="xarray.tests.test_accessor_str" name="test_join_vector[bytes]" time="0.008" /><testcase classname="xarray.tests.test_accessor_str" name="test_join_2d[str]" time="0.009" /><testcase classname="xarray.tests.test_accessor_str" name="test_join_2d[bytes]" time="0.009" /><testcase classname="xarray.tests.test_accessor_str" name="test_join_broadcast[str]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_join_broadcast[bytes]" time="0.005" /><testcase classname="xarray.tests.test_accessor_str" name="test_format_scalar" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_format_broadcast" time="0.004" /><testcase classname="xarray.tests.test_accessor_str" name="test_mod_scalar" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_mod_dict" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_mod_broadcast_single" time="0.003" /><testcase classname="xarray.tests.test_accessor_str" name="test_mod_broadcast_multi" time="0.004" /><testcase classname="xarray.tests.test_array_api" name="test_arithmetic" time="0.003" /><testcase classname="xarray.tests.test_array_api" name="test_aggregation" time="0.004" /><testcase classname="xarray.tests.test_array_api" name="test_aggregation_skipna" time="0.003" /><testcase classname="xarray.tests.test_array_api" name="test_astype" time="0.004" /><testcase classname="xarray.tests.test_array_api" name="test_indexing" time="0.003" /><testcase classname="xarray.tests.test_array_api" name="test_properties" time="0.003" /><testcase classname="xarray.tests.test_array_api" name="test_reorganizing_operation" time="0.003" /><testcase classname="xarray.tests.test_array_api" name="test_stack" time="0.005" /><testcase classname="xarray.tests.test_array_api" name="test_where" time="0.004" /><testcase classname="xarray.tests.test_backends.TestCommon" name="test_robust_getitem" time="0.002" /><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:459: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_bytes_with_fill_value" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_coordinates_encoding" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_open_group" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1297: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_open_subgroup" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1322: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_write_groups" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1344: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_encoding_kwarg_vlen_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1355: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_string_with_fill_value_vlen" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1364: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_roundtrip_character_array" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1382: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_default_to_char_arrays" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1400: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_open_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1406: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_dump_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1433: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_dump_and_open_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1440: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_compression_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1459: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_encoding_kwarg_compression" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_keep_chunksizes_if_no_original_shape" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1502: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_encoding_chunksizes_unlimited" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1513: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_mask_and_scale" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1528: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_0dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1553: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_read_variable_len_strings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1565: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_encoding_unlimited_dims" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1579: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_variable_order" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1598: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_unsorted_index_raises" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1609: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_setncattr_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1632: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4Data" name="test_refresh_from_disk" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1649: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4AlreadyOpen" name="test_base_case" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1656: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4AlreadyOpen" name="test_group" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1668: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4AlreadyOpen" name="test_deepcopy" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1691: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_string_data" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_boolean_dtype" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_open_group" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1297: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_open_subgroup" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1322: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_write_groups" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1344: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_encoding_kwarg_vlen_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1355: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_string_with_fill_value_vlen" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1364: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_roundtrip_character_array" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1382: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_default_to_char_arrays" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1400: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_open_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1406: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_dump_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1433: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_dump_and_open_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1440: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_compression_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1459: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_encoding_kwarg_compression" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_keep_chunksizes_if_no_original_shape" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1502: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_encoding_chunksizes_unlimited" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1513: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_mask_and_scale" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1528: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_0dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1553: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_read_variable_len_strings" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1565: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_encoding_unlimited_dims" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1579: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_variable_order" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1598: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_setncattr_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1632: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_refresh_from_disk" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1649: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_unsorted_index_raises" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1725: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1730: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ViaDaskData" name="test_write_inconsistent_chunks" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1734: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_test_data" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_cftime_datetime_data" time="0.001"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_vectorized_indexing_negative_step" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_endian" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_invalid_dataarray_names_raise" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_encoding_kwarg_dates" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_default_fill_value" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_multiindex_not_implemented" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_consolidated[False]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_consolidated[True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_roundtrip_consolidated[None]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_read_non_consolidated_warning" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1805: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_non_existent_store" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1820: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_with_chunkstore" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1824: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_auto_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1833: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_manual_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_warning_on_bad_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1895: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_deprecate_auto_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1917: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_uneven_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1936: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_chunk_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1945: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_chunk_encoding_with_dask" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1961: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_hidden_zarr_keys" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2044: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_persistence_modes[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2068: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_persistence_modes[group1]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2068: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_compressor_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2119: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_group" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2131: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2139: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2145: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2149: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_with_mode_rplus_success" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2152: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_with_mode_rplus_fails" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2161: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2171: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_with_no_dims_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2182: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_with_append_dim_not_set_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2192: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_with_mode_not_a_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2199: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_with_existing_encoding_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2208: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_string_length_mismatch_raises[U]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2220: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_string_length_mismatch_raises[S]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2220: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_check_encoding_is_consistent_after_append" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2230: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_append_with_new_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2254: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_to_zarr_compute_false_roundtrip" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2271: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_to_zarr_append_compute_false_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2291: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_save_emptydim[False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2328: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_save_emptydim[True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2328: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_no_warning_from_open_emptydim_with_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2338: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[False-False-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[False-False-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[False-False-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[False-True-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[False-True-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[False-True-None]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[True-False-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[True-False-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[True-False-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[True-True-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[True-True-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region[True-True-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region_mode[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region_mode[r+]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region_mode[a]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_preexisting_override_metadata" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2400: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_region_errors" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2444: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_encoding_chunksizes" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2520: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_chunk_encoding_with_partial_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2536: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_chunk_encoding_with_larger_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2547: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_open_zarr_use_cftime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2556: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_write_read_select_write" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2566: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_attributes[obj0]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2580: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDictStore" name="test_attributes[obj1]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2580: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_store" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_numpy_datetime_data" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_vectorized_indexing" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_encoding_kwarg_dates" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_consolidated[False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_consolidated[True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_roundtrip_consolidated[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_read_non_consolidated_warning" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1805: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_non_existent_store" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1820: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_with_chunkstore" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1824: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_auto_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1833: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_manual_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_warning_on_bad_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1895: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_deprecate_auto_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1917: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_uneven_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1936: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_chunk_encoding" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1945: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_chunk_encoding_with_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1961: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_hidden_zarr_keys" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2044: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_persistence_modes[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2068: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_persistence_modes[group1]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2068: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_compressor_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2119: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_group" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2131: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2139: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2145: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2149: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_with_mode_rplus_success" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2152: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_with_mode_rplus_fails" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2161: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2171: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_with_no_dims_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2182: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_with_append_dim_not_set_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2192: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_with_mode_not_a_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2199: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_with_existing_encoding_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2208: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_string_length_mismatch_raises[U]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2220: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_string_length_mismatch_raises[S]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2220: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_check_encoding_is_consistent_after_append" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2230: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_append_with_new_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2254: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_to_zarr_compute_false_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2271: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_to_zarr_append_compute_false_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2291: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_save_emptydim[False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2328: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_save_emptydim[True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2328: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_no_warning_from_open_emptydim_with_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2338: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[False-False-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[False-False-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[False-False-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[False-True-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[False-True-True]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[False-True-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[True-False-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[True-False-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[True-False-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[True-True-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[True-True-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region[True-True-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region_mode[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region_mode[r+]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region_mode[a]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_preexisting_override_metadata" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2400: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_region_errors" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2444: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_encoding_chunksizes" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2520: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_chunk_encoding_with_partial_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2536: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_chunk_encoding_with_larger_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2547: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_open_zarr_use_cftime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2556: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_write_read_select_write" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2566: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_attributes[obj0]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2580: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStore" name="test_attributes[obj1]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2580: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_zero_dimensional_variable" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_string_encoded_characters" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_vectorized_indexing" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_consolidated[False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_consolidated[True]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_consolidated[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_read_non_consolidated_warning" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1805: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_non_existent_store" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1820: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_with_chunkstore" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1824: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_auto_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1833: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_manual_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_warning_on_bad_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1895: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_deprecate_auto_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1917: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_uneven_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1936: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_chunk_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1945: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_chunk_encoding_with_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1961: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_hidden_zarr_keys" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2044: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_persistence_modes[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2068: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_persistence_modes[group1]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2068: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_compressor_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2119: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_group" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2131: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2139: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2145: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2149: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_with_mode_rplus_success" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2152: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_with_mode_rplus_fails" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2161: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2171: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_with_no_dims_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2182: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_with_append_dim_not_set_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2192: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_with_mode_not_a_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2199: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_with_existing_encoding_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2208: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_string_length_mismatch_raises[U]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2220: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_string_length_mismatch_raises[S]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2220: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_check_encoding_is_consistent_after_append" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2230: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_append_with_new_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2254: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_to_zarr_compute_false_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2271: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_to_zarr_append_compute_false_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2291: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_save_emptydim[False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2328: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_save_emptydim[True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2328: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_no_warning_from_open_emptydim_with_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2338: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[False-False-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[False-False-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[False-False-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[False-True-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[False-True-True]" time="0.003"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[False-True-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[True-False-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[True-False-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[True-False-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[True-True-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[True-True-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region[True-True-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region_mode[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region_mode[r+]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region_mode[a]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_preexisting_override_metadata" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2400: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_region_errors" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2444: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_encoding_chunksizes" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2520: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_chunk_encoding_with_partial_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2536: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_chunk_encoding_with_larger_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2547: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_open_zarr_use_cftime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2556: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_write_read_select_write" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2566: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_attributes[obj0]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2580: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_attributes[obj1]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2580: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrKVStoreV3" name="test_roundtrip_coordinates_with_space" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2628: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_string_data" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_orthogonal_indexing" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_encoding_kwarg" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_consolidated[False]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_consolidated[True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_consolidated[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_read_non_consolidated_warning" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1805: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_non_existent_store" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1820: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_with_chunkstore" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1824: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_auto_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1833: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_manual_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_warning_on_bad_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1895: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_deprecate_auto_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1917: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_uneven_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1936: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_chunk_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1945: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_chunk_encoding_with_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1961: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_hidden_zarr_keys" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2044: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_persistence_modes[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2068: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_persistence_modes[group1]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2068: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_compressor_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2119: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_group" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2131: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2139: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2145: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_write" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2149: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_with_mode_rplus_success" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2152: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_with_mode_rplus_fails" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2161: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2171: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_with_no_dims_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2182: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_with_append_dim_not_set_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2192: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_with_mode_not_a_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2199: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_with_existing_encoding_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2208: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_string_length_mismatch_raises[U]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2220: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_string_length_mismatch_raises[S]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2220: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_check_encoding_is_consistent_after_append" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2230: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_append_with_new_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2254: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_to_zarr_compute_false_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2271: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_to_zarr_append_compute_false_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2291: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_save_emptydim[False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2328: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_save_emptydim[True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2328: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_no_warning_from_open_emptydim_with_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2338: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[False-False-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[False-False-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[False-False-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[False-True-False]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[False-True-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[False-True-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[True-False-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[True-False-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[True-False-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[True-True-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[True-True-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region[True-True-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region_mode[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region_mode[r+]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region_mode[a]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_preexisting_override_metadata" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2400: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_region_errors" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2444: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_encoding_chunksizes" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2520: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_chunk_encoding_with_partial_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2536: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_chunk_encoding_with_larger_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2547: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_open_zarr_use_cftime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2556: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_write_read_select_write" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2566: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_attributes[obj0]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2580: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_attributes[obj1]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2580: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2628: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_multiindex_not_implemented" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_consolidated[False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_consolidated[True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_consolidated[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1792: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_read_non_consolidated_warning" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1805: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_non_existent_store" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1820: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_with_chunkstore" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1824: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_auto_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1833: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_manual_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_warning_on_bad_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1895: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_deprecate_auto_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1917: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_uneven_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1936: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_chunk_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1945: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_chunk_encoding_with_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1961: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_hidden_zarr_keys" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2044: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_persistence_modes[None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2068: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_persistence_modes[group1]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2068: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_compressor_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2119: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_group" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2131: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2139: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_dataset_caching" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2145: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2149: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_with_mode_rplus_success" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2152: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_with_mode_rplus_fails" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2161: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2171: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_with_no_dims_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2182: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_with_append_dim_not_set_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2192: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_with_mode_not_a_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2199: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_with_existing_encoding_raises" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2208: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_string_length_mismatch_raises[U]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2220: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_string_length_mismatch_raises[S]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2220: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_check_encoding_is_consistent_after_append" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2230: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_append_with_new_variable" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2254: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_to_zarr_compute_false_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2271: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_to_zarr_append_compute_false_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2291: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_save_emptydim[False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2328: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_save_emptydim[True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2328: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_no_warning_from_open_emptydim_with_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2338: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[False-False-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[False-False-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[False-False-None]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[False-True-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[False-True-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[False-True-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[True-False-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[True-False-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[True-False-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[True-True-False]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[True-True-True]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region[True-True-None]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2345: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region_mode[None]" time="0.001"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region_mode[r+]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region_mode[a]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2387: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_preexisting_override_metadata" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2400: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_region_errors" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2444: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_encoding_chunksizes" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2520: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_chunk_encoding_with_partial_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2536: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_chunk_encoding_with_larger_dask_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2547: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_open_zarr_use_cftime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2556: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_write_read_select_write" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2566: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_attributes[obj0]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2580: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_attributes[obj1]" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2580: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends.TestZarrDirectoryStoreV3FromPath" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2628: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_zarr_storage_options" time="0.000"><skipped type="pytest.skip" message="requires fsspec">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2664: requires fsspec</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_dtype_coercion_error" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:274: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:459: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_float64_data" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_array_type_after_indexing" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_coordinate_variables_after_dataset_roundtrip" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_to_netcdf_explicit_engine" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2684: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyInMemoryData" name="test_bytes_pickle" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2688: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_dtype_coercion_error" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:274: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:459: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_string_data" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_boolean_dtype" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_invalid_dataarray_names_raise" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_append_write" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2720: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFileObject" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2724: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_dtype_coercion_error" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:274: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:459: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_vectorized_indexing_negative_step" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_encoding_kwarg_fixed_width_string" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_multiindex_not_implemented" time="0.001"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_array_attrs" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2739: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_roundtrip_example_1_netcdf_gz" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2745: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_netcdf3_endianness" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2750: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestScipyFilePath" name="test_nc4_scipy" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2756: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_dtype_coercion_error" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:274: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_dataset_compute" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:459: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_timedelta_data" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_isel_dataarray" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_default_fill_value" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF3ViaNetCDF4Data" name="test_encoding_kwarg_vlen_string" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2779: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_dtype_coercion_error" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:274: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:459: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_None_variable" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_global_coordinates" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_bytes_with_fill_value" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNetCDF4ClassicViaNetCDF4Data" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_dtype_coercion_error" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:274: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_dataset_compute" time="0.001"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:459: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_isel_dataarray" time="0.001"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_default_fill_value" time="0.001"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_write_store" time="0.001"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2807: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_engine" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2811: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_cross_engine_read_write_netcdf3" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2828: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestGenericNetCDFData" name="test_encoding_unlimited_dims" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2851: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_pickle_dataarray" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:459: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_example_1_netcdf" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_refresh_from_disk" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1231: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_open_group" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1297: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_open_subgroup" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1322: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_write_groups" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1344: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_encoding_kwarg_vlen_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1355: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_string_with_fill_value_vlen" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1364: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_roundtrip_character_array" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1382: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_default_to_char_arrays" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1400: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_open_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1406: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_dump_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1433: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_dump_and_open_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1440: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_compression_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1459: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_encoding_kwarg_compression" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_keep_chunksizes_if_no_original_shape" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1502: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_encoding_chunksizes_unlimited" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1513: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_mask_and_scale" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1528: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_0dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1553: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_read_variable_len_strings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1565: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_complex[None-FutureWarning-1]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2885: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_complex[False-FutureWarning-1]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2885: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_complex[True-None-0]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2885: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_complex_error[None]" time="0.000"><skipped type="pytest.skip" message="requires h5netcdf">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2920: requires h5netcdf</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_complex_error[False]" time="0.000"><skipped type="pytest.skip" message="requires h5netcdf">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2920: requires h5netcdf</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_numpy_bool_" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2934: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_cross_engine_read_write_netcdf4" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2943: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_read_byte_attrs_as_unicode" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2957: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_encoding_unlimited_dims" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2965: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_compression_encoding_h5py" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2975: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_compression_check_encoding_h5py" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3018: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFData" name="test_dump_encodings_h5py" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3069: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFAlreadyOpen" name="test_open_dataset_group" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3087: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFAlreadyOpen" name="test_deepcopy" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3114: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:459: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_string_data" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_boolean_dtype" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_invalid_dataarray_names_raise" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_append_write" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_refresh_from_disk" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1231: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_open_group" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1297: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_open_subgroup" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1322: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_write_groups" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1344: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_encoding_kwarg_vlen_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1355: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_string_with_fill_value_vlen" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1364: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_roundtrip_character_array" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1382: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_default_to_char_arrays" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1400: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_open_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1406: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_dump_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1433: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_dump_and_open_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1440: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_compression_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1459: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_encoding_kwarg_compression" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_keep_chunksizes_if_no_original_shape" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1502: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_encoding_chunksizes_unlimited" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1513: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_mask_and_scale" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1528: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_0dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1553: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_read_variable_len_strings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1565: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_complex[None-FutureWarning-1]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2885: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_complex[False-FutureWarning-1]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2885: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_complex[True-None-0]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2885: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_complex_error[None]" time="0.000"><skipped type="pytest.skip" message="requires h5netcdf">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2920: requires h5netcdf</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_complex_error[False]" time="0.000"><skipped type="pytest.skip" message="requires h5netcdf">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2920: requires h5netcdf</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_numpy_bool_" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2934: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_cross_engine_read_write_netcdf4" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2943: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_read_byte_attrs_as_unicode" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2957: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_encoding_unlimited_dims" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2965: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_compression_encoding_h5py" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2975: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_compression_check_encoding_h5py" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3018: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_dump_encodings_h5py" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3069: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_open_badbytes" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3141: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_open_twice" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3159: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFFileObject" name="test_open_fileobj" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3169: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_load" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_isel_dataarray" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_refresh_from_disk" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1231: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_open_group" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1297: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_open_subgroup" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1322: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_write_groups" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1344: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_encoding_kwarg_vlen_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1355: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_string_with_fill_value_vlen" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1364: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_roundtrip_character_array" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1382: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_default_to_char_arrays" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1400: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_open_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1406: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_dump_encodings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1433: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_dump_and_open_encodings" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1440: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_compression_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1459: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_encoding_kwarg_compression" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_keep_chunksizes_if_no_original_shape" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1502: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_encoding_chunksizes_unlimited" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1513: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_mask_and_scale" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1528: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_0dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1553: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_read_variable_len_strings" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1565: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_complex[None-FutureWarning-1]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2885: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_complex[False-FutureWarning-1]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2885: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_complex[True-None-0]" time="0.127"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2885: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_complex_error[None]" time="0.000"><skipped type="pytest.skip" message="requires h5netcdf">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2920: requires h5netcdf</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_complex_error[False]" time="0.000"><skipped type="pytest.skip" message="requires h5netcdf">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2920: requires h5netcdf</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_numpy_bool_" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2934: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_cross_engine_read_write_netcdf4" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2943: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_read_byte_attrs_as_unicode" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2957: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_encoding_unlimited_dims" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2965: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_compression_encoding_h5py" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:2975: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_compression_check_encoding_h5py" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3018: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_dump_encodings_h5py" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3069: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3220: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestH5NetCDFViaDaskData" name="test_write_inconsistent_chunks" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3224: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-1-True-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-1-True-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-1-True-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-1-True-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-1-False-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-1-False-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-1-False-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-1-False-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-20-True-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-20-True-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-20-True-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-20-True-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-20-False-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-20-False-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-20-False-5-5]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[scipy-20-False-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-1-True-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-1-True-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-1-True-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-1-True-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-1-False-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-1-False-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-1-False-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-1-False-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-20-True-None-5]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-20-True-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-20-True-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-20-True-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-20-False-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-20-False-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-20-False-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[netcdf4-20-False-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-1-True-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-1-True-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-1-True-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-1-True-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-1-False-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-1-False-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-1-False-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-1-False-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-20-True-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-20-True-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-20-True-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-20-True-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-20-False-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-20-False-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-20-False-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[h5netcdf-20-False-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-1-True-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-1-True-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-1-True-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-1-True-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-1-False-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-1-False-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-1-False-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-1-False-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-20-True-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-20-True-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-20-True-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-20-True-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-20-False-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-20-False-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-20-False-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[pynio-20-False-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-1-True-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-1-True-None-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-1-True-5-5]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-1-True-5-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-1-False-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-1-False-None-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-1-False-5-5]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-1-False-5-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-20-True-None-5]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-20-True-None-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-20-True-5-5]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-20-True-5-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-20-False-None-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-20-False-None-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-20-False-5-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_manyfiles[zarr-20-False-5-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3282: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_can_open_path_objects" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3323: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_mfdataset_list_attr" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3331: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[outer-all-nested-t]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[outer-all-by_coords-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[outer-minimal-nested-t]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[outer-minimal-by_coords-None]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[outer-different-nested-t]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[outer-different-by_coords-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[inner-all-nested-t]" time="0.002"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[inner-all-by_coords-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[inner-minimal-nested-t]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[inner-minimal-by_coords-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[inner-different-nested-t]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[inner-different-by_coords-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[left-all-nested-t]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[left-all-by_coords-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[left-minimal-nested-t]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[left-minimal-by_coords-None]" time="0.002"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[left-different-nested-t]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[left-different-by_coords-None]" time="0.003"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[right-all-nested-t]" time="0.002"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[right-all-by_coords-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[right-minimal-nested-t]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[right-minimal-by_coords-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[right-different-nested-t]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_does_same_as_concat[right-different-by_coords-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3402: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_dataset_combine_attrs[drop]" time="0.002"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3419: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_dataset_combine_attrs[override]" time="0.002"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3419: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_dataset_combine_attrs[no_conflicts]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3419: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_dataset_combine_attrs[identical]" time="0.002"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3419: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_dataset_combine_attrs[drop_conflicts]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3419: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_dataset_attr_by_coords" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3473: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_dataarray_attr_by_coords" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3488: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_exact_join_raises_error[all-nested-t]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3503: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_exact_join_raises_error[all-by_coords-None]" time="0.002"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3503: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_exact_join_raises_error[minimal-nested-t]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3503: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_exact_join_raises_error[minimal-by_coords-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3503: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_exact_join_raises_error[different-nested-t]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3503: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_open_mfdataset_exact_join_raises_error[different-by_coords-None]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3503: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_common_coord_when_datavars_all" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3524: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_common_coord_when_datavars_minimal" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3543: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestOpenMFDatasetWithDataVarsAndCoordsKw" name="test_invalid_data_vars_value_should_fail" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3562: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_load" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_None_variable" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_timedelta_data" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_coordinates" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_orthogonal_indexing" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3590: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3593: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3596: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3604: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3623: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3627: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3634: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset_no_files" time="0.000"><skipped type="pytest.skip" message="requires fsspec">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3656: requires fsspec</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset_2d" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3664: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset_pathlib" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3693: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset_2d_pathlib" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3706: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset_2" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3727: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_attrs_mfdataset" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3739: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset_attrs_file" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3759: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset_attrs_file_path" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3776: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset_auto_combine" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3795: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset_raise_on_bad_combine_args" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3805: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_encoding_mfdataset" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3815: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_preprocess_mfdataset" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3838: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_save_mfdataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3852: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_save_mfdataset_invalid" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3863: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_save_mfdataset_invalid_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3870: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_save_mfdataset_pathlib_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3876: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_save_mfdataset_pass_kwargs" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3889: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_and_do_math" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3912: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset_concat_dim_none" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3920: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_mfdataset_concat_dim_default_none" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3931: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_dataset" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3940: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_single_dataset" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3954: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_open_multi_dataset" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3968: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_dask_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:3993: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_deterministic_names" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4005: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_dataarray_compute" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4018: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_save_mfdataset_compute_false_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4028: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_load_dataset" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4046: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_load_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4054: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDask" name="test_inline_array" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4063: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPydap" name="test_cmp_local_file" time="0.000"><skipped type="pytest.skip" message="requires pydap.client">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4116: requires pydap.client</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPydap" name="test_compatible_to_netcdf" time="0.000"><skipped type="pytest.skip" message="requires pydap.client">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4149: requires pydap.client</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPydap" name="test_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4158: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPydapOnline" name="test_cmp_local_file" time="0.000"><skipped type="pytest.skip" message="requires pydap.client">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4116: requires pydap.client</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPydapOnline" name="test_compatible_to_netcdf" time="0.000"><skipped type="pytest.skip" message="requires pydap.client">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4149: requires pydap.client</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPydapOnline" name="test_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4158: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPydapOnline" name="test_session" time="0.000"><skipped type="pytest.skip" message="requires pydap.client">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4177: requires pydap.client</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_dtype_coercion_error" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:274: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:459: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:591: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_vectorized_indexing_negative_step" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1078: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1091: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1124: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.001"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_explicitly_omit_fill_value_in_coord" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4195: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_kwargs" time="0.000"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4204: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPyNio" name="test_weakrefs" time="0.001"><skipped type="pytest.skip" message="requires Nio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4213: requires Nio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestCfGrib" name="test_read" time="0.000"><skipped type="pytest.skip" message="requires cfgrib">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4227: requires cfgrib</skipped></testcase><testcase classname="xarray.tests.test_backends.TestCfGrib" name="test_read_filter_by_keys" time="0.000"><skipped type="pytest.skip" message="requires cfgrib">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4240: requires cfgrib</skipped></testcase><testcase classname="xarray.tests.test_backends.TestCfGrib" name="test_read_outer" time="0.000"><skipped type="pytest.skip" message="requires cfgrib">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4256: requires cfgrib</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPseudoNetCDFFormat" name="test_ict_format" time="0.000"><skipped type="pytest.skip" message="requires PseudoNetCDF">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4289: requires PseudoNetCDF</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPseudoNetCDFFormat" name="test_ict_format_write" time="0.000"><skipped type="pytest.skip" message="requires PseudoNetCDF">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4377: requires PseudoNetCDF</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPseudoNetCDFFormat" name="test_uamiv_format_read" time="0.000"><skipped type="pytest.skip" message="requires PseudoNetCDF">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4387: requires PseudoNetCDF</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPseudoNetCDFFormat" name="test_uamiv_format_mfread" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4418: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestPseudoNetCDFFormat" name="test_uamiv_format_write" time="0.000"><skipped type="pytest.skip" message="requires PseudoNetCDF">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4454: requires PseudoNetCDF</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_serialization" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4568: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_utm" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4578: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_non_rectilinear" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4602: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_platecarree" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4629: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_notransform" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4652: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_indexing" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4697: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_caching" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4814: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_chunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4829: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_pickle_rasterio" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4853: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_ENVI_tags" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4864: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_geotiff_tags" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4923: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_no_mftime" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4929: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_http_url" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4949: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_rasterio_environment" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4964: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_rasterio_vrt" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:4976: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_rasterio_vrt_with_transform_and_size" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5001: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestRasterio" name="test_rasterio_vrt_with_src_crs" time="0.000"><skipped type="pytest.skip" message="requires rasterio">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5035: requires rasterio</skipped></testcase><testcase classname="xarray.tests.test_backends.TestEncodingInvalid" name="test_extract_nc4_variable_encoding" time="0.003" /><testcase classname="xarray.tests.test_backends.TestEncodingInvalid" name="test_extract_nc4_variable_encoding_netcdf4" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5071: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestEncodingInvalid" name="test_extract_h5nc_encoding" time="0.002" /><testcase classname="xarray.tests.test_backends.TestValidateAttrs" name="test_validating_attrs" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5090: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDataArrayToNetCDF" name="test_dataarray_to_netcdf_no_name" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5181: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDataArrayToNetCDF" name="test_dataarray_to_netcdf_with_name" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5190: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDataArrayToNetCDF" name="test_dataarray_to_netcdf_coord_name_clash" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5199: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDataArrayToNetCDF" name="test_open_dataarray_options" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5210: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDataArrayToNetCDF" name="test_dataarray_to_netcdf_return_bytes" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5220: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends.TestDataArrayToNetCDF" name="test_dataarray_to_netcdf_no_name_pathlib" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5227: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_no_warning_from_dask_effective_get" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5238: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_source_encoding_always_present" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5246: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_source_encoding_always_present_with_pathlib" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5257: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_standard_calendar_default_in_range[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5274: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_standard_calendar_default_in_range[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5274: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_standard_calendar_default_in_range[standard]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5274: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_standard_calendar_default_out_of_range[1500-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5302: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_standard_calendar_default_out_of_range[1500-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5302: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_standard_calendar_default_out_of_range[1500-standard]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5302: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_standard_calendar_default_out_of_range[2500-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5302: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_standard_calendar_default_out_of_range[2500-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5302: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_standard_calendar_default_out_of_range[2500-standard]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5302: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[1500-360_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[1500-365_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[1500-366_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[1500-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[1500-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[1500-julian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[1500-noleap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[1500-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[1500-standard]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2000-360_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2000-365_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2000-366_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2000-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2000-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2000-julian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2000-noleap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2000-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2000-standard]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2500-360_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2500-365_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2500-366_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2500-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2500-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2500-julian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2500-noleap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2500-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_true[2500-standard]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5334: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_standard_calendar_in_range[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5365: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_standard_calendar_in_range[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5365: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_standard_calendar_in_range[standard]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5365: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_standard_calendar_out_of_range[1500-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5393: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_standard_calendar_out_of_range[1500-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5393: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_standard_calendar_out_of_range[1500-standard]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5393: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_standard_calendar_out_of_range[2500-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5393: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_standard_calendar_out_of_range[2500-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5393: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_standard_calendar_out_of_range[2500-standard]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5393: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[1500-360_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[1500-365_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[1500-366_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[1500-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[1500-julian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[1500-noleap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2000-360_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2000-365_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2000-366_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2000-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2000-julian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2000-noleap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2500-360_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2500-365_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2500-366_day]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2500-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2500-julian]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_use_cftime_false_nonstandard_calendar[2500-noleap]" time="0.000"><skipped type="pytest.skip" message="requires scipy or netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5411: requires scipy or netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_invalid_netcdf_raises[netcdf4]" time="0.008" /><testcase classname="xarray.tests.test_backends" name="test_invalid_netcdf_raises[scipy]" time="0.007" /><testcase classname="xarray.tests.test_backends" name="test_encode_zarr_attr_value" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5436: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_extract_zarr_variable_encoding" time="0.000"><skipped type="pytest.skip" message="requires zarr">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5459: requires zarr</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_fsspec" time="0.000"><skipped type="pytest.skip" message="requires fsspec">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5483: requires fsspec</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_load_single_value_h5netcdf" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5526: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_dataset_chunking_zarr[auto]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5548: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_dataset_chunking_zarr[-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5548: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_dataset_chunking_zarr[chunks2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5548: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_dataset_chunking_zarr[chunks3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5548: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_dataset_chunking_zarr[chunks4]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5548: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_open_dataset_chunking_zarr[chunks5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5548: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_chunking_consintency[auto]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5577: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_chunking_consintency[-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5577: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_chunking_consintency[chunks2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5577: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_chunking_consintency[chunks3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5577: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_chunking_consintency[chunks4]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5577: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_chunking_consintency[chunks5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5577: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_netcdf4_entrypoint" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5617: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_scipy_entrypoint" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5644: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_h5netcdf_entrypoint" time="0.001"><skipped type="pytest.skip" message="requires h5netcdf">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5674: requires h5netcdf</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_write_file_from_np_str[str]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5694: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_write_file_from_np_str[str_]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5694: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNCZarr" name="test_open_nczarr" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5738: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNCZarr" name="test_overwriting_nczarr" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5744: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNCZarr" name="test_raise_writing_to_nczarr[a]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5752: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends.TestNCZarr" name="test_raise_writing_to_nczarr[r+]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5752: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_backends" name="test_pickle_open_mfdataset_dataset" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:5763: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api" name="test__get_default_engine" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:20: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_backends_api" name="test_custom_engine" time="0.004" /><testcase classname="xarray.tests.test_backends_api" name="test_multiindex" time="0.006" /><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_honor_chunks[False-shape0-pref_chunks0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:115: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_honor_chunks[False-shape1-pref_chunks1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:115: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_honor_chunks[False-shape2-pref_chunks2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:115: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_honor_chunks[False-shape3-pref_chunks3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:115: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_honor_chunks[True-shape0-pref_chunks0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:115: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_honor_chunks[True-shape1-pref_chunks1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:115: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_honor_chunks[True-shape2-pref_chunks2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:115: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_honor_chunks[True-shape3-pref_chunks3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:115: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_split_chunks[shape0-pref_chunks0-req_chunks0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:144: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_split_chunks[shape1-pref_chunks1-req_chunks1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:144: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_split_chunks[shape2-pref_chunks2-req_chunks2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:144: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_split_chunks[shape3-pref_chunks3-req_chunks3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:144: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_split_chunks[shape4-pref_chunks4-req_chunks4]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:144: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_join_chunks[shape0-pref_chunks0-req_chunks0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:170: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_join_chunks[shape1-pref_chunks1-req_chunks1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:170: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_join_chunks[shape2-pref_chunks2-req_chunks2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:170: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_join_chunks[shape3-pref_chunks3-req_chunks3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:170: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_join_chunks[shape4-pref_chunks4-req_chunks4]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:170: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_join_chunks[shape5-pref_chunks5-req_chunks5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:170: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_join_chunks[shape6-pref_chunks6-req_chunks6]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:170: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_api.TestPreferredChunks" name="test_join_chunks[shape7-pref_chunks7-req_chunks7]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_backends_api.py:170: requires dask</skipped></testcase><testcase classname="xarray.tests.test_backends_common" name="test_robust_getitem" time="0.007" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_mock_write[1]" time="0.008" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_mock_write[2]" time="0.005" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_mock_write[3]" time="0.004" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_mock_write[None]" time="0.004" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_autoclose[True]" time="0.136" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_autoclose[False]" time="0.131" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_autoclose_while_locked" time="0.129" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_repr" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_cache_and_refcounts" time="0.129" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_cache_repeated_open" time="0.260" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_cache_with_pickle" time="0.253" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_consecutive[1]" time="0.003" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_consecutive[2]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_consecutive[3]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_consecutive[None]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_concurrent[1]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_concurrent[2]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_concurrent[3]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_concurrent[None]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_pickle[1]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_pickle[2]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_pickle[3]" time="0.003" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_write_pickle[None]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_read[1]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_read[2]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_read[3]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_read[None]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_acquire_context[1]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_acquire_context[2]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_acquire_context[3]" time="0.002" /><testcase classname="xarray.tests.test_backends_file_manager" name="test_file_manager_acquire_context[None]" time="0.002" /><testcase classname="xarray.tests.test_backends_locks" name="test_threaded_lock" time="0.002" /><testcase classname="xarray.tests.test_backends_lru_cache" name="test_simple" time="0.002" /><testcase classname="xarray.tests.test_backends_lru_cache" name="test_trivial" time="0.002" /><testcase classname="xarray.tests.test_backends_lru_cache" name="test_invalid" time="0.002" /><testcase classname="xarray.tests.test_backends_lru_cache" name="test_update_priority" time="0.002" /><testcase classname="xarray.tests.test_backends_lru_cache" name="test_del" time="0.002" /><testcase classname="xarray.tests.test_backends_lru_cache" name="test_on_evict" time="0.003" /><testcase classname="xarray.tests.test_backends_lru_cache" name="test_on_evict_trivial" time="0.002" /><testcase classname="xarray.tests.test_backends_lru_cache" name="test_resize" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[year]" time="0.003" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[month]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[month-dash]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[day]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[day-dash]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[hour]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[hour-dash]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[hour-space-separator]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[minute]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[minute-dash]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[minute-space-separator]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[second]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[second-dash]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_like[second-space-separator]" time="0.002" /><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[365_day-bar-bar]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[365_day-None-foo]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[360_day-bar-bar]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[360_day-None-foo]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[julian-bar-bar]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[julian-None-foo]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[all_leap-bar-bar]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[all_leap-None-foo]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[366_day-bar-bar]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[366_day-None-foo]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[gregorian-bar-bar]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[gregorian-None-foo]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[proleptic_gregorian-bar-bar]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_constructor_with_name[proleptic_gregorian-None-foo]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:201: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_assert_all_valid_date_type[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:208: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_assert_all_valid_date_type[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:208: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_assert_all_valid_date_type[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:208: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_assert_all_valid_date_type[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:208: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_assert_all_valid_date_type[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:208: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_assert_all_valid_date_type[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:208: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_assert_all_valid_date_type[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:208: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[365_day-year-expected0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[365_day-month-expected1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[365_day-day-expected2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[365_day-hour-expected3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[365_day-minute-expected4]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[365_day-second-expected5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[365_day-microsecond-expected6]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[360_day-year-expected0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[360_day-month-expected1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[360_day-day-expected2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[360_day-hour-expected3]" time="0.001"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[360_day-minute-expected4]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[360_day-second-expected5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[360_day-microsecond-expected6]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[julian-year-expected0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[julian-month-expected1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[julian-day-expected2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[julian-hour-expected3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[julian-minute-expected4]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[julian-second-expected5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[julian-microsecond-expected6]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[all_leap-year-expected0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[all_leap-month-expected1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[all_leap-day-expected2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[all_leap-hour-expected3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[all_leap-minute-expected4]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[all_leap-second-expected5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[all_leap-microsecond-expected6]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[366_day-year-expected0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[366_day-month-expected1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[366_day-day-expected2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[366_day-hour-expected3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[366_day-minute-expected4]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[366_day-second-expected5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[366_day-microsecond-expected6]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[gregorian-year-expected0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[gregorian-month-expected1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[gregorian-day-expected2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[gregorian-hour-expected3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[gregorian-minute-expected4]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[gregorian-second-expected5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[gregorian-microsecond-expected6]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[proleptic_gregorian-year-expected0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[proleptic_gregorian-month-expected1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[proleptic_gregorian-day-expected2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[proleptic_gregorian-hour-expected3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[proleptic_gregorian-minute-expected4]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[proleptic_gregorian-second-expected5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_field_accessors[proleptic_gregorian-microsecond-expected6]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofyear_accessor[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:247: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofyear_accessor[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:247: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofyear_accessor[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:247: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofyear_accessor[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:247: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofyear_accessor[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:247: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofyear_accessor[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:247: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofyear_accessor[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:247: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofweek_accessor[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:254: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofweek_accessor[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:254: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofweek_accessor[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:254: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofweek_accessor[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:254: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofweek_accessor[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:254: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofweek_accessor[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:254: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_dayofweek_accessor[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:254: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_days_in_month_accessor[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:261: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_days_in_month_accessor[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:261: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_days_in_month_accessor[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:261: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_days_in_month_accessor[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:261: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_days_in_month_accessor[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:261: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_days_in_month_accessor[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:261: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_days_in_month_accessor[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:261: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[365_day-1999-date_args0-year]" time="0.001"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[365_day-199902-date_args1-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[365_day-19990202-date_args2-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[365_day-19990202T01-date_args3-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[365_day-19990202T0101-date_args4-minute]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[365_day-19990202T010156-date_args5-second]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[360_day-1999-date_args0-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[360_day-199902-date_args1-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[360_day-19990202-date_args2-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[360_day-19990202T01-date_args3-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[360_day-19990202T0101-date_args4-minute]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[360_day-19990202T010156-date_args5-second]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[julian-1999-date_args0-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[julian-199902-date_args1-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[julian-19990202-date_args2-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[julian-19990202T01-date_args3-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[julian-19990202T0101-date_args4-minute]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[julian-19990202T010156-date_args5-second]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[all_leap-1999-date_args0-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[all_leap-199902-date_args1-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[all_leap-19990202-date_args2-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[all_leap-19990202T01-date_args3-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[all_leap-19990202T0101-date_args4-minute]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[all_leap-19990202T010156-date_args5-second]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[366_day-1999-date_args0-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[366_day-199902-date_args1-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[366_day-19990202-date_args2-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[366_day-19990202T01-date_args3-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[366_day-19990202T0101-date_args4-minute]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[366_day-19990202T010156-date_args5-second]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[gregorian-1999-date_args0-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[gregorian-199902-date_args1-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[gregorian-19990202-date_args2-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[gregorian-19990202T01-date_args3-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[gregorian-19990202T0101-date_args4-minute]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[gregorian-19990202T010156-date_args5-second]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[proleptic_gregorian-1999-date_args0-year]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[proleptic_gregorian-199902-date_args1-month]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[proleptic_gregorian-19990202-date_args2-day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[proleptic_gregorian-19990202T01-date_args3-hour]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[proleptic_gregorian-19990202T0101-date_args4-minute]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_iso8601_with_reso[proleptic_gregorian-19990202T010156-date_args5-second]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:268: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_year[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:288: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_year[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:288: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_year[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:288: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_year[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:288: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_year[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:288: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_year[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:288: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_year[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:288: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_feb[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:298: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_feb[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:298: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_feb[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:298: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_feb[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:298: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_feb[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:298: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_feb[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:298: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_feb[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:298: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_dec[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:308: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_dec[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:308: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_dec[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:308: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_dec[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:308: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_dec[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:308: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_dec[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:308: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_string_to_bounds_month_dec[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:308: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[365_day-day-ex_start_args0-ex_end_args0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[365_day-hour-ex_start_args1-ex_end_args1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[365_day-minute-ex_start_args2-ex_end_args2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[365_day-second-ex_start_args3-ex_end_args3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[360_day-day-ex_start_args0-ex_end_args0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[360_day-hour-ex_start_args1-ex_end_args1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[360_day-minute-ex_start_args2-ex_end_args2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[360_day-second-ex_start_args3-ex_end_args3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[julian-day-ex_start_args0-ex_end_args0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[julian-hour-ex_start_args1-ex_end_args1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[julian-minute-ex_start_args2-ex_end_args2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[julian-second-ex_start_args3-ex_end_args3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[all_leap-day-ex_start_args0-ex_end_args0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[all_leap-hour-ex_start_args1-ex_end_args1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[all_leap-minute-ex_start_args2-ex_end_args2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[all_leap-second-ex_start_args3-ex_end_args3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[366_day-day-ex_start_args0-ex_end_args0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[366_day-hour-ex_start_args1-ex_end_args1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[366_day-minute-ex_start_args2-ex_end_args2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[366_day-second-ex_start_args3-ex_end_args3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[gregorian-day-ex_start_args0-ex_end_args0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[gregorian-hour-ex_start_args1-ex_end_args1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[gregorian-minute-ex_start_args2-ex_end_args2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[gregorian-second-ex_start_args3-ex_end_args3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-day-ex_start_args0-ex_end_args0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-hour-ex_start_args1-ex_end_args1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-minute-ex_start_args2-ex_end_args2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-second-ex_start_args3-ex_end_args3]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:318: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_raises[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:340: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_raises[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:340: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_raises[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:340: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_raises[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:340: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_raises[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:340: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_raises[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:340: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parsed_string_to_bounds_raises[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:340: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_loc[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:346: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_loc[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:346: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_loc[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:346: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_loc[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:346: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_loc[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:346: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_loc[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:346: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_loc[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:346: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:361: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:361: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:361: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:361: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:361: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:361: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:361: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_decreasing_index[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_decreasing_index[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_decreasing_index[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_decreasing_index[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_decreasing_index[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_decreasing_index[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_decreasing_index[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_length_one_index[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_length_one_index[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_length_one_index[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_length_one_index[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_length_one_index[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_length_one_index[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_get_slice_bound_length_one_index[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:419: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_string_slice_length_one_index[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:446: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_string_slice_length_one_index[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:446: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_string_slice_length_one_index[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:446: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_string_slice_length_one_index[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:446: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_string_slice_length_one_index[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:446: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_string_slice_length_one_index[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:446: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_string_slice_length_one_index[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:446: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_date_type_property[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:453: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_date_type_property[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:453: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_date_type_property[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:453: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_date_type_property[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:453: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_date_type_property[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:453: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_date_type_property[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:453: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_date_type_property[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:453: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_contains[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:458: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_contains[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:458: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_contains[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:458: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_contains[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:458: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_contains[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:458: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_contains[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:458: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_contains[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:458: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_groupby[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:467: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_groupby[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:467: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_groupby[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:467: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_groupby[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:467: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_groupby[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:467: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_groupby[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:467: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_groupby[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:467: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[365_day-string]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[365_day-string-slice]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[365_day-bool-list]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[360_day-string]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[360_day-string-slice]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[360_day-bool-list]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[julian-string]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[julian-string-slice]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[julian-bool-list]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[all_leap-string]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[all_leap-string-slice]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[all_leap-bool-list]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[366_day-string]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[366_day-string-slice]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[366_day-bool-list]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[gregorian-string]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[gregorian-string-slice]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[gregorian-bool-list]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[proleptic_gregorian-string]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[proleptic_gregorian-string-slice]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_string_or_list[proleptic_gregorian-bool-list]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:481: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_slice_or_list[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:493: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_slice_or_list[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:493: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_slice_or_list[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:493: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_slice_or_list[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:493: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_slice_or_list[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:493: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_slice_or_list[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:493: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_slice_or_list[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:493: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:503: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:503: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:503: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:503: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:503: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:503: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:503: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_distant_date[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:510: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_distant_date[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:510: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_distant_date[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:510: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_distant_date[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:510: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_distant_date[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:510: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_distant_date[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:510: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_distant_date[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:510: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[365_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[365_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[365_day-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[360_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[360_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[360_day-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[julian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[julian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[julian-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[all_leap-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[all_leap-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[all_leap-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[366_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[366_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[366_day-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[gregorian-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[proleptic_gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[proleptic_gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_nearest[proleptic_gregorian-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:517: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[365_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[365_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[360_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[360_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[julian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[julian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[all_leap-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[all_leap-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[366_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[366_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[proleptic_gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_pad[proleptic_gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:536: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[365_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[365_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[360_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[360_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[julian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[julian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[all_leap-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[all_leap-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[366_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[366_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[proleptic_gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_backfill[proleptic_gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:551: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[365_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[365_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[365_day-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[360_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[360_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[360_day-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[julian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[julian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[julian-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[all_leap-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[all_leap-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[all_leap-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[366_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[366_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[366_day-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[gregorian-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[proleptic_gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[proleptic_gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_scalar_tolerance_raises[proleptic_gregorian-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:566: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[365_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[365_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[360_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[360_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[julian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[julian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[all_leap-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[all_leap-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[366_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[366_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[proleptic_gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_nearest[proleptic_gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[365_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[365_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[360_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[360_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[julian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[julian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[all_leap-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[all_leap-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[366_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[366_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[proleptic_gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_pad[proleptic_gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:599: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[365_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[365_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[360_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[360_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[julian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[julian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[all_leap-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[all_leap-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[366_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[366_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[proleptic_gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_backfill[proleptic_gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:610: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[365_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[365_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[365_day-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[360_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[360_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[360_day-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[julian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[julian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[julian-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[all_leap-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[all_leap-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[all_leap-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[366_day-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[366_day-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[366_day-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[gregorian-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[proleptic_gregorian-sel_kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[proleptic_gregorian-sel_kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_sel_date_list_tolerance_raises[proleptic_gregorian-sel_kwargs2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:621: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_isel[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:635: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_isel[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:635: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_isel[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:635: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_isel[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:635: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_isel[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:635: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_isel[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:635: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_isel[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:635: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_getitem[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:662: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_getitem[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:662: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_getitem[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:662: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_getitem[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:662: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_getitem[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:662: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_getitem[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:662: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_getitem[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:662: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_loc[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:672: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_loc[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:672: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_loc[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:672: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_loc[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:672: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_loc[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:672: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_loc[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:672: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_loc[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:672: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_iloc[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:682: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_iloc[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:682: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_iloc[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:682: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_iloc[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:682: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_iloc[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:682: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_iloc[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:682: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_series_iloc[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:682: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_series_dropna[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:691: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_series_dropna[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:691: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_series_dropna[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:691: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_series_dropna[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:691: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_series_dropna[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:691: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_series_dropna[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:691: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_series_dropna[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:691: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_loc[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:699: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_loc[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:699: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_loc[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:699: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_loc[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:699: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_loc[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:699: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_loc[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:699: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_loc[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:699: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_iloc[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:712: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_iloc[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:712: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_iloc[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:712: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_iloc[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:712: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_iloc[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:712: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_iloc[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:712: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_indexing_in_dataframe_iloc[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:712: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_concat_cftimeindex[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:724: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_concat_cftimeindex[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:724: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_concat_cftimeindex[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:724: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_concat_cftimeindex[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:724: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_concat_cftimeindex[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:724: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_concat_cftimeindex[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:724: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_concat_cftimeindex[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:724: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_empty_cftimeindex" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:737: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:743: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:743: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:743: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:743: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:743: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:743: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:743: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add_timedeltaindex[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:758: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add_timedeltaindex[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:758: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add_timedeltaindex[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:758: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add_timedeltaindex[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:758: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add_timedeltaindex[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:758: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add_timedeltaindex[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:758: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_add_timedeltaindex[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:758: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[365_day-D-D-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[365_day-D-D-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[365_day-H-H-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[365_day-H-H-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[365_day-T-min-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[365_day-T-min-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[365_day-S-S-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[365_day-S-S-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[365_day-L-ms-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[365_day-L-ms-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[360_day-D-D-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[360_day-D-D-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[360_day-H-H-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[360_day-H-H-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[360_day-T-min-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[360_day-T-min-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[360_day-S-S-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[360_day-S-S-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[360_day-L-ms-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[360_day-L-ms-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[julian-D-D-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[julian-D-D-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[julian-H-H-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[julian-H-H-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[julian-T-min-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[julian-T-min-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[julian-S-S-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[julian-S-S-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[julian-L-ms-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[julian-L-ms-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[all_leap-D-D-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[all_leap-D-D-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[all_leap-H-H-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[all_leap-H-H-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[all_leap-T-min-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[all_leap-T-min-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[all_leap-S-S-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[all_leap-S-S-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[all_leap-L-ms-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[all_leap-L-ms-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[366_day-D-D-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[366_day-D-D-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[366_day-H-H-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[366_day-H-H-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[366_day-T-min-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[366_day-T-min-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[366_day-S-S-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[366_day-S-S-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[366_day-L-ms-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[366_day-L-ms-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[gregorian-D-D-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[gregorian-D-D-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[gregorian-H-H-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[gregorian-H-H-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[gregorian-T-min-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[gregorian-T-min-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[gregorian-S-S-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[gregorian-S-S-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[gregorian-L-ms-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[gregorian-L-ms-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[proleptic_gregorian-D-D-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[proleptic_gregorian-D-D-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[proleptic_gregorian-H-H-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[proleptic_gregorian-H-H-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[proleptic_gregorian-T-min-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[proleptic_gregorian-T-min-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[proleptic_gregorian-S-S-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[proleptic_gregorian-S-S-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[proleptic_gregorian-L-ms-2.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float[proleptic_gregorian-L-ms-1.5]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:769: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float_us" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:790: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float_fails_for_non_tick_freqs[AS]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:799: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float_fails_for_non_tick_freqs[A]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:799: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float_fails_for_non_tick_freqs[YS]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:799: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float_fails_for_non_tick_freqs[Y]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:799: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float_fails_for_non_tick_freqs[QS]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:799: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float_fails_for_non_tick_freqs[Q]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:799: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float_fails_for_non_tick_freqs[MS]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:799: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_float_fails_for_non_tick_freqs[M]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:799: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_radd[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:807: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_radd[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:807: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_radd[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:807: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_radd[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:807: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_radd[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:807: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_radd[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:807: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_radd[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:807: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_timedeltaindex_add_cftimeindex[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:822: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_timedeltaindex_add_cftimeindex[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:822: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_timedeltaindex_add_cftimeindex[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:822: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_timedeltaindex_add_cftimeindex[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:822: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_timedeltaindex_add_cftimeindex[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:822: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_timedeltaindex_add_cftimeindex[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:822: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_timedeltaindex_add_cftimeindex[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:822: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:833: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:833: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:833: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:833: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:833: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:833: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:833: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[365_day-1d-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[365_day-scalar-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[360_day-1d-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[360_day-scalar-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[julian-1d-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[julian-scalar-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[all_leap-1d-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[all_leap-scalar-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[366_day-1d-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[366_day-scalar-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[gregorian-1d-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[gregorian-scalar-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[proleptic_gregorian-1d-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedelta_array[proleptic_gregorian-scalar-array]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:849: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftimeindex[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:870: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftimeindex[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:870: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftimeindex[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:870: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftimeindex[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:870: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftimeindex[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:870: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftimeindex[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:870: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftimeindex[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:870: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftime_datetime[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:881: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftime_datetime[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:881: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftime_datetime[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:881: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftime_datetime[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:881: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftime_datetime[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:881: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftime_datetime[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:881: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_cftime_datetime[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:881: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftime_datetime_sub_cftimeindex[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:891: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftime_datetime_sub_cftimeindex[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:891: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftime_datetime_sub_cftimeindex[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:891: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftime_datetime_sub_cftimeindex[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:891: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftime_datetime_sub_cftimeindex[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:891: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftime_datetime_sub_cftimeindex[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:891: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftime_datetime_sub_cftimeindex[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:891: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_distant_cftime_datetime_sub_cftimeindex[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:901: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_distant_cftime_datetime_sub_cftimeindex[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:901: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_distant_cftime_datetime_sub_cftimeindex[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:901: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_distant_cftime_datetime_sub_cftimeindex[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:901: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_distant_cftime_datetime_sub_cftimeindex[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:901: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_distant_cftime_datetime_sub_cftimeindex[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:901: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_distant_cftime_datetime_sub_cftimeindex[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:901: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedeltaindex[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:909: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedeltaindex[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:909: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedeltaindex[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:909: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedeltaindex[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:909: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedeltaindex[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:909: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedeltaindex[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:909: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_timedeltaindex[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:909: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_index_of_cftime_datetimes[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:920: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_index_of_cftime_datetimes[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:920: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_index_of_cftime_datetimes[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:920: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_index_of_cftime_datetimes[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:920: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_index_of_cftime_datetimes[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:920: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_index_of_cftime_datetimes[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:920: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_index_of_cftime_datetimes[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:920: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_not_implemented[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:931: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_not_implemented[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:931: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_not_implemented[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:931: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_not_implemented[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:931: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_not_implemented[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:931: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_not_implemented[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:931: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_sub_not_implemented[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:931: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_rsub[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:939: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_rsub[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:939: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_rsub[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:939: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_rsub[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:939: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_rsub[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:939: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_rsub[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:939: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_rsub[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:939: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[365_day-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[365_day-freq1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[360_day-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[360_day-freq1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[julian-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[julian-freq1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[all_leap-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[all_leap-freq1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[366_day-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[366_day-freq1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[gregorian-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[gregorian-freq1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[proleptic_gregorian-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift[proleptic_gregorian-freq1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:945: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_invalid_n" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:961: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_shift_invalid_freq" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:968: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_property[noleap-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:975: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_property[365_day-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:975: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_property[360_day-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:975: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_property[julian-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:975: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_property[gregorian-]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:975: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_property[standard-]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:975: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_property[proleptic_gregorian-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:975: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_repr[noleap-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:993: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_repr[365_day-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:993: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_repr[360_day-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:993: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_repr[julian-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:993: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_repr[gregorian-]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:993: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_repr[standard-]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:993: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_calendar_repr[proleptic_gregorian-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:993: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_periods_repr[2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1014: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_periods_repr[40]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1014: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_freq_in_repr[D-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1023: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_freq_in_repr[D-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1023: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_freq_in_repr[D-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1023: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_freq_in_repr[H-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1023: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_freq_in_repr[H-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1023: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_freq_in_repr[H-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1023: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting[2-CFTimeIndex([2000-01-01 00:00:00, 2000-01-02 00:00:00],\n            dtype='object', length=2, calendar='', freq=None)]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1033: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting[4-CFTimeIndex([2000-01-01 00:00:00, 2000-01-02 00:00:00, 2000-01-03 00:00:00,\n             2000-01-04 00:00:00],\n            dtype='object', length=4, calendar='', freq='D')]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1033: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting[101-CFTimeIndex([2000-01-01 00:00:00, 2000-01-02 00:00:00, 2000-01-03 00:00:00,\n             2000-01-04 00:00:00, 2000-01-05 00:00:00, 2000-01-06 00:00:00,\n             2000-01-07 00:00:00, 2000-01-08 00:00:00, 2000-01-09 00:00:00,\n             2000-01-10 00:00:00,\n             ...\n             2000-04-01 00:00:00, 2000-04-02 00:00:00, 2000-04-03 00:00:00,\n             2000-04-04 00:00:00, 2000-04-05 00:00:00, 2000-04-06 00:00:00,\n             2000-04-07 00:00:00, 2000-04-08 00:00:00, 2000-04-09 00:00:00,\n             2000-04-10 00:00:00],\n            dtype='object', length=101, calendar='', freq='D')]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1033: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[2-40]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[2-80]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[2-100]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[3-40]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[3-80]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[3-100]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[4-40]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[4-80]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[4-100]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[100-40]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[100-80]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[100-100]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[101-40]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[101-80]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_formatting_width[101-100]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_101_shorter[22]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1091: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_101_shorter[50]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1091: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_cftimeindex_repr_101_shorter[100]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1091: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_parse_array_of_cftime_strings" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1101: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_strftime_of_cftime_array[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1123: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_strftime_of_cftime_array[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1123: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_strftime_of_cftime_array[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1123: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_strftime_of_cftime_array[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1123: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_strftime_of_cftime_array[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1123: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_strftime_of_cftime_array[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1123: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_strftime_of_cftime_array[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1123: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_strftime_of_cftime_array[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1123: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_strftime_of_cftime_array[standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1123: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[False-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[False-365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[False-366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[False-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[False-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[False-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[False-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[False-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[False-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[True-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[True-365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[True-366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[True-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[True-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[True-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[True-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[True-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex[True-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex_out_of_range[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1152: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex_out_of_range[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1152: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex_out_of_range[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1152: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex_out_of_range[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1152: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex_out_of_range[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1152: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex_out_of_range[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1152: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex_out_of_range[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1152: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex_out_of_range[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1152: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex_out_of_range[standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1152: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex_feb_29[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1160: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_to_datetimeindex_feb_29[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1160: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_multiindex" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1168: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_against_datetimeindex[floor-3663S]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1176: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_against_datetimeindex[floor-33T]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1176: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_against_datetimeindex[floor-2H]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1176: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_against_datetimeindex[ceil-3663S]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1176: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_against_datetimeindex[ceil-33T]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1176: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_against_datetimeindex[ceil-2H]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1176: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_against_datetimeindex[round-3663S]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1176: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_against_datetimeindex[round-33T]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1176: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_against_datetimeindex[round-2H]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1176: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_invalid_freq[floor]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1187: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_invalid_freq[ceil]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1187: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_rounding_methods_invalid_freq[round]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1187: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_ceil[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1206: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_ceil[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1206: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_ceil[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1206: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_ceil[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1206: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_ceil[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1206: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_ceil[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1206: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_ceil[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1206: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_floor[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1219: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_floor[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1219: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_floor[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1219: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_floor[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1219: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_floor[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1219: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_floor[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1219: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_floor[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1219: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_round[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1232: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_round[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1232: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_round[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1232: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_round[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1232: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_round[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1232: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_round[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1232: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_round[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1232: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_asi8[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1245: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_asi8[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1245: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_asi8[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1245: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_asi8[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1245: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_asi8[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1245: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_asi8[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1245: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_asi8[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1245: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_asi8_distant_date" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1253: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq_valid_types" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1265: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq_invalid_inputs" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1280: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-300AS-JAN]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-A-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-AS-JUL]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-2AS-FEB]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-Q-NOV]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-3QS-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-MS]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-4M]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-7D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-30H]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-5T]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[365_day-40S]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-300AS-JAN]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-A-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-AS-JUL]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-2AS-FEB]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-Q-NOV]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-3QS-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-MS]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-4M]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-7D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-30H]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-5T]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[360_day-40S]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-300AS-JAN]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-A-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-AS-JUL]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-2AS-FEB]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-Q-NOV]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-3QS-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-MS]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-4M]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-7D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-30H]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-5T]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[julian-40S]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-300AS-JAN]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-A-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-AS-JUL]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-2AS-FEB]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-Q-NOV]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-3QS-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-MS]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-4M]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-7D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-30H]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-5T]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[all_leap-40S]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-300AS-JAN]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-A-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-AS-JUL]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-2AS-FEB]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-Q-NOV]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-3QS-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-MS]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-4M]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-7D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-30H]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-5T]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[366_day-40S]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-300AS-JAN]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-A-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-AS-JUL]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-2AS-FEB]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-Q-NOV]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-3QS-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-MS]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-4M]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-7D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-30H]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-5T]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[gregorian-40S]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-300AS-JAN]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-A-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-AS-JUL]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-2AS-FEB]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-Q-NOV]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-3QS-DEC]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-MS]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-4M]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-7D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-30H]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-5T]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_infer_freq[proleptic_gregorian-40S]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1309: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_pickle_cftimeindex[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1335: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_pickle_cftimeindex[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1335: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_pickle_cftimeindex[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1335: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_pickle_cftimeindex[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1335: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_pickle_cftimeindex[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1335: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_pickle_cftimeindex[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1335: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_cftimeindex" name="test_pickle_cftimeindex[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_cftimeindex.py:1335: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_absent_dims_error[1-numpy]" time="0.006" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_absent_dims_error[1-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:20: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_dataset[1-numpy-trim-left-True]" time="0.009" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_dataset[1-numpy-trim-left-False]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_dataset[1-numpy-pad-right-True]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_dataset[1-numpy-pad-right-False]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_dataset[1-dask-trim-left-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:25: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_dataset[1-dask-trim-left-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:25: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_dataset[1-dask-pad-right-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:25: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_dataset[1-dask-pad-right-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:25: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_coords[1-numpy-True]" time="0.012" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_coords[1-numpy-False]" time="0.011" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_coords[1-dask-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:41: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_coords[1-dask-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:41: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_coords_cftime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:66: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_keep_attrs[reduce-argument0]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_keep_attrs[mean-argument1]" time="0.006" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-sum-1-1]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-sum-1-2]" time="0.009" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-sum-2-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-sum-2-2]" time="0.009" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-sum-3-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-sum-3-2]" time="0.009" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-sum-4-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-sum-4-2]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-mean-1-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-mean-1-2]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-mean-2-1]" time="0.006" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-mean-2-2]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-mean-3-1]" time="0.006" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-mean-3-2]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-mean-4-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-mean-4-2]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-std-1-1]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-std-1-2]" time="0.009" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-std-2-1]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-std-2-2]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-std-3-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-std-3-2]" time="0.009" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-std-4-1]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-std-4-2]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-var-1-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-var-1-2]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-var-2-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-var-2-2]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-var-3-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-var-3-2]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-var-4-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-var-4-2]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-min-1-1]" time="0.006" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-min-1-2]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-min-2-1]" time="0.006" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-min-2-2]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-min-3-1]" time="0.006" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-min-3-2]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-min-4-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-min-4-2]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-max-1-1]" time="0.006" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-max-1-2]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-max-2-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-max-2-2]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-max-3-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-max-3-2]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-max-4-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-max-4-2]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-median-1-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-median-1-2]" time="0.009" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-median-2-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-median-2-2]" time="0.009" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-median-3-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-median-3-2]" time="0.009" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-median-4-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[numpy-median-4-2]" time="0.009" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-sum-1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-sum-1-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-sum-2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-sum-2-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-sum-3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-sum-3-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-sum-4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-sum-4-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-mean-1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-mean-1-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-mean-2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-mean-2-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-mean-3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-mean-3-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-mean-4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-mean-4-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-std-1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-std-1-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-std-2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-std-2-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-std-3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-std-3-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-std-4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-std-4-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-var-1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-var-1-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-var-2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-var-2-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-var-3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-var-3-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-var-4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-var-4-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-min-1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-min-1-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-min-2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-min-2-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-min-3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-min-3-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-min-4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-min-4-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-max-1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-max-1-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-max-2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-max-2-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-max-3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-max-3-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-max-4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-max-4-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-median-1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-median-1-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-median-2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-median-2-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-median-3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-median-3-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-median-4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_reduce[dask-median-4-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:156: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_keep_attrs[reduce-argument0]" time="0.006" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_keep_attrs[mean-argument1]" time="0.005" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-sum-1-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-sum-1-2]" time="0.003"><skipped type="pytest.skip" message="These parameters lead to all-NaN slices">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:242: These parameters lead to all-NaN slices</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-sum-2-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-sum-2-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-sum-3-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-sum-3-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-sum-4-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-sum-4-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-mean-1-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-mean-1-2]" time="0.003"><skipped type="pytest.skip" message="These parameters lead to all-NaN slices">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:242: These parameters lead to all-NaN slices</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-mean-2-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-mean-2-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-mean-3-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-mean-3-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-mean-4-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-mean-4-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-std-1-1]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-std-1-2]" time="0.003"><skipped type="pytest.skip" message="These parameters lead to all-NaN slices">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:242: These parameters lead to all-NaN slices</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-std-2-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-std-2-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-std-3-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-std-3-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-std-4-1]" time="0.008" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-std-4-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-max-1-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-max-1-2]" time="0.003"><skipped type="pytest.skip" message="These parameters lead to all-NaN slices">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:242: These parameters lead to all-NaN slices</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-max-2-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-max-2-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-max-3-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-max-3-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-max-4-1]" time="0.007" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[numpy-max-4-2]" time="0.004" /><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-sum-1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-sum-1-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-sum-2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-sum-2-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-sum-3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-sum-3-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-sum-4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-sum-4-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-mean-1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-mean-1-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-mean-2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-mean-2-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-mean-3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-mean-3-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-mean-4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-mean-4-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-std-1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-std-1-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-std-2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-std-2-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-std-3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-std-3-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-std-4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-std-4-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-max-1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-max-1-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-max-2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-max-2-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-max-3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-max-3-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-max-4-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen" name="test_coarsen_da_reduce[dask-max-4-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coarsen.py:237: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coarsen.TestCoarsenConstruct" name="test_coarsen_construct[True]" time="0.011" /><testcase classname="xarray.tests.test_coarsen.TestCoarsenConstruct" name="test_coarsen_construct[False]" time="0.010" /><testcase classname="xarray.tests.test_coarsen.TestCoarsenConstruct" name="test_coarsen_construct_keeps_all_coords" time="0.004" /><testcase classname="xarray.tests.test_coding" name="test_CFMaskCoder_decode" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_CFMaskCoder_encode_missing_fill_values_conflict[numeric-with-dtype]" time="0.004" /><testcase classname="xarray.tests.test_coding" name="test_CFMaskCoder_encode_missing_fill_values_conflict[numeric-without-dtype]" time="0.004" /><testcase classname="xarray.tests.test_coding" name="test_CFMaskCoder_encode_missing_fill_values_conflict[times-with-dtype]" time="0.008" /><testcase classname="xarray.tests.test_coding" name="test_CFMaskCoder_missing_value" time="0.005" /><testcase classname="xarray.tests.test_coding" name="test_CFMaskCoder_decode_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding.py:78: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding" name="test_coder_roundtrip" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_scaling_converts_to_float32[u1]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_scaling_converts_to_float32[u2]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_scaling_converts_to_float32[i1]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_scaling_converts_to_float32[i2]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_scaling_converts_to_float32[f2]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_scaling_converts_to_float32[f4]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_scaling_offset_as_list[0.1-10]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_scaling_offset_as_list[0.1-scale_factor1]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_scaling_offset_as_list[add_offset1-10]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_scaling_offset_as_list[add_offset1-scale_factor1]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_decode_unsigned_from_signed[1]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_decode_unsigned_from_signed[2]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_decode_unsigned_from_signed[4]" time="0.004" /><testcase classname="xarray.tests.test_coding" name="test_decode_unsigned_from_signed[8]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_decode_signed_from_unsigned[1]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_decode_signed_from_unsigned[2]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_decode_signed_from_unsigned[4]" time="0.003" /><testcase classname="xarray.tests.test_coding" name="test_decode_signed_from_unsigned[8]" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_vlen_dtype" time="0.002" /><testcase classname="xarray.tests.test_coding_strings" name="test_numpy_subclass_handling[str_]" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_numpy_subclass_handling[bytes_]" time="0.002" /><testcase classname="xarray.tests.test_coding_strings" name="test_EncodedStringCoder_decode" time="0.004" /><testcase classname="xarray.tests.test_coding_strings" name="test_EncodedStringCoder_decode_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_strings.py:53: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_strings" name="test_EncodedStringCoder_encode" time="0.004" /><testcase classname="xarray.tests.test_coding_strings" name="test_CharacterArrayCoder_roundtrip[original0]" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_CharacterArrayCoder_roundtrip[original1]" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_CharacterArrayCoder_roundtrip[original2]" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_CharacterArrayCoder_roundtrip[original3]" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_CharacterArrayCoder_encode[data0]" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_CharacterArrayCoder_encode[data1]" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_CharacterArrayCoder_char_dim_name[original0-string4]" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_CharacterArrayCoder_char_dim_name[original1-foo]" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_StackedBytesArray" time="0.002" /><testcase classname="xarray.tests.test_coding_strings" name="test_StackedBytesArray_scalar" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_StackedBytesArray_vectorized_indexing" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_char_to_bytes" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_char_to_bytes_ndim_zero" time="0.002" /><testcase classname="xarray.tests.test_coding_strings" name="test_char_to_bytes_size_zero" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_char_to_bytes_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_strings.py:204: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_strings" name="test_bytes_to_char" time="0.003" /><testcase classname="xarray.tests.test_coding_strings" name="test_bytes_to_char_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_strings.py:230: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates0-days since 2000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates1-days since 2000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates2-days since 2000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates3-days since 2000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates4-days since 2000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates5-days since 2000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates6-days since 2000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates7-days since 2000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates8-days since 2000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates9-days since 2000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates10-days since 2000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates11-days since 2000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates12-hours since 1680-01-01 00:00:00-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates13-hours since 1680-01-01 00:00:00-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates14-hours since 1680-01-01 00:00:00-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates15-hour since 1680-01-01  00:00:00-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates16-hour since 1680-01-01  00:00:00-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates17-hour since 1680-01-01  00:00:00-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates18-Hour  since 1680-01-01 00:00:00-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates19-Hour  since 1680-01-01 00:00:00-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates20-Hour  since 1680-01-01 00:00:00-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates21- Hour  since  1680-01-01 00:00:00 -gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates22- Hour  since  1680-01-01 00:00:00 -proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates23- Hour  since  1680-01-01 00:00:00 -standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[10-days since 2000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[10-days since 2000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[10-days since 2000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates27-daYs  since 2000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates28-daYs  since 2000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates29-daYs  since 2000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates30-days since 2000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates31-days since 2000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates32-days since 2000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates33-days since 2000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates34-days since 2000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates35-days since 2000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates36-days since 2000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates37-days since 2000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates38-days since 2000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[0-days since 1000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[0-days since 1000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[0-days since 1000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates42-days since 1000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates43-days since 1000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates44-days since 1000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates45-days since 1000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates46-days since 1000-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates47-days since 1000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates48-days since 1000-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates49-days since 1000-01-01-proleptic_gregorian]" time="0.001"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates50-days since 1000-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates51-days since 1900-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates52-days since 1900-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates53-days since 1900-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates54-days since 1-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates55-days since 1-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates56-days since 1-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[17093352.0-hours since 1-1-1 00:00:0.0-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[17093352.0-hours since 1-1-1 00:00:0.0-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[17093352.0-hours since 1-1-1 00:00:0.0-standard]" time="0.001"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates60-hours since 1900-01-01T00:00:00-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates61-hours since 1900-01-01T00:00:00-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates62-hours since 1900-01-01T00:00:00-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[0-milliseconds since 2000-01-01T00:00:00-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[0-milliseconds since 2000-01-01T00:00:00-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[0-milliseconds since 2000-01-01T00:00:00-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[0-microseconds since 2000-01-01T00:00:00-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[0-microseconds since 2000-01-01T00:00:00-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[0-microseconds since 2000-01-01T00:00:00-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates69-seconds since 1981-01-01-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates70-seconds since 1981-01-01-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates71-seconds since 1981-01-01-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates72-hour since 1680-01-01 00:00:00.500000-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates73-hour since 1680-01-01 00:00:00.500000-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates74-hour since 1680-01-01 00:00:00.500000-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[164375-days since 1850-01-01 00:00:00-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[164375-days since 1850-01-01 00:00:00-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[164375-days since 1850-01-01 00:00:00-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[164374.5-days since 1850-01-01 00:00:00-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[164374.5-days since 1850-01-01 00:00:00-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[164374.5-days since 1850-01-01 00:00:00-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates81-days since 1850-01-01 00:00:00-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates82-days since 1850-01-01 00:00:00-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime[num_dates83-days since 1850-01-01 00:00:00-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf_datetime_overflow" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:149: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf_datetime_non_standard_units" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf_datetime_non_iso_strings" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:179: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_standard_calendar_inside_timestamp_range[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:198: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_standard_calendar_inside_timestamp_range[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:198: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_standard_calendar_inside_timestamp_range[standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:198: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_inside_timestamp_range[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:218: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_inside_timestamp_range[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:218: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_inside_timestamp_range[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:218: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_inside_timestamp_range[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:218: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_inside_timestamp_range[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:218: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_inside_timestamp_range[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:218: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_dates_outside_timestamp_range[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:243: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_dates_outside_timestamp_range[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:243: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_dates_outside_timestamp_range[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:243: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_dates_outside_timestamp_range[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:243: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_dates_outside_timestamp_range[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:243: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_dates_outside_timestamp_range[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:243: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_dates_outside_timestamp_range[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:243: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_dates_outside_timestamp_range[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:243: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_dates_outside_timestamp_range[standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:243: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_standard_calendar_single_element_inside_timestamp_range[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:270: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_standard_calendar_single_element_inside_timestamp_range[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:270: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_standard_calendar_single_element_inside_timestamp_range[standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:270: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_single_element_inside_timestamp_range[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:283: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_single_element_inside_timestamp_range[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:283: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_single_element_inside_timestamp_range[366_day]" time="0.001"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:283: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_single_element_inside_timestamp_range[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:283: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_single_element_inside_timestamp_range[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:283: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_single_element_inside_timestamp_range[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:283: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_single_element_outside_timestamp_range[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:296: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_single_element_outside_timestamp_range[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:296: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_single_element_outside_timestamp_range[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:296: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_single_element_outside_timestamp_range[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:296: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_single_element_outside_timestamp_range[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:296: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_single_element_outside_timestamp_range[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:296: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_standard_calendar_multidim_time_inside_timestamp_range[gregorian]" time="0.001"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:316: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_standard_calendar_multidim_time_inside_timestamp_range[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:316: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_standard_calendar_multidim_time_inside_timestamp_range[standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:316: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:347: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:347: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:347: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:347: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:347: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:347: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_multidim_time_outside_timestamp_range[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_multidim_time_outside_timestamp_range[365_day]" time="0.001"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_multidim_time_outside_timestamp_range[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_multidim_time_outside_timestamp_range[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_multidim_time_outside_timestamp_range[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_multidim_time_outside_timestamp_range[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_multidim_time_outside_timestamp_range[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_multidim_time_outside_timestamp_range[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_multidim_time_outside_timestamp_range[standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:388: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_single_element[360_day-720058.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:422: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_single_element[all_leap-732059.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:422: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_non_standard_calendar_single_element[366_day-732059.0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:422: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_360_day_calendar" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:441: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_abbreviation" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:466: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime_nan[num_dates0-days since 2000-01-01-expected_list0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:478: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime_nan[num_dates1-days since 2000-01-01-expected_list1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:478: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_datetime_nan[num_dates2-days since 2000-01-01-expected_list2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:478: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decoded_cf_datetime_array_2d" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:501: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_datetime_units[N-nanoseconds]" time="0.006" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_datetime_units[U-microseconds]" time="0.006" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_datetime_units[L-milliseconds]" time="0.005" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_datetime_units[S-seconds]" time="0.005" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_datetime_units[T-minutes]" time="0.005" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_datetime_units[H-hours]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_datetime_units[D-days]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_datetime_units_with_NaT[dates0-days since 1900-01-01 00:00:00]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_datetime_units_with_NaT[dates1-days since 1900-01-01 00:00:00]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_datetime_units_with_NaT[dates2-days since 1970-01-01 00:00:00]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args0-days since 1900-01-01 00:00:00.000000-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args0-days since 1900-01-01 00:00:00.000000-365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args0-days since 1900-01-01 00:00:00.000000-366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args0-days since 1900-01-01 00:00:00.000000-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args0-days since 1900-01-01 00:00:00.000000-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args0-days since 1900-01-01 00:00:00.000000-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args0-days since 1900-01-01 00:00:00.000000-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args0-days since 1900-01-01 00:00:00.000000-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args1-seconds since 1900-01-01 00:00:00.000000-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args1-seconds since 1900-01-01 00:00:00.000000-365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args1-seconds since 1900-01-01 00:00:00.000000-366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args1-seconds since 1900-01-01 00:00:00.000000-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args1-seconds since 1900-01-01 00:00:00.000000-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args1-seconds since 1900-01-01 00:00:00.000000-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args1-seconds since 1900-01-01 00:00:00.000000-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args1-seconds since 1900-01-01 00:00:00.000000-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args2-days since 1900-01-01 00:00:00.000000-360_day]" time="0.001"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args2-days since 1900-01-01 00:00:00.000000-365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args2-days since 1900-01-01 00:00:00.000000-366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args2-days since 1900-01-01 00:00:00.000000-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args2-days since 1900-01-01 00:00:00.000000-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args2-days since 1900-01-01 00:00:00.000000-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args2-days since 1900-01-01 00:00:00.000000-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_infer_cftime_datetime_units[date_args2-days since 1900-01-01 00:00:00.000000-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:559: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_cf_timedelta[1D-days-numbers0]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_cf_timedelta[timedeltas1-days-numbers1]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_cf_timedelta[1h-hours-numbers2]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_cf_timedelta[1ms-milliseconds-numbers3]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_cf_timedelta[1us-microseconds-numbers4]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_cf_timedelta[1ns-nanoseconds-numbers5]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_cf_timedelta[timedeltas6-None-numbers6]" time="0.005" /><testcase classname="xarray.tests.test_coding_times" name="test_cf_timedelta[timedeltas7-hours-numbers7]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_cf_timedelta[NaT-days-nan]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_cf_timedelta[timedeltas9-days-numbers9]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_cf_timedelta_2d" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_timedelta_units[deltas0-days]" time="0.005" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_timedelta_units[deltas1-hours]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_timedelta_units[deltas2-minutes]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_infer_timedelta_units[deltas3-seconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_format_cftime_datetime[date_args0-0001-02-03 04:05:06.000000]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:633: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_format_cftime_datetime[date_args1-0010-02-03 04:05:06.000000]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:633: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_format_cftime_datetime[date_args2-0100-02-03 04:05:06.000000]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:633: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_format_cftime_datetime[date_args3-1000-02-03 04:05:06.000000]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:633: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf[360_day]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf[365_day]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf[366_day]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf[all_leap]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf[gregorian]" time="0.006" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf[julian]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf[noleap]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf[proleptic_gregorian]" time="0.005" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf[standard]" time="0.005" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf_time_bounds" time="0.006" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_time_bounds" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:715: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_1d[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:791: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_1d[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:791: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_1d[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:791: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_1d[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:791: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_1d[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:791: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_1d[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:791: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_1d[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:791: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_1d[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:791: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_1d[standard]" time="0.001"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:791: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_1d[360_day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:796: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_1d[365_day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:796: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_1d[366_day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:796: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_1d[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:796: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_1d[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:796: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_1d[julian]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:796: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_1d[noleap]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:796: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_1d[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:796: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_1d[standard]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:796: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_3d[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:802: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_3d[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:802: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_3d[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:802: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_3d[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:802: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_3d[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:802: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_3d[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:802: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_3d[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:802: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_3d[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:802: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_3d[standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:802: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_3d[360_day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:807: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_3d[365_day]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:807: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_3d[366_day]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:807: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_3d[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:807: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_3d[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:807: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_3d[julian]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:807: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_3d[noleap]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:807: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_3d[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:807: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_dask_3d[standard]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:807: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_non_cftimes[non_cftime_data0]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_non_cftimes[non_cftime_data1]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:818: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:818: requires dask</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_overflow[shape0]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:824: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_overflow[shape1]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:824: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_overflow[shape2]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:824: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_expected_failures" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_pandas_min" time="0.005" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_invalid_pandas_valid_cftime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:858: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_time_units_with_timezone_roundtrip[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:875: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_time_units_with_timezone_roundtrip[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:875: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_time_units_with_timezone_roundtrip[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:875: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_time_units_with_timezone_roundtrip[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:875: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_time_units_with_timezone_roundtrip[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:875: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_time_units_with_timezone_roundtrip[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:875: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_time_units_with_timezone_roundtrip[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:875: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_time_units_with_timezone_roundtrip[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:875: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_time_units_with_timezone_roundtrip[standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:875: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_standard_calendar_in_range[gregorian]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_standard_calendar_in_range[proleptic_gregorian]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_standard_calendar_in_range[standard]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_standard_calendar_out_of_range[1500-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:914: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_standard_calendar_out_of_range[1500-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:914: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_standard_calendar_out_of_range[1500-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:914: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_standard_calendar_out_of_range[2500-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:914: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_standard_calendar_out_of_range[2500-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:914: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_standard_calendar_out_of_range[2500-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:914: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[1500-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[1500-365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[1500-366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[1500-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[1500-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[1500-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2000-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2000-365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2000-366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2000-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2000-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2000-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2500-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2500-365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2500-366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2500-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2500-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_default_non_standard_calendar[2500-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:933: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[1500-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[1500-365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[1500-366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[1500-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[1500-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[1500-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[1500-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[1500-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[1500-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2000-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2000-365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2000-366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2000-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2000-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2000-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2000-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2000-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2000-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2500-360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2500-365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2500-366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2500-all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2500-gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2500-julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2500-noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2500-proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_true[2500-standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:950: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_standard_calendar_in_range[gregorian]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_standard_calendar_in_range[proleptic_gregorian]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_standard_calendar_in_range[standard]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_standard_calendar_out_of_range[1500-gregorian]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_standard_calendar_out_of_range[1500-proleptic_gregorian]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_standard_calendar_out_of_range[1500-standard]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_standard_calendar_out_of_range[2500-gregorian]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_standard_calendar_out_of_range[2500-proleptic_gregorian]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_standard_calendar_out_of_range[2500-standard]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[1500-360_day]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[1500-365_day]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[1500-366_day]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[1500-all_leap]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[1500-julian]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[1500-noleap]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2000-360_day]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2000-365_day]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2000-366_day]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2000-all_leap]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2000-julian]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2000-noleap]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2500-360_day]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2500-365_day]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2500-366_day]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2500-all_leap]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2500-julian]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_use_cftime_false_non_standard_calendar[2500-noleap]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_ambiguous_time_warns[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:996: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_ambiguous_time_warns[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:996: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_ambiguous_time_warns[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:996: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_ambiguous_time_warns[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:996: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_ambiguous_time_warns[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:996: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_ambiguous_time_warns[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:996: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_ambiguous_time_warns[noleap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:996: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_ambiguous_time_warns[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:996: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_ambiguous_time_warns[standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:996: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-nanoseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-microseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-milliseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-seconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-minutes]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-hours]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-days]" time="0.005" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-nanoseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-microseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-milliseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-seconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-minutes]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-hours]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-days]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-nanoseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-microseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-milliseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-seconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-minutes]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-hours]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-days]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-nanoseconds]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-microseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-milliseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-seconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-minutes]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-hours]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-days]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-nanoseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-microseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-milliseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-seconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-minutes]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-hours]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-days]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-nanoseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-microseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-milliseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-seconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-minutes]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-hours]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-days]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-nanoseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-microseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-milliseconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-seconds]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-minutes]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-hours]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-days]" time="0.004" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-N-nanoseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-N-microseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-N-milliseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-N-seconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-N-minutes]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-N-hours]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-N-days]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-nanoseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-microseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-milliseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-seconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-minutes]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-hours]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-days]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-nanoseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-microseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-milliseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-seconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-minutes]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-hours]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-days]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-nanoseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-microseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-milliseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-seconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-minutes]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-hours]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-days]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-nanoseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-microseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-milliseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-seconds]" time="0.004"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-minutes]" time="0.004"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-hours]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-days]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-nanoseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-microseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-milliseconds]" time="0.004"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-seconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-minutes]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-hours]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-days]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-nanoseconds]" time="0.003"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-microseconds]" time="0.004"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-milliseconds]" time="0.005"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-seconds]" time="0.005"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-minutes]" time="0.004"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-hours]" time="0.004"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-days]" time="0.004"><skipped type="pytest.skip" message="Test requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1033: Test requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_datetime64[N]" time="0.009" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_datetime64[U]" time="0.008" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_datetime64[L]" time="0.008" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_datetime64[S]" time="0.007" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_datetime64[T]" time="0.007" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_datetime64[H]" time="0.006" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_datetime64[D]" time="0.006" /><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_cftime[U]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1060: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_cftime[L]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1060: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_cftime[S]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1060: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_cftime[T]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1060: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_cftime[H]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1060: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_encode_decode_roundtrip_cftime[D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1060: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test__encode_datetime_with_cftime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1073: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_encode_roundtrip_with_non_lowercase_letters[gregorian]" time="0.006" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_encode_roundtrip_with_non_lowercase_letters[Gregorian]" time="0.006" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_encode_roundtrip_with_non_lowercase_letters[GREGORIAN]" time="0.005" /><testcase classname="xarray.tests.test_coding_times" name="test_should_cftime_be_used_source_outside_range" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1115: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_should_cftime_be_used_target_not_npable" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1124: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf_datetime_uint[uint8]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf_datetime_uint[uint16]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf_datetime_uint[uint32]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf_datetime_uint[uint64]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf_datetime_uint64_with_cftime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1142: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_cf_datetime_uint64_with_cftime_overflow_error" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1151: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_0size_datetime[True]" time="0.003"><skipped type="pytest.skip" message="Skipped">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1164: Skipped</skipped></testcase><testcase classname="xarray.tests.test_coding_times" name="test_decode_0size_datetime[False]" time="0.003" /><testcase classname="xarray.tests.test_coding_times" name="test_scalar_unit" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_coding_times.py:1177: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_combine.TestTileIDsFromNestedList" name="test_1d" time="0.019" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromNestedList" name="test_2d" time="0.046" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromNestedList" name="test_3d" time="0.089" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromNestedList" name="test_single_dataset" time="0.008" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromNestedList" name="test_redundant_nesting" time="0.018" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromNestedList" name="test_ignore_empty_list" time="0.007" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromNestedList" name="test_uneven_depth_input" time="0.025" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromNestedList" name="test_uneven_length_input" time="0.026" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromNestedList" name="test_infer_from_datasets" time="0.018" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromCoords" name="test_1d" time="0.004" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromCoords" name="test_2d" time="0.007" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromCoords" name="test_no_dimension_coords" time="0.003" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromCoords" name="test_coord_not_monotonic" time="0.003" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromCoords" name="test_coord_monotonically_decreasing" time="0.004" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromCoords" name="test_no_concatenation_needed" time="0.003" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromCoords" name="test_2d_plus_bystander_dim" time="0.007" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromCoords" name="test_string_coords" time="0.004" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromCoords" name="test_lexicographic_sort_string_coords" time="0.004" /><testcase classname="xarray.tests.test_combine.TestTileIDsFromCoords" name="test_datetime_coords" time="0.005" /><testcase classname="xarray.tests.test_combine.TestNewTileIDs" name="test_new_tile_id[old_id0-new_id0]" time="0.003" /><testcase classname="xarray.tests.test_combine.TestNewTileIDs" name="test_new_tile_id[old_id1-new_id1]" time="0.003" /><testcase classname="xarray.tests.test_combine.TestNewTileIDs" name="test_new_tile_id[old_id2-new_id2]" time="0.003" /><testcase classname="xarray.tests.test_combine.TestNewTileIDs" name="test_new_tile_id[old_id3-new_id3]" time="0.003" /><testcase classname="xarray.tests.test_combine.TestNewTileIDs" name="test_new_tile_id[old_id4-new_id4]" time="0.003" /><testcase classname="xarray.tests.test_combine.TestNewTileIDs" name="test_get_new_tile_ids" time="0.023" /><testcase classname="xarray.tests.test_combine.TestCombineND" name="test_concat_once[dim1]" time="0.026" /><testcase classname="xarray.tests.test_combine.TestCombineND" name="test_concat_once[new_dim]" time="0.027" /><testcase classname="xarray.tests.test_combine.TestCombineND" name="test_concat_only_first_dim" time="0.069" /><testcase classname="xarray.tests.test_combine.TestCombineND" name="test_concat_twice[dim1]" time="0.081" /><testcase classname="xarray.tests.test_combine.TestCombineND" name="test_concat_twice[new_dim]" time="0.079" /><testcase classname="xarray.tests.test_combine.TestCheckShapeTileIDs" name="test_check_depths" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCheckShapeTileIDs" name="test_check_lengths" time="0.007" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_nested_concat" time="0.012" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_nested_join[outer-expected0]" time="0.006" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_nested_join[inner-expected1]" time="0.006" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_nested_join[left-expected2]" time="0.006" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_nested_join[right-expected3]" time="0.006" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_nested_join_exact" time="0.004" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_empty_input" time="0.003" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_nested_concat_too_many_dims_at_once" time="0.005"><skipped type="pytest.xfail" message="" /></testcase><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_nested_concat_along_new_dim" time="0.009" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_nested_merge" time="0.018" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_concat_multiple_dims" time="0.007" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_concat_name_symmetry" time="0.010" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_concat_one_dim_merge_another" time="0.011" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_auto_combine_2d" time="0.078" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_auto_combine_2d_combine_attrs_kwarg" time="0.139" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_nested_missing_data_new_dim" time="0.008" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_invalid_hypercube_input" time="0.082" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_merge_one_dim_concat_another" time="0.020" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_concat_over_redundant_nesting" time="0.012" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_nested_fill_value[fill_value0]" time="0.019" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_nested_fill_value[2]" time="0.033" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_nested_fill_value[2.0]" time="0.033" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_nested_fill_value[fill_value3]" time="0.019" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_combine_nested_unnamed_data_arrays" time="0.023" /><testcase classname="xarray.tests.test_combine.TestNestedCombine" name="test_nested_combine_mixed_datasets_arrays" time="0.005" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords" time="0.021" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_empty_input" time="0.004" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_coords_join[outer-expected0]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_coords_join[inner-expected1]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_coords_join[left-expected2]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_coords_join[right-expected3]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_coords_join_exact" time="0.005" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_coords_combine_attrs[drop-expected0]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_coords_combine_attrs[no_conflicts-expected1]" time="0.009" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_coords_combine_attrs[override-expected2]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_coords_combine_attrs[&lt;lambda&gt;-expected3]" time="0.008" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_coords_combine_attrs_identical" time="0.009" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_nested_combine_attrs_drop_conflicts" time="0.009" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_nested_combine_attrs_variables[no_conflicts-attrs10-attrs20-expected_attrs0-False]" time="0.010" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_nested_combine_attrs_variables[no_conflicts-attrs11-attrs21-expected_attrs1-False]" time="0.009" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_nested_combine_attrs_variables[no_conflicts-attrs12-attrs22-expected_attrs2-False]" time="0.008" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_nested_combine_attrs_variables[no_conflicts-attrs13-attrs23-expected_attrs3-True]" time="0.006" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_nested_combine_attrs_variables[drop-attrs14-attrs24-expected_attrs4-False]" time="0.008" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_nested_combine_attrs_variables[identical-attrs15-attrs25-expected_attrs5-False]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_nested_combine_attrs_variables[identical-attrs16-attrs26-expected_attrs6-True]" time="0.006" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_nested_combine_attrs_variables[override-attrs17-attrs27-expected_attrs7-False]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_nested_combine_attrs_variables[drop_conflicts-attrs18-attrs28-expected_attrs8-False]" time="0.008" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_combine_attrs_variables[no_conflicts-attrs10-attrs20-expected_attrs0-False]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_combine_attrs_variables[no_conflicts-attrs11-attrs21-expected_attrs1-False]" time="0.008" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_combine_attrs_variables[no_conflicts-attrs12-attrs22-expected_attrs2-False]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_combine_attrs_variables[no_conflicts-attrs13-attrs23-expected_attrs3-True]" time="0.006" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_combine_attrs_variables[drop-attrs14-attrs24-expected_attrs4-False]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_combine_attrs_variables[identical-attrs15-attrs25-expected_attrs5-False]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_combine_attrs_variables[identical-attrs16-attrs26-expected_attrs6-True]" time="0.005" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_combine_attrs_variables[override-attrs17-attrs27-expected_attrs7-False]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_combine_attrs_variables[drop_conflicts-attrs18-attrs28-expected_attrs8-False]" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_infer_order_from_coords" time="0.013" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_leaving_bystander_dimensions" time="0.009" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_previously_failed" time="0.009" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_still_fails" time="0.004" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_no_concat" time="0.005" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_check_for_impossible_ordering" time="0.005" /><testcase classname="xarray.tests.test_combine.TestCombineDatasetsbyCoords" name="test_combine_by_coords_incomplete_hypercube" time="0.013" /><testcase classname="xarray.tests.test_combine.TestCombineMixedObjectsbyCoords" name="test_combine_by_coords_mixed_unnamed_dataarrays" time="0.004" /><testcase classname="xarray.tests.test_combine.TestCombineMixedObjectsbyCoords" name="test_combine_coords_mixed_datasets_named_dataarrays" time="0.005" /><testcase classname="xarray.tests.test_combine.TestCombineMixedObjectsbyCoords" name="test_combine_by_coords_all_unnamed_dataarrays" time="0.007" /><testcase classname="xarray.tests.test_combine.TestCombineMixedObjectsbyCoords" name="test_combine_by_coords_all_named_dataarrays" time="0.010" /><testcase classname="xarray.tests.test_combine.TestCombineMixedObjectsbyCoords" name="test_combine_by_coords_all_dataarrays_with_the_same_name" time="0.009" /><testcase classname="xarray.tests.test_combine" name="test_combine_by_coords_distant_cftime_dates" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_combine.py:1111: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_combine" name="test_combine_by_coords_raises_for_differing_calendars" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_combine.py:1133: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_combine" name="test_combine_by_coords_raises_for_differing_types" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_signature_properties" time="0.003" /><testcase classname="xarray.tests.test_computation" name="test_result_name" time="0.003" /><testcase classname="xarray.tests.test_computation" name="test_ordered_set_union" time="0.003" /><testcase classname="xarray.tests.test_computation" name="test_ordered_set_intersection" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_join_dict_keys" time="0.003" /><testcase classname="xarray.tests.test_computation" name="test_collect_dict_values" time="0.003" /><testcase classname="xarray.tests.test_computation" name="test_apply_identity" time="0.021" /><testcase classname="xarray.tests.test_computation" name="test_apply_two_inputs" time="0.052" /><testcase classname="xarray.tests.test_computation" name="test_apply_1d_and_0d" time="0.045" /><testcase classname="xarray.tests.test_computation" name="test_apply_two_outputs" time="0.020" /><testcase classname="xarray.tests.test_computation" name="test_apply_dask_parallelized_two_outputs" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:260: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_apply_input_core_dimension" time="0.015" /><testcase classname="xarray.tests.test_computation" name="test_apply_output_core_dimension" time="0.031" /><testcase classname="xarray.tests.test_computation" name="test_apply_exclude" time="0.008" /><testcase classname="xarray.tests.test_computation" name="test_apply_groupby_add" time="0.037" /><testcase classname="xarray.tests.test_computation" name="test_unified_dim_sizes" time="0.003" /><testcase classname="xarray.tests.test_computation" name="test_broadcast_compat_data_1d" time="0.003" /><testcase classname="xarray.tests.test_computation" name="test_broadcast_compat_data_2d" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs" time="0.008" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_variable[default]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_variable[False]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_variable[True]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_variable[override]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_variable[drop]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_variable[drop_conflicts]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_variable[no_conflicts]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray[default]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray[False]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray[True]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray[override]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray[drop]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray[drop_conflicts]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray[no_conflicts]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[default-dim]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[default-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[False-dim]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[False-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[True-dim]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[True-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[override-dim]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[override-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[drop-dim]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[drop-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[drop_conflicts-dim]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[drop_conflicts-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[no_conflicts-dim]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataarray_variables[no_conflicts-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset[default]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset[False]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset[True]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset[override]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset[drop]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset[drop_conflicts]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset[no_conflicts]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[default-data]" time="0.007" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[default-dim]" time="0.007" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[default-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[False-data]" time="0.007" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[False-dim]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[False-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[True-data]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[True-dim]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[True-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[override-data]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[override-dim]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[override-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[drop-data]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[drop-dim]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[drop-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[drop_conflicts-data]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[drop_conflicts-dim]" time="0.007" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[drop_conflicts-coord]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[no_conflicts-data]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[no_conflicts-dim]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_keep_attrs_strategies_dataset_variables[no_conflicts-coord]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_dataset_join" time="0.015" /><testcase classname="xarray.tests.test_computation" name="test_apply_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1009: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_apply_dask_parallelized_one_arg" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1051: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_apply_dask_parallelized_two_args" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1071: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_apply_dask_parallelized_errors" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1099: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_apply_dask_multiple_inputs" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1124: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_apply_dask_new_output_dimension" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1168: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_apply_dask_new_output_sizes" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_vectorize" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_vectorize_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1236: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_vectorize_dask_dtype" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1252: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_vectorize_dask_dtype_without_output_dtypes[data_array0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1285: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_vectorize_dask_dtype_without_output_dtypes[data_array1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1285: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_vectorize_dask_dtype_meta" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1309: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_vectorize_exclude_dims" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_vectorize_exclude_dims_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1355: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_only_dataarray" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a0-da_b0-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a0-da_b0-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a1-da_b1-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a1-da_b1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a2-da_b2-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a2-da_b2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a3-da_b3-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a3-da_b3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a4-da_b4-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a4-da_b4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a5-da_b5-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[None-da_a5-da_b5-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a0-da_b0-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a0-da_b0-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a1-da_b1-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a1-da_b1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a2-da_b2-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a2-da_b2-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a3-da_b3-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a3-da_b3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a4-da_b4-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a4-da_b4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a5-da_b5-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[x-da_a5-da_b5-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a0-da_b0-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a0-da_b0-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a1-da_b1-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a1-da_b1-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a2-da_b2-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a2-da_b2-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a3-da_b3-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a3-da_b3-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a4-da_b4-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a4-da_b4-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a5-da_b5-0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_lazy_corrcov[time-da_a5-da_b5-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1410: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_cov[None-da_a0-da_b0-0]" time="0.018" /><testcase classname="xarray.tests.test_computation" name="test_cov[None-da_a0-da_b0-1]" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_cov[None-da_a1-da_b1-0]" time="0.019" /><testcase classname="xarray.tests.test_computation" name="test_cov[None-da_a1-da_b1-1]" time="0.019" /><testcase classname="xarray.tests.test_computation" name="test_cov[None-da_a2-da_b2-0]" time="0.015" /><testcase classname="xarray.tests.test_computation" name="test_cov[None-da_a2-da_b2-1]" time="0.015" /><testcase classname="xarray.tests.test_computation" name="test_cov[time-da_a0-da_b0-0]" time="0.062" /><testcase classname="xarray.tests.test_computation" name="test_cov[time-da_a0-da_b0-1]" time="0.062" /><testcase classname="xarray.tests.test_computation" name="test_cov[time-da_a1-da_b1-0]" time="0.102" /><testcase classname="xarray.tests.test_computation" name="test_cov[time-da_a1-da_b1-1]" time="0.103" /><testcase classname="xarray.tests.test_computation" name="test_cov[time-da_a2-da_b2-0]" time="0.064" /><testcase classname="xarray.tests.test_computation" name="test_cov[time-da_a2-da_b2-1]" time="0.063" /><testcase classname="xarray.tests.test_computation" name="test_corr[None-da_a0-da_b0]" time="0.015" /><testcase classname="xarray.tests.test_computation" name="test_corr[None-da_a1-da_b1]" time="0.020" /><testcase classname="xarray.tests.test_computation" name="test_corr[None-da_a2-da_b2]" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_corr[time-da_a0-da_b0]" time="0.064" /><testcase classname="xarray.tests.test_computation" name="test_corr[time-da_a1-da_b1]" time="0.110" /><testcase classname="xarray.tests.test_computation" name="test_corr[time-da_a2-da_b2]" time="0.070" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[None-da_a0-da_b0]" time="0.022" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[None-da_a1-da_b1]" time="0.025" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[None-da_a2-da_b2]" time="0.023" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[None-da_a3-da_b3]" time="0.017" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[None-da_a4-da_b4]" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[None-da_a5-da_b5]" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[None-da_a6-da_b6]" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[None-da_a7-da_b7]" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[None-da_a8-da_b8]" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[time-da_a0-da_b0]" time="0.021" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[time-da_a1-da_b1]" time="0.025" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[time-da_a2-da_b2]" time="0.021" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[time-da_a3-da_b3]" time="0.017" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[time-da_a4-da_b4]" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[time-da_a5-da_b5]" time="0.017" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[time-da_a6-da_b6]" time="0.017" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[time-da_a7-da_b7]" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[time-da_a8-da_b8]" time="0.017" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[x-da_a0-da_b0]" time="0.023" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[x-da_a1-da_b1]" time="0.027" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[x-da_a2-da_b2]" time="0.023" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[x-da_a3-da_b3]" time="0.017" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[x-da_a4-da_b4]" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[x-da_a5-da_b5]" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[x-da_a6-da_b6]" time="0.019" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[x-da_a7-da_b7]" time="0.017" /><testcase classname="xarray.tests.test_computation" name="test_covcorr_consistency[x-da_a8-da_b8]" time="0.017" /><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[None-da_a0-da_b0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[None-da_a1-da_b1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[None-da_a2-da_b2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[None-da_a3-da_b3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[None-da_a4-da_b4]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[None-da_a5-da_b5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[None-da_a6-da_b6]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[None-da_a7-da_b7]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[None-da_a8-da_b8]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[time-da_a0-da_b0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[time-da_a1-da_b1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[time-da_a2-da_b2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[time-da_a3-da_b3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[time-da_a4-da_b4]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[time-da_a5-da_b5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[time-da_a6-da_b6]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[time-da_a7-da_b7]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[time-da_a8-da_b8]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[x-da_a0-da_b0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[x-da_a1-da_b1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[x-da_a2-da_b2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[x-da_a3-da_b3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[x-da_a4-da_b4]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[x-da_a5-da_b5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[x-da_a6-da_b6]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[x-da_a7-da_b7]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_lazycorr_consistency[x-da_a8-da_b8]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1558: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_corr_dtype_error" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1572: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_autocov[None-da_a0]" time="0.014" /><testcase classname="xarray.tests.test_computation" name="test_autocov[None-da_a1]" time="0.014" /><testcase classname="xarray.tests.test_computation" name="test_autocov[None-da_a2]" time="0.011" /><testcase classname="xarray.tests.test_computation" name="test_autocov[None-da_a3]" time="0.011" /><testcase classname="xarray.tests.test_computation" name="test_autocov[None-da_a4]" time="0.011" /><testcase classname="xarray.tests.test_computation" name="test_autocov[time-da_a0]" time="0.013" /><testcase classname="xarray.tests.test_computation" name="test_autocov[time-da_a1]" time="0.013" /><testcase classname="xarray.tests.test_computation" name="test_autocov[time-da_a2]" time="0.011" /><testcase classname="xarray.tests.test_computation" name="test_autocov[time-da_a3]" time="0.015" /><testcase classname="xarray.tests.test_computation" name="test_autocov[time-da_a4]" time="0.012" /><testcase classname="xarray.tests.test_computation" name="test_autocov[x-da_a0]" time="0.015" /><testcase classname="xarray.tests.test_computation" name="test_autocov[x-da_a1]" time="0.015" /><testcase classname="xarray.tests.test_computation" name="test_autocov[x-da_a2]" time="0.013" /><testcase classname="xarray.tests.test_computation" name="test_autocov[x-da_a3]" time="0.012" /><testcase classname="xarray.tests.test_computation" name="test_autocov[x-da_a4]" time="0.012" /><testcase classname="xarray.tests.test_computation" name="test_autocov[dim3-da_a0]" time="0.014" /><testcase classname="xarray.tests.test_computation" name="test_autocov[dim3-da_a1]" time="0.015" /><testcase classname="xarray.tests.test_computation" name="test_autocov[dim3-da_a2]" time="0.012" /><testcase classname="xarray.tests.test_computation" name="test_autocov[dim3-da_a3]" time="0.011" /><testcase classname="xarray.tests.test_computation" name="test_autocov[dim3-da_a4]" time="0.011" /><testcase classname="xarray.tests.test_computation" name="test_vectorize_dask_new_output_dims" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1597: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_output_wrong_number" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_output_wrong_dims" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_output_wrong_dim_size" time="0.007" /><testcase classname="xarray.tests.test_computation" name="test_dot[True]" time="0.003"><skipped type="pytest.skip" message="test for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1740: test for dask.</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_dot[False]" time="0.022" /><testcase classname="xarray.tests.test_computation" name="test_dot_align_coords[True]" time="0.003"><skipped type="pytest.skip" message="test for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:1872: test for dask.</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_dot_align_coords[False]" time="0.024" /><testcase classname="xarray.tests.test_computation" name="test_where" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_where_attrs" time="0.016" /><testcase classname="xarray.tests.test_computation" name="test_polyval[simple-nodask]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_polyval[simple-dask]" time="0.004"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2081: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval[broadcast-x-nodask]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_polyval[broadcast-x-dask]" time="0.003"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2081: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval[shared-dim-nodask]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_polyval[shared-dim-dask]" time="0.004"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2081: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval[reordered-index-nodask]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_polyval[reordered-index-dask]" time="0.003"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2081: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval[sparse-index-nodask]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_polyval[sparse-index-dask]" time="0.003"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2081: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval[array-dataset-nodask]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_polyval[array-dataset-dask]" time="0.003"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2081: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval[dataset-array-nodask]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_polyval[dataset-array-dask]" time="0.004"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2081: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval[dataset-dataset-nodask]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_polyval[dataset-dataset-dask]" time="0.003"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2081: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval[datetime-nodask]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_polyval[datetime-dask]" time="0.004"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2081: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval[timedelta-nodask]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_polyval[timedelta-dask]" time="0.003"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2081: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval_cftime[1970-01-01-nodask]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2091: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval_cftime[1970-01-01-dask]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2091: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval_cftime[0753-04-21-nodask]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2091: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval_cftime[0753-04-21-dask]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2091: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyval_degree_dim_checks" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[1D-simple-nodask]" time="0.008" /><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[1D-simple-dask]" time="0.004"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2168: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[1D-datetime-nodask]" time="0.008" /><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[1D-datetime-dask]" time="0.004"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2168: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[1D-timedelta-nodask]" time="0.008" /><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[1D-timedelta-dask]" time="0.004"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2168: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[2D-simple-nodask]" time="0.010" /><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[2D-simple-dask]" time="0.004"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2168: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[2D-datetime-nodask]" time="0.011" /><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[2D-datetime-dask]" time="0.004"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2168: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[2D-timedelta-nodask]" time="0.010" /><testcase classname="xarray.tests.test_computation" name="test_polyfit_polyval_integration[2D-timedelta-dask]" time="0.004"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2168: requires dask</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_cross[a0-b0-ae0-be0-dim_0--1-False]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_cross[a0-b0-ae0-be0-dim_0--1-True]" time="0.004"><skipped type="pytest.skip" message="test for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2276: test for dask.</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_cross[a1-b1-ae1-be1-dim_0--1-False]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_cross[a1-b1-ae1-be1-dim_0--1-True]" time="0.004"><skipped type="pytest.skip" message="test for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2276: test for dask.</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_cross[a2-b2-ae2-be2-dim_0--1-False]" time="0.004" /><testcase classname="xarray.tests.test_computation" name="test_cross[a2-b2-ae2-be2-dim_0--1-True]" time="0.004"><skipped type="pytest.skip" message="test for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2276: test for dask.</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_cross[a3-b3-ae3-be3-dim_0--1-False]" time="0.005" /><testcase classname="xarray.tests.test_computation" name="test_cross[a3-b3-ae3-be3-dim_0--1-True]" time="0.004"><skipped type="pytest.skip" message="test for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2276: test for dask.</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_cross[a4-b4-ae4-be4-cartesian-1-False]" time="0.006" /><testcase classname="xarray.tests.test_computation" name="test_cross[a4-b4-ae4-be4-cartesian-1-True]" time="0.004"><skipped type="pytest.skip" message="test for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2276: test for dask.</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_cross[a5-b5-ae5-be5-cartesian--1-False]" time="0.007" /><testcase classname="xarray.tests.test_computation" name="test_cross[a5-b5-ae5-be5-cartesian--1-True]" time="0.004"><skipped type="pytest.skip" message="test for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2276: test for dask.</skipped></testcase><testcase classname="xarray.tests.test_computation" name="test_cross[a6-b6-ae6-be6-cartesian--1-False]" time="0.007" /><testcase classname="xarray.tests.test_computation" name="test_cross[a6-b6-ae6-be6-cartesian--1-True]" time="0.004"><skipped type="pytest.skip" message="test for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_computation.py:2276: test for dask.</skipped></testcase><testcase classname="xarray.tests.test_concat" name="test_concat_compat" time="0.018" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_simple[dim1-different]" time="0.015" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_simple[dim1-minimal]" time="0.015" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_simple[dim2-different]" time="0.016" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_simple[dim2-minimal]" time="0.016" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_merge_variables_present_in_some_datasets" time="0.014" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_2" time="0.018" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_coords_kwarg[dim1-different]" time="0.017" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_coords_kwarg[dim1-minimal]" time="0.017" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_coords_kwarg[dim1-all]" time="0.021" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_coords_kwarg[dim2-different]" time="0.019" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_coords_kwarg[dim2-minimal]" time="0.018" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_coords_kwarg[dim2-all]" time="0.020" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat" time="0.012" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_dim_precedence" time="0.017" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_data_vars_typing" time="0.005" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_data_vars" time="0.008" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_coords" time="0.010" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_constant_index" time="0.010" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_size0" time="0.015" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_autoalign" time="0.008" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_errors" time="0.019" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_join_kwarg" time="0.024" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs0-var2_attrs0-expected_attrs0-False]" time="0.007" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs1-var2_attrs1-expected_attrs1-False]" time="0.006" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs2-var2_attrs2-expected_attrs2-False]" time="0.006" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs3-var2_attrs3-expected_attrs3-True]" time="0.005" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg[drop-var1_attrs4-var2_attrs4-expected_attrs4-False]" time="0.007" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg[identical-var1_attrs5-var2_attrs5-expected_attrs5-False]" time="0.006" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg[identical-var1_attrs6-var2_attrs6-expected_attrs6-True]" time="0.005" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg[override-var1_attrs7-var2_attrs7-expected_attrs7-False]" time="0.007" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg[drop_conflicts-var1_attrs8-var2_attrs8-expected_attrs8-False]" time="0.007" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg[&lt;lambda&gt;-var1_attrs9-var2_attrs9-expected_attrs9-False]" time="0.006" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs10-attrs20-expected_attrs0-False]" time="0.006" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs11-attrs21-expected_attrs1-False]" time="0.007" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs12-attrs22-expected_attrs2-False]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs13-attrs23-expected_attrs3-True]" time="0.007" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg_variables[drop-attrs14-attrs24-expected_attrs4-False]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg_variables[identical-attrs15-attrs25-expected_attrs5-False]" time="0.008" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg_variables[identical-attrs16-attrs26-expected_attrs6-True]" time="0.007" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg_variables[override-attrs17-attrs27-expected_attrs7-False]" time="0.010" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg_variables[drop_conflicts-attrs18-attrs28-expected_attrs8-False]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_combine_attrs_kwarg_variables[&lt;lambda&gt;-attrs19-attrs29-expected_attrs9-False]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_promote_shape" time="0.029" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_do_not_promote" time="0.010" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_dim_is_variable" time="0.007" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_dim_is_dataarray" time="0.007" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_multiindex" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_along_new_dim_multiindex" time="0.007" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_fill_value[fill_value0]" time="0.013" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_fill_value[2]" time="0.014" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_fill_value[2.0]" time="0.012" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_fill_value[fill_value3]" time="0.013" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_str_dtype[x1-str]" time="0.010" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_str_dtype[x1-bytes]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_str_dtype[x2-str]" time="0.010" /><testcase classname="xarray.tests.test_concat.TestConcatDataset" name="test_concat_str_dtype[x2-bytes]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat" time="0.020" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_encoding" time="0.008" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_lazy" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_concat.py:635: requires dask</skipped></testcase><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_fill_value[fill_value0]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_fill_value[2]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_fill_value[2.0]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_join_kwarg" time="0.030" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_combine_attrs_kwarg" time="0.013" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_str_dtype[x1-str]" time="0.010" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_str_dtype[x1-bytes]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_str_dtype[x2-str]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_str_dtype[x2-bytes]" time="0.009" /><testcase classname="xarray.tests.test_concat.TestConcatDataArray" name="test_concat_coord_name" time="0.007" /><testcase classname="xarray.tests.test_concat" name="test_concat_attrs_first_variable[attr20-attr10]" time="0.005" /><testcase classname="xarray.tests.test_concat" name="test_concat_attrs_first_variable[attr20-attr11]" time="0.005" /><testcase classname="xarray.tests.test_concat" name="test_concat_attrs_first_variable[attr20-attr12]" time="0.005" /><testcase classname="xarray.tests.test_concat" name="test_concat_attrs_first_variable[attr21-attr10]" time="0.005" /><testcase classname="xarray.tests.test_concat" name="test_concat_attrs_first_variable[attr21-attr11]" time="0.005" /><testcase classname="xarray.tests.test_concat" name="test_concat_attrs_first_variable[attr21-attr12]" time="0.005" /><testcase classname="xarray.tests.test_concat" name="test_concat_merge_single_non_dim_coord" time="0.011" /><testcase classname="xarray.tests.test_concat" name="test_concat_preserve_coordinate_order" time="0.009" /><testcase classname="xarray.tests.test_concat" name="test_concat_typing_check" time="0.005" /><testcase classname="xarray.tests.test_concat" name="test_concat_not_all_indexes" time="0.005" /><testcase classname="xarray.tests.test_concat" name="test_concat_index_not_same_dim" time="0.005" /><testcase classname="xarray.tests.test_conventions.TestBoolTypeArray" name="test_booltype_array" time="0.004" /><testcase classname="xarray.tests.test_conventions.TestNativeEndiannessArray" name="test" time="0.006" /><testcase classname="xarray.tests.test_conventions" name="test_decode_cf_with_conflicting_fill_missing_value" time="0.005" /><testcase classname="xarray.tests.test_conventions.TestEncodeCFVariable" name="test_incompatible_attributes" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:81: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestEncodeCFVariable" name="test_missing_fillvalue" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:94: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestEncodeCFVariable" name="test_multidimensional_coordinates" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:100: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestEncodeCFVariable" name="test_var_with_coord_attr" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:134: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestEncodeCFVariable" name="test_do_not_overwrite_user_coordinates" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:153: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestEncodeCFVariable" name="test_emit_coordinates_attribute_in_attrs" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:167: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestEncodeCFVariable" name="test_emit_coordinates_attribute_in_encoding" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:184: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestEncodeCFVariable" name="test_string_object_warning" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:201: requires dask</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_dataset" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:211: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_invalid_coordinates" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:229: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_decode_coordinates" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:235: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_0d_int32_encoding" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:243: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_decode_cf_with_multiple_missing_values" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:249: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_decode_cf_with_drop_variables" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:257: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_invalid_time_units_raises_eagerly" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:286: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_dataset_repr_with_netcdf4_datetimes" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:292: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_decode_cf_datetime_transition_to_invalid" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:305: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_decode_cf_with_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:321: requires dask</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_decode_dask_times" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:343: requires dask</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCF" name="test_decode_cf_time_kwargs" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:363: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_zero_dimensional_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:341: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_write_store" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:349: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_test_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:377: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:383: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_dataset_compute" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:416: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_pickle" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:435: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_pickle_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:446: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_dataset_caching" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:459: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_None_variable" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:473: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_object_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:479: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_string_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:514: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_string_encoded_characters" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:519: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_numpy_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:531: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_cftime_datetime_data" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:540: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_timedelta_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:571: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_float64_data" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:577: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_example_1_netcdf" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:582: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_global_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:607: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_coordinates_with_space" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:624: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_boolean_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:631: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_orthogonal_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:638: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_vectorized_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:652: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_vectorized_indexing_negative_step" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:716: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_isel_dataarray" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:758: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_array_type_after_indexing" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:786: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_dropna" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:801: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_ondisk_after_print" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:819: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_bytes_with_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:828: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_string_with_fill_value_nchar" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:840: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_mask_and_scale[create_bad_unsigned_masked_scaled_data-create_bad_encoded_unsigned_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:851: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_grid_mapping_and_bounds_are_not_coordinates_in_file" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:954: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_coordinate_variables_after_dataset_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:964: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:979: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_coordinate_variables_after_iris_roundtrip" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1003: requires iris</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_coordinates_encoding" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1014: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_endian" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1055: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_encoding_kwarg_dates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1116: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_default_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1133: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_explicitly_omit_fill_value" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1156: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_explicitly_omit_fill_value_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1162: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_explicitly_omit_fill_value_in_coord" time="0.001"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1169: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1175: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_encoding_same_dtype" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1182: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_append_write" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1191: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_append_overwrite_values" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1197: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_append_with_invalid_dim_raises" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1208: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_multiindex_not_implemented" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_backends.py:1219: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_roundtrip_coordinates" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:425: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_invalid_dataarray_names_raise" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:429: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_encoding_kwarg" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:433: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestCFEncodedDataStore" name="test_encoding_kwarg_fixed_width_string" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:438: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_conventions.TestDecodeCFVariableWithArrayUnits" name="test_decode_cf_variable_with_array_units" time="0.005" /><testcase classname="xarray.tests.test_conventions" name="test_decode_cf_variable_timedelta64" time="0.004" /><testcase classname="xarray.tests.test_conventions" name="test_decode_cf_variable_datetime64" time="0.004" /><testcase classname="xarray.tests.test_conventions" name="test_decode_cf_variable_cftime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_conventions.py:464: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_conventions" name="test_scalar_units" time="0.004" /><testcase classname="xarray.tests.test_conventions" name="test_decode_cf_error_includes_variable_name" time="0.004" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_repr" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_repr_multiindex" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_repr_multiindex_long" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_properties" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_data_property" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_indexes" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_get_index" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_get_index_size_zero" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_struct_array_dims" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_name" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_dims" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_sizes" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_encoding" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_constructor" time="0.015" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_constructor_invalid" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_constructor_from_self_described" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_constructor_from_self_described_chunked" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_constructor_from_0d" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_constructor_dask_coords" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:455: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_equals_and_identical" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_equals_failures" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_broadcast_equals" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_getitem" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_getitem_dict" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_getitem_coords" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_getitem_dataarray" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_getitem_empty_index" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_setitem" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_setitem_fancy" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_setitem_dataarray" time="0.017" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_contains" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pickle" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:799: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_isel" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_isel_types" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_isel_fancy" time="0.014" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_sel" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_sel_dataarray" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_sel_invalid_slice" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_sel_dataarray_datetime_slice" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_sel_float" time="0.006"><failure message="NotImplementedError: float16 indexes are not supported">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py", line 1016, in test_sel_float
    expected_16 = DataArray(
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 419, in __init__
    coords, dims = _infer_coords_and_dims(data.shape, coords, dims)
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 129, in _infer_coords_and_dims
    coord = as_variable(coord, name=dims[n]).to_index_variable()
  File "/workdir/xarray-2022.12.0/xarray/core/variable.py", line 624, in to_index_variable
    return IndexVariable(
  File "/workdir/xarray-2022.12.0/xarray/core/variable.py", line 2844, in __init__
    self._data = PandasIndexingAdapter(self._data)
  File "/workdir/xarray-2022.12.0/xarray/core/indexing.py", line 1420, in __init__
    self.array = safe_cast_to_index(array)
  File "/workdir/xarray-2022.12.0/xarray/core/indexes.py", line 179, in safe_cast_to_index
    index = pd.Index(np.asarray(array), **kwargs)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/indexes/base.py", line 570, in __new__
    arr = klass._ensure_array(arr, arr.dtype, copy=False)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/indexes/base.py", line 583, in _ensure_array
    raise NotImplementedError("float16 indexes are not supported")
NotImplementedError: float16 indexes are not supported</failure></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_sel_float_multiindex" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_sel_no_index" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_sel_method" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_sel_drop" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_isel_drop" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_head" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_tail" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_thin" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_loc" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_loc_datetime64_value" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_loc_assign" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_loc_assign_dataarray" time="0.015" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_loc_single_boolean" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_loc_dim_name_collision_with_sel_params" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_selection_multiindex" time="0.039" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_selection_multiindex_remove_unused" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_selection_multiindex_from_level" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_virtual_default_coords" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_virtual_time_components" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_coords" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_coords_to_index" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_coord_coords" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reset_coords" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_assign_coords" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_assign_coords_existing_multiindex" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_coords_alignment" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_set_coords_update_index" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_set_coords_multiindex_level" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_coords_replacement_alignment" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_coords_non_string" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_coords_delitem_delete_indexes" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_coords_delitem_multiindex_level" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_broadcast_like" time="0.023" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reindex_like" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reindex_like_no_index" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reindex_regressions" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reindex_method" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reindex_fill_value[fill_value0]" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reindex_fill_value[2]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reindex_fill_value[2.0]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reindex_fill_value[fill_value3]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reindex_str_dtype[str]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reindex_str_dtype[bytes]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_rename" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_rename_dimension_coord_warnings" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_init_value" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_swap_dims" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_expand_dims_error" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_expand_dims" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_expand_dims_with_scalar_coordinate" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_expand_dims_with_greater_dim_size" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_set_index" time="0.017" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reset_index" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reset_index_keep_attrs" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reorder_levels" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_set_xindex" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_dataset_getitem" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_array_interface" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_astype_attrs" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_astype_dtype" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_astype_order" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_astype_subok" time="0.006"><skipped type="pytest.xfail" message="DataArray cannot be backed yet by a subclasses of np.ndarray" /></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_is_null" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_math" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_math_automatic_alignment" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_non_overlapping_dataarrays_return_empty_result" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_empty_dataarrays_return_empty_result" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_inplace_math_basics" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_inplace_math_error" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_inplace_math_automatic_alignment" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_math_name" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_math_with_coords" time="0.023" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_index_math" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_dataset_math" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_stack_unstack" time="0.017" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_stack_unstack_decreasing_coordinate" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_unstack_pandas_consistency" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_stack_nonunique_consistency[1-numpy]" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_stack_nonunique_consistency[1-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:2397: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_unstacked_dataset_raises_value_error" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_transpose" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_squeeze" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_squeeze_drop" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_drop_coordinates" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_drop_multiindex_level" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_drop_all_multiindex_levels" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_drop_index_labels" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_drop_index_positions" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_drop_indexes" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_dropna" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_where" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_where_lambda" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_where_string" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_cumops" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reduce" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reduce_keepdims" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reduce_keepdims_bottleneck" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:2689: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reduce_dtype" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reduce_out" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[None-None-0.25-True]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[None-None-0.25-False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[None-None-0.25-None]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[None-None-q1-True]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[None-None-q1-False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[None-None-q1-None]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[None-None-q2-True]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[None-None-q2-False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[None-None-q2-None]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[0-x-0.25-True]" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[0-x-0.25-False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[0-x-0.25-None]" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[0-x-q1-True]" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[0-x-q1-False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[0-x-q1-None]" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[0-x-q2-True]" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[0-x-q2-False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[0-x-q2-None]" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis2-dim2-0.25-True]" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis2-dim2-0.25-False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis2-dim2-0.25-None]" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis2-dim2-q1-True]" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis2-dim2-q1-False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis2-dim2-q1-None]" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis2-dim2-q2-True]" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis2-dim2-q2-False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis2-dim2-q2-None]" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis3-dim3-0.25-True]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis3-dim3-0.25-False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis3-dim3-0.25-None]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis3-dim3-q1-True]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis3-dim3-q1-False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis3-dim3-q1-None]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis3-dim3-q2-True]" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis3-dim3-q2-False]" time="0.014" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile[axis3-dim3-q2-None]" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile_method[midpoint]" time="0.018" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile_method[lower]" time="0.015" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile_interpolation_deprecated[midpoint]" time="0.023" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_quantile_interpolation_deprecated[lower]" time="0.014" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_reduce_keep_attrs" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_assign_attrs" time="0.015" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_propagate_attrs[&lt;lambda&gt;0]" time="0.018" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_propagate_attrs[&lt;lambda&gt;1]" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_propagate_attrs[absolute]" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_propagate_attrs[abs]" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_fillna" time="0.031" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align_dtype" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align_copy" time="0.186" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align_override" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align_override_error[darrays0]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align_override_error[darrays1]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align_exclude" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align_indexes" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align_without_indexes_exclude" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align_mixed_indexes" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align_without_indexes_errors" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_align_str_dtype" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_broadcast_arrays" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_broadcast_arrays_misaligned" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_broadcast_arrays_nocopy" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_broadcast_arrays_exclude" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_broadcast_coordinates" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_pandas" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_dataframe" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_dataframe_multiindex" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_dataframe_0length" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_pandas_name_matches_coordinate" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_and_from_series" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_from_series_multiindex" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_from_series_sparse" time="0.000"><skipped type="pytest.skip" message="requires sparse">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:3249: requires sparse</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_from_multiindex_series_sparse" time="0.000"><skipped type="pytest.skip" message="requires sparse">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:3262: requires sparse</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_and_from_empty_series" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_series_categorical_index" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_and_from_dict[True]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_and_from_dict[False]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_and_from_dict_with_time_dim" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_and_from_dict_with_nan_nat" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_dict_with_numpy_attrs" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_masked_array" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_and_from_cdms2_classic" time="0.006"><skipped type="pytest.skip" message="could not import 'cdms2': No module named 'cdms2'">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:3446: could not import 'cdms2': No module named 'cdms2'</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_and_from_cdms2_sgrid" time="0.006"><skipped type="pytest.skip" message="could not import 'cdms2': No module named 'cdms2'">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:3488: could not import 'cdms2': No module named 'cdms2'</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_and_from_cdms2_ugrid" time="0.006"><skipped type="pytest.skip" message="could not import 'cdms2': No module named 'cdms2'">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:3514: could not import 'cdms2': No module named 'cdms2'</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_dataset_whole" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_dataset_split" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_to_dataset_retains_keys" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test__title_for_slice" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test__title_for_slice_truncate" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_dataarray_diff_n1" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_coordinate_diff" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_shift[2-int--5]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_shift[2-int-0]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_shift[2-int-1]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_shift[2-int-2]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_shift[fill_value1-float--5]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_shift[fill_value1-float-0]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_shift[fill_value1-float-1]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_shift[fill_value1-float-2]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_roll_coords" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_roll_no_coords" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_copy_with_data" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_copy_coords[True-expected_orig0]" time="0.008"><skipped type="pytest.xfail" message="" /></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_copy_coords[False-expected_orig1]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_real_and_imag" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_setattr_raises" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_full_like" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_dot" time="0.018" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_dot_align_coords" time="0.014" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_matmul" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_matmul_align_coords" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_binary_op_propagate_indexes" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_binary_op_join_setting" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_combine_first" time="0.021" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_sortby" time="0.018" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_rank" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:3962: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_polyfit[True-True]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:3986: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_polyfit[True-False]" time="0.042" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_polyfit[False-True]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:3986: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_polyfit[False-False]" time="0.043" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_constant" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_coords" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[None-minimum]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[None-maximum]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[None-mean]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[None-median]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[3-minimum]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[3-maximum]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[3-mean]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[3-median]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[stat_length2-minimum]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[stat_length2-maximum]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[stat_length2-mean]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[stat_length2-median]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[stat_length3-minimum]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[stat_length3-maximum]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[stat_length3-mean]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_stat_length[stat_length3-median]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_linear_ramp[None]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_linear_ramp[3]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_linear_ramp[end_values2]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_linear_ramp[end_values3]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_reflect[None-reflect]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_reflect[None-symmetric]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_reflect[even-reflect]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_reflect[even-symmetric]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_reflect[odd-reflect]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_pad_reflect[odd-symmetric]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[numpy-python-pandas]" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[numpy-python-python]" time="0.010" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[numpy-None-pandas]" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[numpy-None-python]" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[numpy-numexpr-pandas]" time="0.000"><skipped type="pytest.skip" message="requires numexpr">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4169: requires numexpr</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[numpy-numexpr-python]" time="0.000"><skipped type="pytest.skip" message="requires numexpr">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4169: requires numexpr</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[dask-python-pandas]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4169: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[dask-python-python]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4169: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[dask-None-pandas]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4169: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[dask-None-python]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4169: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[dask-numexpr-pandas]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4169: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_query[dask-numexpr-python]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4169: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_curvefit[True]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4239: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_curvefit[False]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4239: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDataArray" name="test_curvefit_helpers" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_min[int]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_min[float]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_min[nan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_min[obj]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_min[allnan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_min[datetime]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_max[int]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_max[float]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_max[nan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_max[obj]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_max[allnan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_max[datetime]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin[int]" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin[float]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin[nan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin[obj]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin[allnan]" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin[datetime]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax[int]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax[float]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax[nan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax[obj]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax[allnan]" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax[datetime]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[True-int]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4484: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[True-float]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4484: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[True-nan]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4484: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[True-obj]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4484: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[True-allnan]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4484: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[True-datetime]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4484: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[False-int]" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[False-float]" time="0.024" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[False-nan]" time="0.023" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[False-obj]" time="0.027" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[False-allnan]" time="0.023" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmin[False-datetime]" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[True-int]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4597: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[True-float]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4597: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[True-nan]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4597: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[True-obj]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4597: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[True-allnan]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4597: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[True-datetime]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:4597: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[False-int]" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[False-float]" time="0.023" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[False-nan]" time="0.031" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[False-obj]" time="0.029" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[False-allnan]" time="0.024" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_idxmax[False-datetime]" time="0.011" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin_dim[int]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin_dim[float]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin_dim[nan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin_dim[obj]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin_dim[allnan]" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmin_dim[datetime]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax_dim[int]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax_dim[float]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax_dim[nan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax_dim[obj]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax_dim[allnan]" time="0.005" /><testcase classname="xarray.tests.test_dataarray.TestReduce1D" name="test_argmax_dim[datetime]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_min[int]" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_min[nan]" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_min[obj]" time="0.018" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_min[datetime]" time="0.015" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_max[int]" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_max[nan]" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_max[obj]" time="0.018" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_max[datetime]" time="0.015" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmin[int]" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmin[nan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmin[obj]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmin[datetime]" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmax[int]" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmax[nan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmax[obj]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmax[datetime]" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmin[dask-int]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:5055: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmin[dask-nan]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:5055: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmin[dask-obj]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:5055: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmin[dask-datetime]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:5055: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmin[nodask-int]" time="0.028" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmin[nodask-nan]" time="0.042" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmin[nodask-obj]" time="0.046" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmin[nodask-datetime]" time="0.027" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmax[dask-int]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:5196: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmax[dask-nan]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:5196: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmax[dask-obj]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:5196: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmax[dask-datetime]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:5196: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmax[nodask-int]" time="0.027" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmax[nodask-nan]" time="0.041" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmax[nodask-obj]" time="0.047" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_idxmax[nodask-datetime]" time="0.027" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmin_dim[int]" time="0.014" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmin_dim[nan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmin_dim[obj]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmin_dim[datetime]" time="0.014" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmax_dim[int]" time="0.014" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmax_dim[nan]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmax_dim[obj]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestReduce2D" name="test_argmax_dim[datetime]" time="0.013" /><testcase classname="xarray.tests.test_dataarray.TestReduce3D" name="test_argmin_dim[int]" time="0.022" /><testcase classname="xarray.tests.test_dataarray.TestReduce3D" name="test_argmin_dim[nan]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestReduce3D" name="test_argmin_dim[obj]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestReduce3D" name="test_argmin_dim[datetime]" time="0.023" /><testcase classname="xarray.tests.test_dataarray.TestReduce3D" name="test_argmax_dim[int]" time="0.022" /><testcase classname="xarray.tests.test_dataarray.TestReduce3D" name="test_argmax_dim[nan]" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestReduce3D" name="test_argmax_dim[obj]" time="0.008" /><testcase classname="xarray.tests.test_dataarray.TestReduce3D" name="test_argmax_dim[datetime]" time="0.022" /><testcase classname="xarray.tests.test_dataarray.TestReduceND" name="test_idxminmax_dask[3-idxmin]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6093: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduceND" name="test_idxminmax_dask[3-idxmax]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6093: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduceND" name="test_idxminmax_dask[5-idxmin]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6093: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestReduceND" name="test_idxminmax_dask[5-idxmax]" time="0.005"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6093: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray" name="test_isin[numpy-repeating_ints]" time="0.010" /><testcase classname="xarray.tests.test_dataarray" name="test_isin[dask-repeating_ints]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray" name="test_raise_no_warning_for_nan_in_binary_ops" time="0.005" /><testcase classname="xarray.tests.test_dataarray" name="test_no_warning_for_all_nan" time="0.005" /><testcase classname="xarray.tests.test_dataarray" name="test_name_in_masking" time="0.012" /><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_to_and_from_iris" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6147: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_to_and_from_iris_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6217: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_da_name_from_cube[var_name-height-Height-var_name-attrs0]" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6299: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_da_name_from_cube[None-height-Height-height-attrs1]" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6299: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_da_name_from_cube[None-None-Height-Height-attrs2]" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6299: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_da_name_from_cube[None-None-None-None-attrs3]" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6299: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_da_coord_name_from_cube[var_name-height-Height-var_name-attrs0]" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6331: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_da_coord_name_from_cube[None-height-Height-height-attrs1]" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6331: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_da_coord_name_from_cube[None-None-Height-Height-attrs2]" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6331: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_da_coord_name_from_cube[None-None-None-unknown-attrs3]" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6331: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_prevent_duplicate_coord_names" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6368: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_fallback_to_iris_AuxCoord[coord_values0]" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6386: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestIrisConversion" name="test_fallback_to_iris_AuxCoord[coord_values1]" time="0.000"><skipped type="pytest.skip" message="requires iris">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6386: requires iris</skipped></testcase><testcase classname="xarray.tests.test_dataarray" name="test_no_dict" time="0.005" /><testcase classname="xarray.tests.test_dataarray" name="test_subclass_slots" time="0.004" /><testcase classname="xarray.tests.test_dataarray" name="test_weakref" time="0.005" /><testcase classname="xarray.tests.test_dataarray" name="test_delete_coords" time="0.006" /><testcase classname="xarray.tests.test_dataarray" name="test_deepcopy_nested_attrs" time="0.005" /><testcase classname="xarray.tests.test_dataarray" name="test_deepcopy_obj_array" time="0.005" /><testcase classname="xarray.tests.test_dataarray" name="test_deepcopy_recursive" time="0.005" /><testcase classname="xarray.tests.test_dataarray" name="test_clip[1-numpy]" time="0.015" /><testcase classname="xarray.tests.test_dataarray" name="test_clip[1-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6513: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestDropDuplicates" name="test_drop_duplicates_1d[first]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDropDuplicates" name="test_drop_duplicates_1d[last]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDropDuplicates" name="test_drop_duplicates_1d[False]" time="0.006" /><testcase classname="xarray.tests.test_dataarray.TestDropDuplicates" name="test_drop_duplicates_2d" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestNumpyCoercion" name="test_from_numpy" time="0.007" /><testcase classname="xarray.tests.test_dataarray.TestNumpyCoercion" name="test_from_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6600: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestNumpyCoercion" name="test_from_pint" time="0.001"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6609: requires pint</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestNumpyCoercion" name="test_from_sparse" time="0.000"><skipped type="pytest.skip" message="requires sparse">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6625: requires sparse</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestNumpyCoercion" name="test_from_cupy" time="0.000"><skipped type="pytest.skip" message="requires cupy">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6641: requires cupy</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestNumpyCoercion" name="test_from_pint_wrapping_dask" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_dataarray.py:6654: requires pint</skipped></testcase><testcase classname="xarray.tests.test_dataarray.TestStackEllipsis" name="test_result_as_expected" time="0.009" /><testcase classname="xarray.tests.test_dataarray.TestStackEllipsis" name="test_error_on_ellipsis_without_list" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_repr" time="0.020" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_repr_multiindex" time="0.012" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_repr_period_index" time="0.015" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_unicode_data" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_repr_nep18" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_info" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_constructor" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_constructor_invalid_dims" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_constructor_1d" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_constructor_0d" time="0.013" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_constructor_auto_align" time="0.019" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_constructor_pandas_sequence" time="0.012" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_constructor_pandas_single" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_constructor_compat" time="0.012" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_constructor_with_coords" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_properties" time="0.013" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_asarray" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_get_index" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_attr_access" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_variable" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_modify_inplace" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_coords_properties" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_coords_modify" time="0.012" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_update_index" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_coords_setitem_with_new_dimension" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_coords_setitem_multiindex" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_coords_set" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_coords_to_dataset" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_coords_merge" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_coords_merge_mismatched_shape" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_data_vars_properties" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_equals_and_identical" time="0.016" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_equals_failures" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_broadcast_equals" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_attrs" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_chunks_does_not_load_data" time="0.014" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:1004: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dask_is_lazy" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:1061: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_isel" time="0.013" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_isel_fancy" time="0.028" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_isel_dataarray" time="0.020" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_isel_fancy_convert_index_variable" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_sel" time="0.024" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_sel_dataarray" time="0.022" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_sel_dataarray_mindex" time="0.018" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_sel_categorical" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_sel_categorical_error" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_categorical_index" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_categorical_reindex" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_categorical_multiindex" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_sel_drop" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_sel_drop_mindex" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_isel_drop" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_head" time="0.013" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_tail" time="0.013" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_thin" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_sel_fancy" time="0.028" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_sel_method" time="0.013" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_loc" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_selection_multiindex" time="0.038" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_broadcast_like" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_pandas" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_like" time="0.019" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex" time="0.038" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_attrs_encoding" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_warning" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_variables_copied" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_method" time="0.015" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_fill_value[fill_value0]" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_fill_value[2]" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_fill_value[2.0]" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_fill_value[fill_value3]" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_like_fill_value[fill_value0]" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_like_fill_value[2]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_like_fill_value[2.0]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_like_fill_value[fill_value3]" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_str_dtype[str]" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reindex_str_dtype[bytes]" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_fill_value[fill_value0]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_fill_value[2]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_fill_value[2.0]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_fill_value[fill_value3]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align" time="0.029" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_exact" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_override" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_exclude" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_nocopy" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_indexes" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_non_unique" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_str_dtype" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_index_var_attrs[left]" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_align_index_var_attrs[override]" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_broadcast" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_broadcast_nocopy" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_broadcast_exclude" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_broadcast_misaligned" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_broadcast_multi_index" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_variable_indexing" time="0.014" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_drop_variables" time="0.016" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_drop_multiindex_level" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_drop_index_labels" time="0.012" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_drop_labels_by_keyword" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_drop_labels_by_position" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_drop_indexes" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_drop_dims" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_copy" time="0.013" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_copy_with_data" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_copy_coords[True-expected_orig0]" time="0.007"><skipped type="pytest.xfail" message="" /></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_copy_coords[False-expected_orig1]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_copy_with_data_errors" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rename" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rename_old_name" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rename_same_name" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rename_dims" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rename_vars" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rename_dimension_coord" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rename_dimension_coord_warnings" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rename_multiindex" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rename_perserve_attrs_encoding" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rename_does_not_change_CFTimeIndex_type" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:2987: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rename_does_not_change_DatetimeIndex_type" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_swap_dims" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_expand_dims_error" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_expand_dims_int" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_expand_dims_coords" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_expand_dims_existing_scalar_coord" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_isel_expand_dims_roundtrip" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_expand_dims_mixed_int_and_coords" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_expand_dims_kwargs_python36plus" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_set_index" time="0.012" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_set_index_deindexed_coords" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reset_index" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reset_index_keep_attrs" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reset_index_drop_dims" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reset_index_drop_convert[foo-False-dropped0-converted0-renamed0]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reset_index_drop_convert[foo-True-dropped1-converted1-renamed1]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reset_index_drop_convert[x-False-dropped2-converted2-renamed2]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reset_index_drop_convert[x-True-dropped3-converted3-renamed3]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reset_index_drop_convert[arg4-False-dropped4-converted4-renamed4]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reset_index_drop_convert[arg5-True-dropped5-converted5-renamed5]" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reset_index_drop_convert[arg6-False-dropped6-converted6-renamed6]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reset_index_drop_convert[arg7-True-dropped7-converted7-renamed7]" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reorder_levels" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_set_xindex" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_set_xindex_options" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_stack" time="0.021" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_stack_create_index[True-expected_keys0]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_stack_create_index[False-expected_keys1]" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_stack_create_index[None-expected_keys2]" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_stack_multi_index" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_stack_non_dim_coords" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_unstack" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_unstack_errors" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_unstack_fill_value" time="0.018" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_unstack_sparse" time="0.000"><skipped type="pytest.skip" message="requires sparse">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:3573: requires sparse</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_stack_unstack_fast" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_stack_unstack_slow" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_stacked_array_invalid_sample_dims" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_stacked_array_name" time="0.014" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_stacked_array_dtype_dims" time="0.014" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_stacked_array_to_unstacked_dataset" time="0.026" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_stacked_array_to_unstacked_dataset_different_dimension" time="0.017" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_update" time="0.014" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_update_overwrite_coords" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_update_multiindex_level" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_update_auto_align" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_getitem" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_getitem_hashable" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_getitem_multiple_dtype" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_virtual_variables_default_coords" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_virtual_variables_time" time="0.016" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_virtual_variable_same_name" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_time_season" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_slice_virtual_variable" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem" time="0.045" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_pandas" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_auto_align" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_dimension_override" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_with_coords" time="0.022" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_align_new_indexes" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_str_dtype[str]" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_str_dtype[bytes]" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_using_list" time="0.013" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_using_list_errors[var_list0-data0-Different lengths]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_using_list_errors[var_list1-data1-Empty list of variables]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_using_list_errors[var_list2-data2-assign single DataArray]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_assign" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_assign_coords" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_assign_attrs" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_assign_multiindex_level" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_assign_coords_existing_multiindex" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_assign_all_multiindex_coords" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_assign_coords_custom_index_side_effect" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_merge_multiindex_level" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_original_non_unique_index" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_both_non_unique_index" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setitem_multiindex_level" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_delitem" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_delitem_multiindex_level" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_squeeze" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_squeeze_drop" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_array" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_and_from_dataframe" time="0.019" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_from_dataframe_categorical" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_from_dataframe_sparse" time="0.000"><skipped type="pytest.skip" message="requires sparse">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:4430: requires sparse</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_and_from_empty_dataframe" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_from_dataframe_multiindex" time="0.013" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_from_dataframe_unsorted_levels" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_from_dataframe_non_unique_columns" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_convert_dataframe_with_many_types_and_multiindex" time="0.014" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_and_from_dict" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_and_from_dict_with_time_dim" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_and_from_dict_with_nan_nat" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_to_dict_with_numpy_attrs" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_pickle" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_lazy_load" time="0.018" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dropna" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_fillna" time="0.025" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_propagate_attrs[&lt;lambda&gt;0]" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_propagate_attrs[&lt;lambda&gt;1]" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_propagate_attrs[absolute]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_propagate_attrs[abs]" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_where" time="0.014" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_where_other" time="0.015" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_where_drop" time="0.037" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_where_drop_empty" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_where_drop_no_indexes" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce" time="0.013" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_coords" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_mean_uint_dtype" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_bad_dim" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_cumsum" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_cumsum_test_dims[cumsum-dim1-expected0]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_cumsum_test_dims[cumsum-dim2-expected1]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_cumsum_test_dims[cumsum-dim3-expected2]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_cumsum_test_dims[cumsum-time-expected3]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_cumsum_test_dims[cumprod-dim1-expected0]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_cumsum_test_dims[cumprod-dim2-expected1]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_cumsum_test_dims[cumprod-dim3-expected2]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_cumsum_test_dims[cumprod-time-expected3]" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_non_numeric" time="0.016" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_strings" time="0.015" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_dtypes" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_keep_attrs" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_argmin" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_scalars" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_only_one_axis" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_no_axis" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_reduce_keepdims" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile[0.25-True]" time="0.033" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile[0.25-False]" time="0.025" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile[0.25-None]" time="0.033" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile[q1-True]" time="0.035" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile[q1-False]" time="0.028" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile[q1-None]" time="0.035" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile[q2-True]" time="0.035" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile[q2-False]" time="0.028" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile[q2-None]" time="0.035" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile_skipna[True]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile_skipna[False]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile_method[midpoint]" time="0.016" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile_method[lower]" time="0.027" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile_interpolation_deprecated[midpoint]" time="0.021" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_quantile_interpolation_deprecated[lower]" time="0.015" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rank" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:5322: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_rank_use_bottleneck" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_count" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_map" time="0.026" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_apply_pending_deprecated_map" time="0.017" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_number_math" time="0.023" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_unary_ops" time="0.031" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_array_math" time="0.022" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_dataset_math" time="0.022" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_math_auto_align" time="0.021" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_math_errors" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_transpose" time="0.021" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_ellipsis_transpose_different_ordered_vars" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_retains_period_index_on_transpose" time="0.012" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_diff_n1_simple" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_diff_n1_label" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_diff_n1" time="0.012" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_diff_n2" time="0.012" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_diff_exception_n_neg" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_dataset_diff_exception_label_str" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_shift[fill_value0]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_shift[2]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_shift[2.0]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_shift[fill_value3]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_roll_coords" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_roll_no_coords" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_roll_multidim" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_real_and_imag" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_setattr_raises" time="0.005" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_filter_by_attrs" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_binary_op_propagate_indexes" time="0.006" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_binary_op_join_setting" time="0.009" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_full_like" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_combine_first" time="0.018" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_sortby" time="0.030" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_attribute_access" time="0.014" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_ipython_key_completion" time="0.011" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_polyfit_output" time="0.027" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_polyfit_warnings" time="0.018" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_pad" time="0.010" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_astype_attrs" time="0.012" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[numpy-python-pandas]" time="0.032" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[numpy-python-python]" time="0.021" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[numpy-None-pandas]" time="0.031" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[numpy-None-python]" time="0.021" /><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[numpy-numexpr-pandas]" time="0.000"><skipped type="pytest.skip" message="requires numexpr">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6128: requires numexpr</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[numpy-numexpr-python]" time="0.000"><skipped type="pytest.skip" message="requires numexpr">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6128: requires numexpr</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[dask-python-pandas]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6128: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[dask-python-python]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6128: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[dask-None-pandas]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6128: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[dask-None-python]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6128: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[dask-numexpr-pandas]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6128: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDataset" name="test_query[dask-numexpr-python]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6128: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_isin[numpy-test_elements0]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_isin[numpy-test_elements1]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_isin[numpy-test_elements2]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_isin[dask-test_elements0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6261: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_isin[dask-test_elements1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6261: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_isin[dask-test_elements2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6261: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_isin_dataset" time="0.006" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]" time="0.008" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]" time="0.008" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]" time="0.008" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]" time="0.008" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]" time="0.008" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]" time="0.013" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]" time="0.008" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]" time="0.008" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]" time="0.008" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_error_message_on_set_supplied" time="0.006" /><testcase classname="xarray.tests.test_dataset" name="test_constructor_raises_with_invalid_coords[unaligned_coords0]" time="0.005" /><testcase classname="xarray.tests.test_dataset" name="test_dir_expected_attrs[numpy-3]" time="0.010" /><testcase classname="xarray.tests.test_dataset" name="test_dir_expected_attrs[dask-3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6333: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_dir_non_string[1-numpy]" time="0.304" /><testcase classname="xarray.tests.test_dataset" name="test_dir_non_string[1-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6341: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_dir_unicode[1-numpy]" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_dir_unicode[1-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6354: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_raise_no_warning_for_nan_in_binary_ops" time="0.006" /><testcase classname="xarray.tests.test_dataset" name="test_raise_no_warning_assert_close[numpy-2]" time="0.008" /><testcase classname="xarray.tests.test_dataset" name="test_raise_no_warning_assert_close[dask-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6365: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_differentiate[1-True]" time="0.012" /><testcase classname="xarray.tests.test_dataset" name="test_differentiate[1-False]" time="0.012" /><testcase classname="xarray.tests.test_dataset" name="test_differentiate[2-True]" time="0.013" /><testcase classname="xarray.tests.test_dataset" name="test_differentiate[2-False]" time="0.013" /><testcase classname="xarray.tests.test_dataset" name="test_differentiate_datetime[True]" time="0.017" /><testcase classname="xarray.tests.test_dataset" name="test_differentiate_datetime[False]" time="0.017" /><testcase classname="xarray.tests.test_dataset" name="test_differentiate_cftime[True]" time="0.000"><skipped type="pytest.skip" message="Test requires cftime.">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6469: Test requires cftime.</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_differentiate_cftime[False]" time="0.000"><skipped type="pytest.skip" message="Test requires cftime.">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6469: Test requires cftime.</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_integrate[True]" time="0.015" /><testcase classname="xarray.tests.test_dataset" name="test_integrate[False]" time="0.015" /><testcase classname="xarray.tests.test_dataset" name="test_cumulative_integrate[True]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6552: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_cumulative_integrate[False]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6552: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_trapz_datetime[np-True]" time="0.013" /><testcase classname="xarray.tests.test_dataset" name="test_trapz_datetime[np-False]" time="0.012" /><testcase classname="xarray.tests.test_dataset" name="test_trapz_datetime[cftime-True]" time="0.006"><skipped type="pytest.skip" message="Test requires cftime.">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6636: Test requires cftime.</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_trapz_datetime[cftime-False]" time="0.006"><skipped type="pytest.skip" message="Test requires cftime.">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6636: Test requires cftime.</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_no_dict" time="0.006" /><testcase classname="xarray.tests.test_dataset" name="test_subclass_slots" time="0.006" /><testcase classname="xarray.tests.test_dataset" name="test_weakref" time="0.006" /><testcase classname="xarray.tests.test_dataset" name="test_deepcopy_obj_array" time="0.006" /><testcase classname="xarray.tests.test_dataset" name="test_deepcopy_recursive" time="0.006" /><testcase classname="xarray.tests.test_dataset" name="test_clip[1-numpy]" time="0.013" /><testcase classname="xarray.tests.test_dataset" name="test_clip[1-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6728: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestDropDuplicates" name="test_drop_duplicates_1d[first]" time="0.008" /><testcase classname="xarray.tests.test_dataset.TestDropDuplicates" name="test_drop_duplicates_1d[last]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestDropDuplicates" name="test_drop_duplicates_1d[False]" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestNumpyCoercion" name="test_from_numpy" time="0.007" /><testcase classname="xarray.tests.test_dataset.TestNumpyCoercion" name="test_from_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6780: requires dask</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestNumpyCoercion" name="test_from_pint" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6787: requires pint</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestNumpyCoercion" name="test_from_sparse" time="0.000"><skipped type="pytest.skip" message="requires sparse">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6800: requires sparse</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestNumpyCoercion" name="test_from_cupy" time="0.000"><skipped type="pytest.skip" message="requires cupy">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6815: requires cupy</skipped></testcase><testcase classname="xarray.tests.test_dataset.TestNumpyCoercion" name="test_from_pint_wrapping_dask" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_dataset.py:6827: requires pint</skipped></testcase><testcase classname="xarray.tests.test_dataset" name="test_string_keys_typing" time="0.007" /><testcase classname="xarray.tests.test_dataset" name="test_transpose_error" time="0.006" /><testcase classname="xarray.tests.test_deprecation_helpers" name="test_deprecate_positional_args_warns_for_function" time="0.006" /><testcase classname="xarray.tests.test_deprecation_helpers" name="test_deprecate_positional_args_warns_for_class" time="0.006" /><testcase classname="xarray.tests.test_dtypes" name="test_result_type[args0-bool]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_result_type[args1-object_]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_result_type[args2-float64]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_result_type[args3-object_]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_result_type[args4-object_]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_result_type[args5-str_]" time="0.006" /><testcase classname="xarray.tests.test_dtypes" name="test_result_type[args6-object_]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_result_type_scalar" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_result_type_dask_array" time="0.006"><skipped type="pytest.skip" message="could not import 'dask.array': No module named 'dask'">/workdir/xarray-2022.12.0/xarray/tests/test_dtypes.py:33: could not import 'dask.array': No module named 'dask'</skipped></testcase><testcase classname="xarray.tests.test_dtypes" name="test_inf[1.0]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_inf[inf]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_inf[ab]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_inf[(1+1j)]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_inf[True]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[a-expected0]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[b-expected1]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[B-expected2]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[c-expected3]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[D-expected4]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[d-expected5]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[e-expected6]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[F-expected7]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[f-expected8]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[h-expected9]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[H-expected10]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[i-expected11]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[I-expected12]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[l-expected13]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[L-expected14]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[m-expected15]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[M-expected16]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[O-expected17]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[p-expected18]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[P-expected19]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[q-expected20]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[Q-expected21]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[S-expected22]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[U-expected23]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_maybe_promote[V-expected24]" time="0.005" /><testcase classname="xarray.tests.test_dtypes" name="test_nat_types_membership" time="0.005" /><testcase classname="xarray.tests.test_duck_array_ops.TestOps" name="test_first" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops.TestOps" name="test_last" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops.TestOps" name="test_count" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops.TestOps" name="test_where_type_promotion" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops.TestOps" name="test_stack_type_promotion" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops.TestOps" name="test_concatenate_type_promotion" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops.TestOps" name="test_all_nan_arrays" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_cumsum_1d" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_cumsum_2d" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_cumprod_2d" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops.TestArrayNotNullEquiv" name="test_equal[arr10-arr20]" time="0.005" /><testcase classname="xarray.tests.test_duck_array_ops.TestArrayNotNullEquiv" name="test_equal[arr11-arr21]" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops.TestArrayNotNullEquiv" name="test_equal[arr12-arr22]" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops.TestArrayNotNullEquiv" name="test_some_not_equal" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops.TestArrayNotNullEquiv" name="test_wrong_shape" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops.TestArrayNotNullEquiv" name="test_types[val10-val20-val30-null0]" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops.TestArrayNotNullEquiv" name="test_types[1.0-2.0-3.0-nan]" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops.TestArrayNotNullEquiv" name="test_types[foo-bar-baz-None]" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops.TestArrayNotNullEquiv" name="test_types[foo-bar-baz-nan]" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_datetime_mean[False]" time="0.016" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_cftime_datetime_mean[False]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:327: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_cftime_datetime_mean[True]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:327: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_mean_over_non_time_dim_of_dataset_with_dask_backed_cftime_data" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:360: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_cftime_datetime_mean_long_time_period" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:376: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_empty_axis_dtype" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-False-float-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-False-int-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-False-int-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-False-float32-1]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-False-float32-2]" time="0.016" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-False-bool_-1]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-False-bool_-2]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-sum-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-min-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-False-float32-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-max-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-False-bool_-1]" time="0.007"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-False-bool_-2]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-mean-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-False-float-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-False-int-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-False-float32-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-False-float32-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-False-bool_-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-False-var-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-False-float-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-False-float-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-False-int-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-False-int-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-False-float32-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-False-bool_-1]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-False-bool_-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-sum-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-False-int-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-False-bool_-1]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-False-bool_-2]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-min-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-False-bool_-1]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-False-bool_-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-max-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-False-bool_-1]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-False-bool_-2]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-mean-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-False-float-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-False-float-2]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-False-int-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-False-float32-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-False-bool_-1]" time="0.017" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-False-bool_-2]" time="0.023" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-True-float-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-True-float-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-True-int-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[None-True-var-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-False-int-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-False-float32-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-False-bool_-2]" time="0.014" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-sum-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-False-float32-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-False-bool_-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-min-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-False-float32-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-False-bool_-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-max-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-False-float-2]" time="0.015" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-False-float32-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-False-bool_-1]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-False-bool_-2]" time="0.007"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-mean-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-False-float-2]" time="0.017" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-False-int-2]" time="0.016" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-False-float32-2]" time="0.018" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-False-bool_-1]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-False-bool_-2]" time="0.022" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-True-float-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-False-var-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-False-float-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-False-float-2]" time="0.014" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-False-int-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-False-int-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-False-float32-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-False-bool_-1]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-False-bool_-2]" time="0.014" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-sum-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-False-float32-2]" time="0.014" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-False-bool_-1]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-False-bool_-2]" time="0.018" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-min-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-False-float32-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-False-bool_-1]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-False-bool_-2]" time="0.017" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-max-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-False-float-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-False-int-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-False-int-2]" time="0.014" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-False-float32-1]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-False-float32-2]" time="0.015" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-False-bool_-1]" time="0.008"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-False-bool_-2]" time="0.008"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-mean-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="numpy does not support this">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:434: numpy does not support this</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-False-float-2]" time="0.016" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-False-int-2]" time="0.016" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-False-float32-2]" time="0.016" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-False-bool_-1]" time="0.017" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-False-bool_-2]" time="0.024" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_reduce[x-True-var-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:437: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-True-float-1]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-True-float-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-True-int-1]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-True-int-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-True-str-1]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-True-str-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-False-float-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-False-int-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-False-float32-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-False-bool_-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-False-str-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-False-False-str-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-True-str-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-True-str-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-False-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-False-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-False-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-False-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-False-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-False-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-False-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-False-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-False-str-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-min-True-False-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-True-float-1]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-True-float-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-True-int-1]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-True-int-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-True-str-1]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-True-str-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-False-str-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-False-False-str-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-True-str-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-True-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-False-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-False-float-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-False-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-False-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-False-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-False-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-False-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-False-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-False-str-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-False-max-True-False-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-True-float-1]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-True-float-2]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-True-int-1]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-True-int-2]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-True-bool_-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-True-bool_-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-True-str-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-True-str-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-False-float-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-False-int-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-False-float32-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-False-bool_-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-False-str-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-False-False-str-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-True-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-True-float-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-True-int-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-True-int-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-True-str-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-True-str-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-False-float-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-False-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-False-int-1]" time="0.014"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-False-int-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-False-float32-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-False-float32-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-False-bool_-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-False-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-False-str-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-min-True-False-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-True-float-1]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-True-float-2]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-True-int-1]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-True-int-2]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-True-bool_-1]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-True-bool_-2]" time="0.023" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-True-str-1]" time="0.021" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-True-str-2]" time="0.015" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-False-float-1]" time="0.026" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-False-float-2]" time="0.018" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-False-int-1]" time="0.019" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-False-int-2]" time="0.015" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-False-float32-1]" time="0.014" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-False-float32-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-False-bool_-1]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-False-bool_-2]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-False-str-1]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-False-False-str-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-True-float-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-True-float-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-True-int-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-True-float32-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-True-float32-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-True-bool_-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-True-bool_-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-True-str-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-True-str-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-False-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-False-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-False-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-False-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-False-float32-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-False-float32-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-False-bool_-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-False-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-False-str-1]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[x-True-max-True-False-str-2]" time="0.006"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-True-float-1]" time="0.006"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-True-float-2]" time="0.007"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-True-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-True-int-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-True-float32-1]" time="0.006"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-True-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-True-str-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-False-float-1]" time="0.006"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-False-float-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-False-int-1]" time="0.006"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-False-int-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-False-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-False-bool_-1]" time="0.006"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-False-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-False-False-str-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-True-float-1]" time="0.008"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-True-float-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-True-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-True-int-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-True-bool_-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-True-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-True-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-False-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-False-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-False-int-1]" time="0.008"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-False-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-False-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-False-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-False-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-False-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-False-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-min-True-False-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-True-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-True-float-2]" time="0.007"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-True-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-True-int-2]" time="0.007"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-True-float32-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-True-bool_-1]" time="0.006"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-True-bool_-2]" time="0.006"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-True-str-1]" time="0.006"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-True-str-2]" time="0.007"><skipped type="pytest.skip" message="numpy's argmin (not nanargmin) does not handle object-dtype">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:529: numpy's argmin (not nanargmin) does not handle object-dtype</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-False-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-False-int-1]" time="0.006"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-False-float32-1]" time="0.006"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-False-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-False-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-False-False-str-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-True-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-True-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-True-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-True-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-False-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-False-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-False-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-False-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-False-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-False-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-False-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-False-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-False-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-False-max-True-False-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-True-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-True-float-2]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-True-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-True-int-2]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-True-bool_-2]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-True-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-True-str-2]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-False-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-False-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-False-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-False-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-False-bool_-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-False-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-False-False-str-2]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-True-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-True-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-True-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-True-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-False-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-False-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-False-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-False-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-False-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-False-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-False-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-False-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-False-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-min-True-False-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-True-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-True-float-2]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-True-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-True-int-2]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="numpy's nanargmin raises ValueError for all nan axis">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:531: numpy's nanargmin raises ValueError for all nan axis</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-True-bool_-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-True-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-True-str-2]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-False-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-False-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-False-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-False-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-False-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-False-False-str-2]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-True-float-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-True-int-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-True-float32-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-True-bool_-1]" time="0.008"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-True-bool_-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-True-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-True-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-False-float-1]" time="0.008"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-False-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-False-int-1]" time="0.008"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-False-int-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-False-float32-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-False-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-False-bool_-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-False-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-False-str-1]" time="0.007"><skipped type="pytest.skip" message="dim not in this test">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:522: dim not in this test</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max[y-True-max-True-False-str-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:525: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_argmin_max_error" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_isnull[array0]" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_isnull[array1]" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_isnull[array2]" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_isnull[array3]" time="0.006" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_isnull[array4]" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_isnull_with_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:570: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_dask_gradient[1-0]" time="0.000"><skipped type="pytest.skip" message="This is for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:577: This is for dask.</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_dask_gradient[1--1]" time="0.000"><skipped type="pytest.skip" message="This is for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:577: This is for dask.</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_dask_gradient[1-1]" time="0.000"><skipped type="pytest.skip" message="This is for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:577: This is for dask.</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_dask_gradient[2-0]" time="0.000"><skipped type="pytest.skip" message="This is for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:577: This is for dask.</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_dask_gradient[2--1]" time="0.000"><skipped type="pytest.skip" message="This is for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:577: This is for dask.</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_dask_gradient[2-1]" time="0.000"><skipped type="pytest.skip" message="This is for dask.">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:577: This is for dask.</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-False-float-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-False-bool_-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-sum-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-False-float-1]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-False-float-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-None-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-False-float32-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-False-bool_-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-sum-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-False-float32-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-False-bool_-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-True-x-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-False-float32-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-False-bool_-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-sum-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-False-int-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-None-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-False-float-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-False-int-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-False-float32-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-False-bool_-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-sum-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-False-float-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-False-float32-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-False-bool_-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[True-False-x-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-sum-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-False-float32-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-None-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-False-float-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-False-float32-1]" time="0.011" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-False-float32-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-False-bool_-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-sum-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-False-int-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-False-float32-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-False-bool_-2]" time="0.014" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-True-float-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-True-x-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-False-int-2]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-True-float32-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-True-bool_-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-sum-True-bool_-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-False-float-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-False-int-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-False-float32-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-False-float32-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-None-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-False-float32-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-False-bool_-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-True-float32-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-sum-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-False-float-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-False-float32-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-False-bool_-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-True-float32-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[False-False-x-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-False-float-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-False-int-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-False-float32-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-False-bool_-1]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-False-bool_-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-True-float32-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-True-float32-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-sum-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-None-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-False-float-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-False-int-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-False-float32-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-False-bool_-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-sum-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-False-float-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-False-int-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-False-int-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-False-float32-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-False-bool_-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-False-bool_-2]" time="0.014" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-True-x-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-False-float-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-False-float32-2]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-True-int-1]" time="0.016"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-True-float32-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-True-bool_-1]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-sum-True-bool_-2]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-False-float-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-False-int-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-False-float32-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-False-float32-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-False-bool_-2]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-None-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-False-float32-2]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-False-bool_-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-sum-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-False-float-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-False-float-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-False-int-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-False-int-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-False-float32-1]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-False-float32-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-False-bool_-1]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-False-bool_-2]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-True-float-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-True-float-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-True-int-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-True-int-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-True-float32-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-True-float32-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-True-bool_-1]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count[None-False-x-prod-True-bool_-2]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:603: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[sum-False-float]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[sum-False-int]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[sum-False-float32]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[sum-False-bool_]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[sum-True-float]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:622: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[sum-True-int]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:622: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[sum-True-float32]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:622: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[sum-True-bool_]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:622: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[prod-False-float]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[prod-False-int]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[prod-False-float32]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[prod-False-bool_]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[prod-True-float]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:622: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[prod-True-int]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:622: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[prod-True-float32]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:622: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_nd[prod-True-bool_]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:622: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[None-sum-False]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[None-sum-True]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[None-prod-False]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[None-prod-True]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[a-sum-False]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[a-sum-True]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[a-prod-False]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[a-prod-True]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[b-sum-False]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[b-sum-True]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[b-prod-False]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_specific[b-prod-True]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:646: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_dataset[sum]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_min_count_dataset[prod]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-False-False-float]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-False-False-int]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-False-False-float32]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-False-False-bool_]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-False-True-float]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-False-True-int]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-False-True-float32]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-False-True-bool_]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-True-False-float]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-True-False-int]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-True-False-float32]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-True-False-bool_]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-True-True-float]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-True-True-int]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-True-True-float32]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[sum-True-True-bool_]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-False-False-float]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-False-False-int]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-False-False-float32]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-False-False-bool_]" time="0.010" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-False-True-float]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-False-True-int]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-False-True-float32]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-False-True-bool_]" time="0.008"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-True-False-float]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-True-False-int]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-True-False-float32]" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-True-False-bool_]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-True-True-float]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-True-True-int]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-True-True-float32]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_multiple_dims[prod-True-True-bool_]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:698: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_datetime_to_numeric_datetime64[True]" time="0.007"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:709: requires dask</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_datetime_to_numeric_datetime64[False]" time="0.009" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_datetime_to_numeric_cftime[True]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:739: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_datetime_to_numeric_cftime[False]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:739: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_datetime_to_numeric_potential_overflow" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:783: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_py_timedelta_to_float" time="0.008" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_np_timedelta64_to_float[td0-86400000000000.0]" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_np_timedelta64_to_float[td1-1.0]" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_pd_timedelta_to_float[td0-86400000000000.0]" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_pd_timedelta_to_float[td1-1.0]" time="0.007" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_timedelta_to_numeric[td0]" time="0.012" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_timedelta_to_numeric[td1]" time="0.016" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_timedelta_to_numeric[td2]" time="0.020" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_timedelta_to_numeric[1 day]" time="0.013" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_least_squares[True-True]" time="0.010"><skipped type="pytest.skip" message="requires dask and scipy">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:854: requires dask and scipy</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_least_squares[True-False]" time="0.014" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_least_squares[False-True]" time="0.014"><skipped type="pytest.skip" message="requires dask and scipy">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:854: requires dask and scipy</skipped></testcase><testcase classname="xarray.tests.test_duck_array_ops" name="test_least_squares[False-False]" time="0.014" /><testcase classname="xarray.tests.test_duck_array_ops" name="test_push_dask" time="0.001"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_duck_array_ops.py:867: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_extensions.TestAccessor" name="test_register" time="0.015" /><testcase classname="xarray.tests.test_extensions.TestAccessor" name="test_pickle_dataset" time="0.013" /><testcase classname="xarray.tests.test_extensions.TestAccessor" name="test_pickle_dataarray" time="0.011" /><testcase classname="xarray.tests.test_extensions.TestAccessor" name="test_broken_accessor" time="0.014" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_get_indexer_at_least_n_items" time="0.013" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_first_n_items" time="0.015" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_last_n_items" time="0.015" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_last_item" time="0.012" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_format_item" time="0.010" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_format_items" time="0.009" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_format_array_flat" time="0.011" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_pretty_print" time="0.008" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_maybe_truncate" time="0.008" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_format_timestamp_invalid_pandas_format" time="0.009" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_format_timestamp_out_of_bounds" time="0.008" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_attribute_repr" time="0.008" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_index_repr" time="0.010" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_diff_array_repr" time="0.013" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_diff_attrs_repr_with_array" time="0.009" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_diff_dataset_repr" time="0.011" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_array_repr" time="0.009" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_array_repr_variable" time="0.007" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_array_repr_recursive" time="0.008" /><testcase classname="xarray.tests.test_formatting.TestFormatting" name="test_array_scalar_format" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_formatting.py:477: requires dask</skipped></testcase><testcase classname="xarray.tests.test_formatting" name="test_inline_variable_array_repr_custom_repr" time="0.008" /><testcase classname="xarray.tests.test_formatting" name="test_set_numpy_options" time="0.007" /><testcase classname="xarray.tests.test_formatting" name="test_short_numpy_repr" time="0.009" /><testcase classname="xarray.tests.test_formatting" name="test_large_array_repr_length" time="0.011" /><testcase classname="xarray.tests.test_formatting" name="test_repr_file_collapsed" time="0.000"><skipped type="pytest.skip" message="requires netCDF4">/workdir/xarray-2022.12.0/xarray/tests/test_formatting.py:576: requires netCDF4</skipped></testcase><testcase classname="xarray.tests.test_formatting" name="test__mapping_repr[50-40-30]" time="0.059" /><testcase classname="xarray.tests.test_formatting" name="test__mapping_repr[35-40-30]" time="0.056" /><testcase classname="xarray.tests.test_formatting" name="test__mapping_repr[11-40-30]" time="0.045" /><testcase classname="xarray.tests.test_formatting" name="test__mapping_repr[1-40-30]" time="0.041" /><testcase classname="xarray.tests.test_formatting" name="test__mapping_repr_recursive" time="0.008" /><testcase classname="xarray.tests.test_formatting" name="test__element_formatter" time="0.007" /><testcase classname="xarray.tests.test_formatting" name="test_lazy_array_wont_compute" time="0.009" /><testcase classname="xarray.tests.test_formatting_html" name="test_short_data_repr_html" time="0.007" /><testcase classname="xarray.tests.test_formatting_html" name="test_short_data_repr_html_non_str_keys" time="0.015" /><testcase classname="xarray.tests.test_formatting_html" name="test_short_data_repr_html_dask" time="0.008"><skipped type="pytest.skip" message="could not import 'dask': No module named 'dask'">/workdir/xarray-2022.12.0/xarray/tests/test_formatting_html.py:59: could not import 'dask': No module named 'dask'</skipped></testcase><testcase classname="xarray.tests.test_formatting_html" name="test_format_dims_no_dims" time="0.007" /><testcase classname="xarray.tests.test_formatting_html" name="test_format_dims_unsafe_dim_name" time="0.007" /><testcase classname="xarray.tests.test_formatting_html" name="test_format_dims_non_index" time="0.007" /><testcase classname="xarray.tests.test_formatting_html" name="test_format_dims_index" time="0.007" /><testcase classname="xarray.tests.test_formatting_html" name="test_summarize_attrs_with_unsafe_attr_name_and_value" time="0.007" /><testcase classname="xarray.tests.test_formatting_html" name="test_repr_of_dataarray" time="0.009" /><testcase classname="xarray.tests.test_formatting_html" name="test_repr_of_multiindex" time="0.010" /><testcase classname="xarray.tests.test_formatting_html" name="test_repr_of_dataset" time="0.015" /><testcase classname="xarray.tests.test_formatting_html" name="test_repr_text_fallback" time="0.013" /><testcase classname="xarray.tests.test_formatting_html" name="test_variable_repr_html" time="0.007" /><testcase classname="xarray.tests.test_formatting_html" name="test_repr_of_nonstr_dataset" time="0.014" /><testcase classname="xarray.tests.test_formatting_html" name="test_repr_of_nonstr_dataarray" time="0.008" /><testcase classname="xarray.tests.test_formatting_html" name="test_nonstr_variable_repr_html" time="0.008" /><testcase classname="xarray.tests.test_groupby" name="test_consolidate_slices" time="0.007" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dims_property" time="0.012" /><testcase classname="xarray.tests.test_groupby" name="test_multi_index_groupby_map" time="0.029" /><testcase classname="xarray.tests.test_groupby" name="test_reduce_numeric_only" time="0.020" /><testcase classname="xarray.tests.test_groupby" name="test_multi_index_groupby_sum" time="0.033" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_da_datetime" time="0.011" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_duplicate_coordinate_labels" time="0.010" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_input_mutation" time="0.010" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_map_shrink_groups[obj0]" time="0.011" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_map_shrink_groups[obj1]" time="0.011" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_map_change_group_size[obj0]" time="0.011" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_map_change_group_size[obj1]" time="0.011" /><testcase classname="xarray.tests.test_groupby" name="test_da_groupby_map_func_args" time="0.012" /><testcase classname="xarray.tests.test_groupby" name="test_ds_groupby_map_func_args" time="0.012" /><testcase classname="xarray.tests.test_groupby" name="test_da_groupby_empty" time="0.008" /><testcase classname="xarray.tests.test_groupby" name="test_da_groupby_quantile" time="0.088" /><testcase classname="xarray.tests.test_groupby" name="test_ds_groupby_quantile" time="0.089" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_quantile_interpolation_deprecated[False]" time="0.010" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_quantile_interpolation_deprecated[True]" time="0.010" /><testcase classname="xarray.tests.test_groupby" name="test_da_groupby_assign_coords" time="0.018" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_repr[obj0-x]" time="0.009" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_repr[obj0-y]" time="0.008" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_repr[obj0-z]" time="0.009" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_repr[obj0-month]" time="0.009" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_repr[obj1-x]" time="0.008" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_repr[obj1-y]" time="0.008" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_repr[obj1-z]" time="0.009" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_repr[obj1-month]" time="0.009" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_repr_datetime[obj0]" time="0.010" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_repr_datetime[obj1]" time="0.010" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_drops_nans" time="0.080" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_grouping_errors" time="0.027" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_reduce_dimension_error" time="0.015" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_multiple_string_args" time="0.009" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_bins_timeseries" time="0.055" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_none_group_name" time="0.011" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_getitem" time="0.020" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset" time="0.023" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_returns_new_type" time="0.011" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_iter" time="0.017" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_errors" time="0.012" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_reduce" time="0.024" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_math[True]" time="0.029" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_math[False]" time="0.029" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_math_more" time="0.025" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_bins_math[True]" time="0.020" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_bins_math[False]" time="0.017" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_math_nD_group" time="0.048" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_math_virtual" time="0.017" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_math_dim_order" time="0.014" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_nan" time="0.014" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_order" time="0.019" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_fillna" time="0.026" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_where" time="0.016" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_assign" time="0.019" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataset_map_dataarray_func" time="0.011" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_dataarray_map_dataset_func" time="0.010" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_flox_kwargs[kwargs0]" time="0.000"><skipped type="pytest.skip" message="requires flox">/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py:978: requires flox</skipped></testcase><testcase classname="xarray.tests.test_groupby" name="test_groupby_flox_kwargs[kwargs1]" time="0.000"><skipped type="pytest.skip" message="requires flox">/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py:978: requires flox</skipped></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_stack_groupby_unsorted_coord" time="0.020" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_iter" time="0.016" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_properties" time="0.010" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[True-True-x-False]" time="0.012" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[True-True-y-False]" time="0.014" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[True-True-y-True]" time="0.013" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[True-True-abc-False]" time="0.012" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[True-False-x-False]" time="0.016" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[True-False-y-False]" time="0.026" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[True-False-y-True]" time="0.027" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[True-False-abc-False]" time="0.014" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[False-True-x-False]" time="0.012" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[False-True-y-False]" time="0.013" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[False-True-y-True]" time="0.013" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[False-True-abc-False]" time="0.012" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[False-False-x-False]" time="0.015" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[False-False-y-False]" time="0.022" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[False-False-y-True]" time="0.232" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_identity[False-False-abc-False]" time="0.014" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_sum" time="0.024" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_reductions[sum]" time="0.016" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_reductions[mean]" time="0.014" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_reductions[median]" time="0.016" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_count" time="0.012" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_reduce_keep_attrs[None-True]" time="0.014" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_reduce_keep_attrs[None-False]" time="0.016" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_reduce_keep_attrs[True-True]" time="0.014" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_reduce_keep_attrs[True-False]" time="0.015" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_reduce_keep_attrs[False-True]" time="0.014" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_reduce_keep_attrs[False-False]" time="0.016" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_keep_attrs[None]" time="0.014" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_keep_attrs[True]" time="0.014" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_keep_attrs[False]" time="0.018" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_center" time="0.017" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_ndarray" time="0.015" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_map_changes_metadata" time="0.017" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_math_squeeze[True]" time="0.016" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_math_squeeze[False]" time="0.016" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_math" time="0.017" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_math_not_aligned" time="0.024" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_restore_dim_order" time="0.025" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_restore_coord_dims" time="0.030" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_first_and_last" time="0.016" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_multidim" time="0.018" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_multidim_map" time="0.021" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_bins" time="0.041" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_bins_empty" time="0.020" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_bins_multidim" time="0.034" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_bins_sort" time="0.028" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_assign_coords" time="0.014" /><testcase classname="xarray.tests.test_groupby.TestDataArrayGroupBy" name="test_groupby_fillna" time="0.017" /><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_resample" time="0.010"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1479, in test_resample
    actual = array.resample(time="24H").mean()
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_da_resample_func_args" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1504, in test_da_resample_func_args
    actual = da.resample(time="D").map(func, args=(1.0,), arg3=1.0)
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_resample_first" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1511, in test_resample_first
    actual = array.resample(time="1D").first()
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_resample_bad_resample_dim" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1544, in test_resample_bad_resample_dim
    array.resample(**{"__resample_dim__": "1D"}).first()
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_resample_drop_nondim_coords" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py:1546: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_resample_keep_attrs" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1583, in test_resample_keep_attrs
    result = array.resample(time="1D").mean(keep_attrs=True)
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_resample_skipna" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1597, in test_resample_skipna
    result = array.resample(time="1D").mean(skipna=False)
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_upsample" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1606, in test_upsample
    actual = array.resample(time="3H").ffill()
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_upsample_nd" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1641, in test_upsample_nd
    actual = array.resample(time="3H").ffill()
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_upsample_tolerance" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1697, in test_upsample_tolerance
    actual = array.resample(time="6H").ffill(tolerance="12H")
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_upsample_interpolate" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py:1711: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_upsample_interpolate_bug_2197" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py:1748: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_upsample_interpolate_regression_1605" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py:1759: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_upsample_interpolate_dask[True]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py:1770: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_upsample_interpolate_dask[False]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py:1770: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_resample_base" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1818, in test_resample_base
    actual = array.resample(time="24H", base=base).mean()
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_resample_offset" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1827, in test_resample_offset
    actual = array.resample(time="24H", offset=offset).mean()
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDataArrayResample" name="test_resample_origin" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1836, in test_resample_origin
    actual = array.resample(time="24H", origin=origin).mean()
  File "/workdir/xarray-2022.12.0/xarray/core/dataarray.py", line 6651, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDatasetResample" name="test_resample_and_first" time="0.009"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1852, in test_resample_and_first
    actual = ds.resample(time="1D").first(keep_attrs=True)
  File "/workdir/xarray-2022.12.0/xarray/core/dataset.py", line 9201, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDatasetResample" name="test_resample_min_count" time="0.010"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1880, in test_resample_min_count
    actual = ds.resample(time="1D").sum(min_count=1)
  File "/workdir/xarray-2022.12.0/xarray/core/dataset.py", line 9201, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDatasetResample" name="test_resample_by_mean_with_keep_attrs" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1901, in test_resample_by_mean_with_keep_attrs
    resampled_ds = ds.resample(time="1D").mean(keep_attrs=True)
  File "/workdir/xarray-2022.12.0/xarray/core/dataset.py", line 9201, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDatasetResample" name="test_resample_loffset" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1928, in test_resample_loffset
    actual = ds.resample(time="24H", loffset="-12H").mean().bar
  File "/workdir/xarray-2022.12.0/xarray/core/dataset.py", line 9201, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDatasetResample" name="test_resample_by_mean_discarding_attrs" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1945, in test_resample_by_mean_discarding_attrs
    resampled_ds = ds.resample(time="1D").mean(keep_attrs=False)
  File "/workdir/xarray-2022.12.0/xarray/core/dataset.py", line 9201, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDatasetResample" name="test_resample_by_last_discarding_attrs" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 1961, in test_resample_by_last_discarding_attrs
    resampled_ds = ds.resample(time="1D").last(keep_attrs=False)
  File "/workdir/xarray-2022.12.0/xarray/core/dataset.py", line 9201, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDatasetResample" name="test_resample_drop_nondim_coords" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py:1966: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_groupby.TestDatasetResample" name="test_resample_old_api" time="0.008" /><testcase classname="xarray.tests.test_groupby.TestDatasetResample" name="test_resample_ds_da_are_the_same" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 2023, in test_resample_ds_da_are_the_same
    ds.resample(time="M").mean()["foo"], ds.foo.resample(time="M").mean()
  File "/workdir/xarray-2022.12.0/xarray/core/dataset.py", line 9201, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby.TestDatasetResample" name="test_ds_resample_apply_func_args" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 2033, in test_ds_resample_apply_func_args
    actual = ds.resample(time="D").map(func, args=(1.0,), arg3=1.0)
  File "/workdir/xarray-2022.12.0/xarray/core/dataset.py", line 9201, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby" name="test_groupby_cumsum" time="0.014" /><testcase classname="xarray.tests.test_groupby" name="test_groupby_cumprod" time="0.013" /><testcase classname="xarray.tests.test_groupby" name="test_resample_cumsum[cumsum-expected_array0]" time="0.008"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 2101, in test_resample_cumsum
    actual = getattr(ds.resample(time="3M"), method)(dim="time")
  File "/workdir/xarray-2022.12.0/xarray/core/dataset.py", line 9201, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_groupby" name="test_resample_cumsum[cumprod-expected_array1]" time="0.009"><failure message="TypeError: Grouper.__init__() got an unexpected keyword argument 'base'">Traceback (most recent call last):
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 341, in from_call
    result: Optional[TResult] = func()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 152, in _multicall
    return outcome.get_result()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_result.py", line 114, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    raise e
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    item.runtest()
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 1792, in runtest
    self.ihook.pytest_pyfunc_call(pyfuncitem=self)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_hooks.py", line 493, in __call__
    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_manager.py", line 115, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 113, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pluggy/_callers.py", line 77, in _multicall
    res = hook_impl.function(*args)
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    result = testfunction(**testargs)
  File "/workdir/xarray-2022.12.0/xarray/tests/test_groupby.py", line 2101, in test_resample_cumsum
    actual = getattr(ds.resample(time="3M"), method)(dim="time")
  File "/workdir/xarray-2022.12.0/xarray/core/dataset.py", line 9201, in resample
    return self._resample(
  File "/workdir/xarray-2022.12.0/xarray/core/common.py", line 993, in _resample
    grouper = pd.Grouper(
  File "/workdir/xarray-2022.12.0/.tox/cpythonlibtest-unit-test-tests/lib/python3.10/site-packages/pandas/core/resample.py", line 2110, in __init__
    super().__init__(freq=freq, axis=axis, **kwargs)
TypeError: Grouper.__init__() got an unexpected keyword argument 'base'</failure></testcase><testcase classname="xarray.tests.test_indexes" name="test_asarray_tuplesafe" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_from_variables" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_concat" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_stack" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_unstack" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_create_variables" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_to_pandas_index" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_isel" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_sel" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_join" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_reindex_like" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_equals" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_roll" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_rename" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_copy[True]" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_copy[False]" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestIndex" name="test_getitem" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_constructor" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_from_variables" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_from_variables_index_adapter" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_concat_periods" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_concat_str_dtype[str]" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_concat_str_dtype[bytes]" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_concat_empty" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_concat_dim_error" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_create_variables" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_to_pandas_index" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_sel" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_sel_boolean" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_sel_datetime" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_sel_unsorted_datetime_index_raises" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_equals" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_join" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_reindex_like" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_rename" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_copy" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestPandasIndex" name="test_getitem" time="0.007" /><testcase classname="xarray.tests.test_indexes.TestPandasMultiIndex" name="test_constructor" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestPandasMultiIndex" name="test_from_variables" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestPandasMultiIndex" name="test_concat" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestPandasMultiIndex" name="test_stack" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasMultiIndex" name="test_stack_non_unique" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasMultiIndex" name="test_unstack" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestPandasMultiIndex" name="test_create_variables" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestPandasMultiIndex" name="test_sel" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestPandasMultiIndex" name="test_join" time="0.010" /><testcase classname="xarray.tests.test_indexes.TestPandasMultiIndex" name="test_rename" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestPandasMultiIndex" name="test_copy" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_interface[pd_index]" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_interface[xr_index]" time="0.008" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_variables[pd_index]" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_variables[xr_index]" time="0.015" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_dims[pd_index]" time="0.011" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_dims[xr_index]" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_get_unique[pd_index]" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_get_unique[xr_index]" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_is_multi[pd_index]" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_is_multi[xr_index]" time="0.010" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_get_all_coords[pd_index]" time="0.010" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_get_all_coords[xr_index]" time="0.010" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_get_all_dims[pd_index]" time="0.010" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_get_all_dims[xr_index]" time="0.010" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_group_by_index[pd_index]" time="0.010" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_group_by_index[xr_index]" time="0.011" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_to_pandas_indexes[pd_index]" time="0.010" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_to_pandas_indexes[xr_index]" time="0.009" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_copy_indexes[pd_index]" time="0.011" /><testcase classname="xarray.tests.test_indexes.TestIndexes" name="test_copy_indexes[xr_index]" time="0.011" /><testcase classname="xarray.tests.test_indexes" name="test_safe_cast_to_index" time="0.009" /><testcase classname="xarray.tests.test_indexes" name="test_safe_cast_to_index_cftimeindex" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_indexes.py:680: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_indexes" name="test_safe_cast_to_index_datetime_datetime" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_indexes.py:693: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_indexing.TestIndexers" name="test_expanded_indexer" time="0.054" /><testcase classname="xarray.tests.test_indexing.TestIndexers" name="test_stacked_multiindex_min_max" time="0.014" /><testcase classname="xarray.tests.test_indexing.TestIndexers" name="test_group_indexers_by_index" time="0.010" /><testcase classname="xarray.tests.test_indexing.TestIndexers" name="test_map_index_queries" time="0.018" /><testcase classname="xarray.tests.test_indexing.TestIndexers" name="test_read_only_view" time="0.009" /><testcase classname="xarray.tests.test_indexing.TestLazyArray" name="test_slice_slice" time="0.025" /><testcase classname="xarray.tests.test_indexing.TestLazyArray" name="test_lazily_indexed_array" time="0.173" /><testcase classname="xarray.tests.test_indexing.TestLazyArray" name="test_vectorized_lazily_indexed_array" time="0.010" /><testcase classname="xarray.tests.test_indexing.TestCopyOnWriteArray" name="test_setitem" time="0.008" /><testcase classname="xarray.tests.test_indexing.TestCopyOnWriteArray" name="test_sub_array" time="0.008" /><testcase classname="xarray.tests.test_indexing.TestCopyOnWriteArray" name="test_index_scalar" time="0.007" /><testcase classname="xarray.tests.test_indexing.TestMemoryCachedArray" name="test_wrapper" time="0.008" /><testcase classname="xarray.tests.test_indexing.TestMemoryCachedArray" name="test_sub_array" time="0.008" /><testcase classname="xarray.tests.test_indexing.TestMemoryCachedArray" name="test_setitem" time="0.008" /><testcase classname="xarray.tests.test_indexing.TestMemoryCachedArray" name="test_index_scalar" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_base_explicit_indexer" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_invalid_for_all[BasicIndexer]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_invalid_for_all[OuterIndexer]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_invalid_for_all[VectorizedIndexer]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_basic_indexer" time="0.007" /><testcase classname="xarray.tests.test_indexing" name="test_outer_indexer" time="0.007" /><testcase classname="xarray.tests.test_indexing" name="test_vectorized_indexer" time="0.008" /><testcase classname="xarray.tests.test_indexing.Test_vectorized_indexer" name="test_arrayize_vectorized_indexer" time="0.022" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_slice[sl0-100]" time="0.007" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_slice[sl0-99]" time="0.007" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_slice[sl1-100]" time="0.007" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_slice[sl1-99]" time="0.007" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_slice[sl2-100]" time="0.007" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_slice[sl2-99]" time="0.007" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_slice[sl3-100]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_slice[sl3-99]" time="0.007" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-vectorized-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-vectorized-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-outer-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-outer-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-outer_scalar-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-outer_scalar-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-outer_scalar2-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-outer_scalar2-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-outer1vec-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-outer1vec-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-basic-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-basic-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-basic1-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-basic1-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-basic2-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-basic2-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-basic3-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.BASIC-basic3-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-vectorized-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-vectorized-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-outer-shape0]" time="0.009" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-outer-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-outer_scalar-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-outer_scalar-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-outer_scalar2-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-outer_scalar2-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-outer1vec-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-outer1vec-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-basic-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-basic-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-basic1-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-basic1-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-basic2-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-basic2-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-basic3-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER-basic3-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-vectorized-shape0]" time="0.009" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-vectorized-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-outer-shape0]" time="0.009" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-outer-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-outer_scalar-shape0]" time="0.009" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-outer_scalar-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-outer_scalar2-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-outer_scalar2-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-outer1vec-shape0]" time="0.009" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-outer1vec-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-basic-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-basic-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-basic1-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-basic1-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-basic2-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-basic2-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-basic3-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.OUTER_1VECTOR-basic3-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-vectorized-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-vectorized-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-outer-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-outer-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-outer_scalar-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-outer_scalar-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-outer_scalar2-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-outer_scalar2-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-outer1vec-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-outer1vec-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-basic-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-basic-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-basic1-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-basic1-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-basic2-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-basic2-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-basic3-shape0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_decompose_indexers[IndexingSupport.VECTORIZED-basic3-shape1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_implicit_indexing_adapter" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_implicit_indexing_adapter_copy_on_write" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_outer_indexer_consistency_with_broadcast_indexes_vectorized" time="0.092" /><testcase classname="xarray.tests.test_indexing" name="test_create_mask_outer_indexer" time="0.009" /><testcase classname="xarray.tests.test_indexing" name="test_create_mask_vectorized_indexer" time="0.009" /><testcase classname="xarray.tests.test_indexing" name="test_create_mask_basic_indexer" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_create_mask_dask" time="0.008"><skipped type="pytest.skip" message="could not import 'dask.array': No module named 'dask'">/workdir/xarray-2022.12.0/xarray/tests/test_indexing.py:769: could not import 'dask.array': No module named 'dask'</skipped></testcase><testcase classname="xarray.tests.test_indexing" name="test_create_mask_error" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_posify_mask_subindexer[indices0-expected0]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_posify_mask_subindexer[indices1-expected1]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_posify_mask_subindexer[indices2-expected2]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_posify_mask_subindexer[indices3-expected3]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_posify_mask_subindexer[indices4-expected4]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_posify_mask_subindexer[indices5-expected5]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_posify_mask_subindexer[indices6-expected6]" time="0.008" /><testcase classname="xarray.tests.test_indexing" name="test_indexing_1d_object_array" time="0.008" /><testcase classname="xarray.tests.test_interp" name="test_keywargs" time="0.010"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:67: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_1d[no_chunk-x-linear]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:80: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_1d[no_chunk-x-cubic]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:80: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_1d[no_chunk-y-linear]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:80: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_1d[no_chunk-y-cubic]" time="0.009"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:80: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_1d[chunk_y-x-linear]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:80: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_1d[chunk_y-x-cubic]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:80: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_1d[chunk_y-y-linear]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:80: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_1d[chunk_y-y-cubic]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:80: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_1d_methods[cubic]" time="0.007"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:112: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_1d_methods[zero]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:112: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_vectorize[False]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:139: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_vectorize[True]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:139: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_nd[no_chunk]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:217: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_nd[chunked]" time="0.009"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:217: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_nd_nd" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:264: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_nd_with_nan" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:294: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_scalar[no_chunk-linear]" time="0.009"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:326: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_scalar[chunk_y-linear]" time="0.009"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:326: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_nd_scalar[no_chunk-linear]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:357: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_nd_scalar[chunked-linear]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:357: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_nans[True]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:384: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_nans[False]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:384: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_errors[True]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:400: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_errors[False]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:400: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_dtype" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:435: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_sorted" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:452: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_dimension_wo_coords" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:479: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_dataset" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:494: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_dimorder[2D]" time="0.009"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:522: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_dimorder[3D]" time="0.008"><skipped type="pytest.skip" message="scipy is not installed.">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:522: scipy is not installed.</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interp_like" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:566: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_datetime[x_new0-expected0]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:592: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_datetime[x_new1-expected1]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:592: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_datetime[x_new2-expected2]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:592: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_datetime[x_new3-expected3]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:592: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_datetime[x_new4-0.5]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:592: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_datetime[2000-01-01T12:00-0.5]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:592: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_datetime_single_string" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:626: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_cftime" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:639: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_cftime_type_error" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:652: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_cftime_list_of_strings" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:665: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_cftime_single_string" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:686: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_datetime_to_non_datetime_error" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:707: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_cftime_to_non_cftime_error" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:718: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_datetime_interp_noerror" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:728: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_3641" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:747: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_decompose[nearest]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:755: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_decompose[linear]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:755: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-False-quadratic]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-0-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-False-slinear]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[1-1-1-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-0-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-False-linear]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-1-1-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-0-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-1-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-True-nearest]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[2-2-2-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-True-linear]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-False-quadratic]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-0-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-False-slinear]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-1-1-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-False-nearest]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-0-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-False-linear]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-1-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-True-quadratic]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-2-2-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-True-slinear]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-0-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-True-nearest]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-1-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-True-linear]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-False-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-False-quadratic]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-2-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-True-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-True-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-True-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-True-slinear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-True-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-True-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-False-linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-False-nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-False-zero]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-False-slinear]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-False-quadratic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_1d[3-3-3-False-cubic]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:775: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_advanced[linear]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:853: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interpolate_chunk_advanced[nearest]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:853: requires dask</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interp1d_bounds_error" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:900: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_coord_attrs[2.5-True]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:915: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_coord_attrs[x1-True]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:915: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_coord_attrs[x2-False]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:915: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_interp" name="test_interp1d_complex_out_of_bounds" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_interp.py:935: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_merge.TestMergeInternals" name="test_broadcast_dimension_size" time="0.009" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays" time="0.013" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_datasets" time="0.016" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_dataarray_unnamed" time="0.008" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs_default" time="0.012" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs[no_conflicts-var1_attrs0-var2_attrs0-expected_attrs0-False]" time="0.009" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs[no_conflicts-var1_attrs1-var2_attrs1-expected_attrs1-False]" time="0.012" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs[no_conflicts-var1_attrs2-var2_attrs2-expected_attrs2-False]" time="0.020" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs[no_conflicts-var1_attrs3-var2_attrs3-expected_attrs3-True]" time="0.019" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs[drop-var1_attrs4-var2_attrs4-expected_attrs4-False]" time="0.022" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs[identical-var1_attrs5-var2_attrs5-expected_attrs5-False]" time="0.018" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs[identical-var1_attrs6-var2_attrs6-expected_attrs6-True]" time="0.020" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs[override-var1_attrs7-var2_attrs7-expected_attrs7-False]" time="0.030" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs[drop_conflicts-var1_attrs8-var2_attrs8-expected_attrs8-False]" time="0.020" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs[drop_conflicts-var1_attrs9-var2_attrs9-expected_attrs9-False]" time="0.016" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs[&lt;lambda&gt;-var1_attrs10-var2_attrs10-expected_attrs10-False]" time="0.013" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs_variables[no_conflicts-attrs10-attrs20-expected_attrs0-False]" time="0.014" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs_variables[no_conflicts-attrs11-attrs21-expected_attrs1-False]" time="0.013" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs_variables[no_conflicts-attrs12-attrs22-expected_attrs2-False]" time="0.013" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs_variables[no_conflicts-attrs13-attrs23-expected_attrs3-True]" time="0.012" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs_variables[drop-attrs14-attrs24-expected_attrs4-False]" time="0.012" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs_variables[identical-attrs15-attrs25-expected_attrs5-False]" time="0.012" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs_variables[identical-attrs16-attrs26-expected_attrs6-True]" time="0.011" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs_variables[override-attrs17-attrs27-expected_attrs7-False]" time="0.012" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs_variables[drop_conflicts-attrs18-attrs28-expected_attrs8-False]" time="0.013" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_arrays_attrs_variables[&lt;lambda&gt;-attrs19-attrs29-expected_attrs9-False]" time="0.012" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_attrs_override_copy" time="0.009" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_attrs_drop_conflicts" time="0.009" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_attrs_no_conflicts_compat_minimal" time="0.009" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_dicts_simple" time="0.008" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_dicts_dims" time="0.008" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_error" time="0.008" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_alignment_error" time="0.008" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_wrong_input_error" time="0.008" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_no_conflicts_single_var" time="0.024" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_no_conflicts_multi_var" time="0.017" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_no_conflicts_preserve_attrs" time="0.009" /><testcase classname="xarray.tests.test_merge.TestMergeFunction" name="test_merge_no_conflicts_broadcast" time="0.011" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge" time="0.029" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_broadcast_equals" time="0.011" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_compat" time="0.011" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_auto_align" time="0.017" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_fill_value[fill_value0]" time="0.015" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_fill_value[2]" time="0.015" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_fill_value[2.0]" time="0.015" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_fill_value[fill_value3]" time="0.015" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_no_conflicts" time="0.026" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_dataarray" time="0.009" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_combine_attrs[drop-attrs10-attrs20-expected_attrs0-False]" time="0.009" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_combine_attrs[drop_conflicts-attrs11-attrs21-expected_attrs1-False]" time="0.009" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_combine_attrs[override-attrs12-attrs22-expected_attrs2-False]" time="0.009" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_combine_attrs[no_conflicts-attrs13-attrs23-None-True]" time="0.009" /><testcase classname="xarray.tests.test_merge.TestMergeMethod" name="test_merge_combine_attrs[identical-attrs14-attrs24-None-True]" time="0.008" /><testcase classname="xarray.tests.test_missing" name="test_interpolate_pd_compat" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:95: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_scipy_methods_function[barycentric]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:119: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_scipy_methods_function[krog]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:119: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_scipy_methods_function[pchip]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:119: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_scipy_methods_function[spline]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:119: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_scipy_methods_function[akima]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:119: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_pd_compat_non_uniform_index" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:129: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_pd_compat_polynomial" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:157: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_unsorted_index_raises" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:177: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_no_dim_raises" time="0.009" /><testcase classname="xarray.tests.test_missing" name="test_interpolate_invalid_interpolator_raises" time="0.008" /><testcase classname="xarray.tests.test_missing" name="test_interpolate_duplicate_values_raises" time="0.009" /><testcase classname="xarray.tests.test_missing" name="test_interpolate_multiindex_raises" time="0.010" /><testcase classname="xarray.tests.test_missing" name="test_interpolate_2d_coord_raises" time="0.008" /><testcase classname="xarray.tests.test_missing" name="test_interpolate_kwargs" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:226: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_keep_attrs" time="0.009" /><testcase classname="xarray.tests.test_missing" name="test_interpolate" time="0.009" /><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[no nans:linear]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[one nan:linear]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[all nans:linear]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[no nans:nearest]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[one nan:nearest]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[all nans:nearest]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[no nans:zero]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[one nan:zero]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[all nans:zero]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[no nans:slinear]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[one nan:slinear]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[all nans:slinear]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[no nans:quadratic]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[one nan:quadratic]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[all nans:quadratic]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[no nans:cubic]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[one nan:cubic]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[all nans:cubic]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[no nans:polynomial]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[one nan:polynomial]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interp1d_fastrack[all nans:polynomial]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:262: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_limits" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:290: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_methods" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:307: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolators" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:322: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_use_coordinate" time="0.013" /><testcase classname="xarray.tests.test_missing" name="test_interpolate_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:362: requires dask</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_dask_raises_for_invalid_chunk_dim" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:379: requires dask</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_dask_expected_dtype[int-linear]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:388: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_dask_expected_dtype[int-nearest]" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:388: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_ffill" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:402: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_ffill_use_bottleneck" time="0.008" /><testcase classname="xarray.tests.test_missing" name="test_ffill_use_bottleneck_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:417: requires dask</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_bfill_use_bottleneck" time="0.010" /><testcase classname="xarray.tests.test_missing" name="test_bfill_use_bottleneck_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:433: requires dask</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_ffill_bfill_dask[ffill]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:442: requires dask</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_ffill_bfill_dask[bfill]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:442: requires dask</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_ffill_bfill_nonans" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:482: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_ffill_bfill_allnans" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:495: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_ffill_functions" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:508: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_ffill_limit" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:514: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_dataset" time="0.012" /><testcase classname="xarray.tests.test_missing" name="test_ffill_dataset" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:539: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_bfill_dataset" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:544: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_nan_block_lengths[y0-lengths0]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:549: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_nan_block_lengths[y1-lengths1]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:549: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_nan_block_lengths[y2-lengths2]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:549: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_cf_calendar[365_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:567: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_cf_calendar[360_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:567: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_cf_calendar[julian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:567: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_cf_calendar[all_leap]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:567: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_cf_calendar[366_day]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:567: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_cf_calendar[gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:567: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_cf_calendar[proleptic_gregorian]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:567: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_cf_calendar[standard]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:567: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_dt[gregorian-1D]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_dt[proleptic_gregorian-1M]" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:580: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_potential_overflow" time="0.000"><skipped type="pytest.skip" message="requires cftime">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:594: requires cftime</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_strict[index0]" time="0.009" /><testcase classname="xarray.tests.test_missing" name="test_get_clean_interp_index_strict[index1]" time="0.009" /><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_errors" time="0.011" /><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[3H-&lt;lambda&gt;0-date_range]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[3H-&lt;lambda&gt;0-cftime_range]" time="0.001"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[3H-&lt;lambda&gt;1-date_range]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[3H-&lt;lambda&gt;1-cftime_range]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[max_gap1-&lt;lambda&gt;0-date_range]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[max_gap1-&lt;lambda&gt;0-cftime_range]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[max_gap1-&lt;lambda&gt;1-date_range]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[max_gap1-&lt;lambda&gt;1-cftime_range]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[max_gap2-&lt;lambda&gt;0-date_range]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[max_gap2-&lt;lambda&gt;0-cftime_range]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[max_gap2-&lt;lambda&gt;1-date_range]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_max_gap_time_specifier[max_gap2-&lt;lambda&gt;1-cftime_range]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:644: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_2d[None]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:664: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolate_na_2d[coords1]" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:664: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_missing" name="test_interpolators_complex_out_of_bounds" time="0.000"><skipped type="pytest.skip" message="requires scipy">/workdir/xarray-2022.12.0/xarray/tests/test_missing.py:709: requires scipy</skipped></testcase><testcase classname="xarray.tests.test_nputils" name="test_is_contiguous" time="0.009" /><testcase classname="xarray.tests.test_nputils" name="test_vindex" time="0.009" /><testcase classname="xarray.tests.test_options" name="test_invalid_option_raises" time="0.008" /><testcase classname="xarray.tests.test_options" name="test_display_width" time="0.008" /><testcase classname="xarray.tests.test_options" name="test_arithmetic_join" time="0.008" /><testcase classname="xarray.tests.test_options" name="test_enable_cftimeindex" time="0.008" /><testcase classname="xarray.tests.test_options" name="test_file_cache_maxsize" time="0.008" /><testcase classname="xarray.tests.test_options" name="test_keep_attrs" time="0.008" /><testcase classname="xarray.tests.test_options" name="test_nested_options" time="0.008" /><testcase classname="xarray.tests.test_options" name="test_display_style" time="0.009" /><testcase classname="xarray.tests.test_options.TestAttrRetention" name="test_dataset_attr_retention" time="0.013" /><testcase classname="xarray.tests.test_options.TestAttrRetention" name="test_dataarray_attr_retention" time="0.012" /><testcase classname="xarray.tests.test_options.TestAttrRetention" name="test_groupby_attr_retention" time="0.014" /><testcase classname="xarray.tests.test_options.TestAttrRetention" name="test_concat_attr_retention" time="0.019" /><testcase classname="xarray.tests.test_options.TestAttrRetention" name="test_merge_attr_retention" time="0.016" /><testcase classname="xarray.tests.test_options.TestAttrRetention" name="test_display_style_text" time="0.014" /><testcase classname="xarray.tests.test_options.TestAttrRetention" name="test_display_style_html" time="0.019" /><testcase classname="xarray.tests.test_options.TestAttrRetention" name="test_display_dataarray_style_text" time="0.013" /><testcase classname="xarray.tests.test_options.TestAttrRetention" name="test_display_dataarray_style_html" time="0.014" /><testcase classname="xarray.tests.test_options" name="test_get_options_retention[left]" time="0.008" /><testcase classname="xarray.tests.test_options" name="test_get_options_retention[exact]" time="0.008" /><testcase classname="xarray.tests.test_plot.TestPlot" name="test_accessor" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:178: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_label_from_attrs" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:184: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test1d" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:214: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_1d_bool" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:223: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_1d_x_y_kw" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:226: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_multiindex_level_as_coord" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:246: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_infer_line_data" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:263: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_line_plot_along_1d_coord" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:282: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_line_plot_wrong_hue" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:299: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_2d_line" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:308: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_2d_line_accepts_legend_kw" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:321: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_2d_line_accepts_x_kw" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:330: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_2d_line_accepts_hue_kw" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:337: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_2d_coords_line_plot" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:344: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_2d_coord_line_plot_coords_transpose_invariant" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:365: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_2d_before_squeeze" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:376: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test2d_uniform_calls_imshow" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:380: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test2d_nonuniform_calls_contourf" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:383: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test2d_1d_2d_coordinates_contourf" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:389: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test2d_1d_2d_coordinates_pcolormesh" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:401: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_contourf_cmap_set" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:429: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_contourf_cmap_set_with_bad_under_over" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:456: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test3d" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:492: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_can_pass_in_axis" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:495: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test__infer_interval_breaks" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:498: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test__infer_interval_breaks_logscale" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:523: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test__infer_interval_breaks_logscale_invalid_coords" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:543: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_geo_data" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:556: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_datetime_dimension" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:588: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_convenient_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:599: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_subplot_kws" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:617: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_plot_size" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:634: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_convenient_facetgrid_4d" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:660: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_coord_with_interval" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:674: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_coord_with_interval_x" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:679: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_coord_with_interval_y" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:684: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_coord_with_interval_xy" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:689: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_labels_with_units_with_interval[x]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:694: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot" name="test_labels_with_units_with_interval[y]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:694: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_xlabel_is_index_name" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:716: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_no_label_name_on_x_axis" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:720: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_no_label_name_on_y_axis" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:724: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_ylabel_is_data_name" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:728: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_xlabel_is_data_name" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:734: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_format_string" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:740: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_can_pass_in_axis" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:743: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_nonnumeric_index" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:746: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_primitive_returned" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:750: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_plot_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:754: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_x_ticks_are_rotated_for_time" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:759: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_xyincrease_false_changes_axes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:766: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_slice_in_title" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:773: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlot1D" name="test_slice_in_title_single_item_array" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:779: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_step" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:792: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_step_with_where[pre]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:796: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_step_with_where[post]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:796: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_step_with_where[mid]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:796: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_step_with_hue" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:801: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_step_with_hue_and_where[pre]" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:805: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_step_with_hue_and_where[post]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:805: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_step_with_hue_and_where[mid]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:805: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_drawstyle_steps" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:810: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_drawstyle_steps_with_where[pre]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:814: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_drawstyle_steps_with_where[post]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:814: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_drawstyle_steps_with_where[mid]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:814: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_coord_with_interval_step" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:819: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_coord_with_interval_step_x" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:825: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_coord_with_interval_step_y" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:831: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotStep" name="test_coord_with_interval_step_x_and_y_raises_valueeerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:837: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotHistogram" name="test_3d_array" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:852: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotHistogram" name="test_xlabel_uses_name" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:855: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotHistogram" name="test_title_is_histogram" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:861: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotHistogram" name="test_can_pass_in_kwargs" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:866: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotHistogram" name="test_can_pass_in_axis" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:871: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotHistogram" name="test_primitive_returned" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:874: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotHistogram" name="test_plot_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:878: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPlotHistogram" name="test_hist_coord_with_interval" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:883: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDetermineCmapParams" name="test_robust" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:897: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDetermineCmapParams" name="test_center" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:906: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDetermineCmapParams" name="test_cmap_sequential_option" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:914: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDetermineCmapParams" name="test_cmap_sequential_explicit_option" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:919: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDetermineCmapParams" name="test_cmap_divergent_option" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:924: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDetermineCmapParams" name="test_nan_inf_are_ignored" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:929: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDetermineCmapParams" name="test_integer_levels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:938: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDetermineCmapParams" name="test_list_levels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:978: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDetermineCmapParams" name="test_divergentcontrol" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:995: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDetermineCmapParams" name="test_norm_sets_vmin_vmax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1073: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDiscreteColorMap" name="test_recover_from_seaborn_jet_exception" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1116: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDiscreteColorMap" name="test_build_discrete_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1122: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDiscreteColorMap" name="test_discrete_colormap_list_of_levels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1140: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDiscreteColorMap" name="test_discrete_colormap_int_levels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1159: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDiscreteColorMap" name="test_discrete_colormap_list_levels_and_vmin_or_vmax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1186: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDiscreteColorMap" name="test_discrete_colormap_provided_boundary_norm" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1192: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_label_names" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1239: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_1d_raises_valueerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1244: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_bool" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1248: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_complex_raises_typeerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1251: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_3d_raises_valueerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1255: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_nonnumeric_index" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1262: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_multiindex_raises_typeerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1271: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_can_pass_in_axis" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1281: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_xyincrease_defaults" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1284: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_xyincrease_false_changes_axes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1300: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_xyincrease_true_changes_axes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1307: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_x_ticks_are_rotated_for_time" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1314: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_plot_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1321: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_can_plot_all_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1330: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_can_plot_axis_size_one" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1336: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_disallows_rgb_arg" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1341: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_viridis_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1346: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_default_cmap" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1350: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_seaborn_palette_as_cmap" time="0.000"><skipped type="pytest.skip" message="requires seaborn">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1357: requires seaborn</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_can_change_default_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1362: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_diverging_color_limits" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1366: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_xy_strings" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1371: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_positional_coord_string" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1377: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_bad_x_string_exception" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1388: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_coord_strings" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1402: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_non_linked_coords" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1407: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_non_linked_coords_transpose" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1419: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_multiindex_level_as_coord" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1433: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_default_title" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1454: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_colorbar_default_label" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1462: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_no_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1466: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_colorbar_kwargs" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1478: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_verbose_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1529: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_2d_function_and_method_signature_same" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1537: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_convenient_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1543: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_convenient_facetgrid_4d" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1575: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_facetgrid_map_only_appends_mappables" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1585: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_facetgrid_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1598: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_facetgrid_cbar_kwargs" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1608: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_facetgrid_no_cbar_ax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1624: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_cmap_and_color_both" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1630: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_2d_coord_with_interval" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1634: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_colormap_error_norm_and_vmin_vmax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1642: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_contourf_called" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1657: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_primitive_artist_returned" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1663: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_extend" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1667: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_2d_coord_names" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1685: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContourf" name="test_levels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1693: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_label_names" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1239: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_1d_raises_valueerror" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1244: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_bool" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1248: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_complex_raises_typeerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1251: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_3d_raises_valueerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1255: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_nonnumeric_index" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1262: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_multiindex_raises_typeerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1271: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_can_pass_in_axis" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1281: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_xyincrease_defaults" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1284: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_xyincrease_false_changes_axes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1300: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_xyincrease_true_changes_axes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1307: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_x_ticks_are_rotated_for_time" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1314: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_plot_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1321: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_can_plot_all_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1330: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_can_plot_axis_size_one" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1336: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_disallows_rgb_arg" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1341: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_viridis_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1346: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_default_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1350: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_seaborn_palette_as_cmap" time="0.000"><skipped type="pytest.skip" message="requires seaborn">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1357: requires seaborn</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_can_change_default_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1362: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_diverging_color_limits" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1366: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_xy_strings" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1371: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_positional_coord_string" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1377: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_bad_x_string_exception" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1388: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_coord_strings" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1402: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_non_linked_coords" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1407: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_non_linked_coords_transpose" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1419: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_multiindex_level_as_coord" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1433: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_default_title" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1454: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_colorbar_default_label" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1462: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_no_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1466: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_colorbar_kwargs" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1478: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_verbose_facetgrid" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1529: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_2d_function_and_method_signature_same" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1537: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_convenient_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1543: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_convenient_facetgrid_4d" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1575: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_facetgrid_map_only_appends_mappables" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1585: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_facetgrid_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1598: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_facetgrid_cbar_kwargs" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1608: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_facetgrid_no_cbar_ax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1624: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_2d_coord_with_interval" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1634: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_colormap_error_norm_and_vmin_vmax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1642: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_colors" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1713: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_colors_np_levels" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1730: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_cmap_and_color_both" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1740: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_2d_coord_names" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1748: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestContour" name="test_single_level" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1756: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_label_names" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1239: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_1d_raises_valueerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1244: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_bool" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1248: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_complex_raises_typeerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1251: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_3d_raises_valueerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1255: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_nonnumeric_index" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1262: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_multiindex_raises_typeerror" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1271: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_can_pass_in_axis" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1281: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_xyincrease_defaults" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1284: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_xyincrease_false_changes_axes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1300: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_xyincrease_true_changes_axes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1307: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_x_ticks_are_rotated_for_time" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1314: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_plot_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1321: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_can_plot_all_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1330: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_can_plot_axis_size_one" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1336: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_disallows_rgb_arg" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1341: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_viridis_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1346: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_default_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1350: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_seaborn_palette_as_cmap" time="0.000"><skipped type="pytest.skip" message="requires seaborn">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1357: requires seaborn</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_can_change_default_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1362: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_diverging_color_limits" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1366: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_xy_strings" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1371: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_positional_coord_string" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1377: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_bad_x_string_exception" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1388: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_coord_strings" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1402: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_non_linked_coords" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1407: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_non_linked_coords_transpose" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1419: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_multiindex_level_as_coord" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1433: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_default_title" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1454: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_colorbar_default_label" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1462: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_no_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1466: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_colorbar_kwargs" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1478: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_verbose_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1529: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_2d_function_and_method_signature_same" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1537: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_convenient_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1543: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_convenient_facetgrid_4d" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1575: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_facetgrid_map_only_appends_mappables" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1585: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_facetgrid_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1598: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_facetgrid_cbar_kwargs" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1608: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_facetgrid_no_cbar_ax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1624: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_cmap_and_color_both" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1630: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_2d_coord_with_interval" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1634: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_colormap_error_norm_and_vmin_vmax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1642: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_primitive_artist_returned" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1767: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_everything_plotted" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1771: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_2d_coord_names" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1775: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormesh" name="test_dont_infer_interval_breaks_for_cartopy" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1783: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestPcolormeshLogscale" name="test_interval_breaks_logspace" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1815: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_label_names" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1239: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_1d_raises_valueerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1244: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_bool" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1248: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_complex_raises_typeerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1251: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_3d_raises_valueerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1255: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_nonnumeric_index" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1262: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_multiindex_raises_typeerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1271: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_can_pass_in_axis" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1281: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_xyincrease_defaults" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1284: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_xyincrease_false_changes_axes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1300: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_xyincrease_true_changes_axes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1307: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_x_ticks_are_rotated_for_time" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1314: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_plot_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1321: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_can_plot_all_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1330: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_can_plot_axis_size_one" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1336: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_disallows_rgb_arg" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1341: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_viridis_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1346: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_default_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1350: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_seaborn_palette_as_cmap" time="0.000"><skipped type="pytest.skip" message="requires seaborn">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1357: requires seaborn</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_can_change_default_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1362: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_diverging_color_limits" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1366: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_xy_strings" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1371: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_positional_coord_string" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1377: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_bad_x_string_exception" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1388: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_coord_strings" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1402: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_non_linked_coords" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1407: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_non_linked_coords_transpose" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1419: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_multiindex_level_as_coord" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1433: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_default_title" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1454: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_colorbar_default_label" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1462: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_no_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1466: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_colorbar_kwargs" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1478: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_verbose_facetgrid" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1529: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_2d_function_and_method_signature_same" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1537: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_convenient_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1543: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_convenient_facetgrid_4d" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1575: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_facetgrid_map_only_appends_mappables" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1585: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_facetgrid_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1598: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_facetgrid_cbar_kwargs" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1608: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_facetgrid_no_cbar_ax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1624: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_cmap_and_color_both" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1630: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_2d_coord_with_interval" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1634: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_colormap_error_norm_and_vmin_vmax" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1642: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_imshow_called" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1845: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_xy_pixel_centered" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1851: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_default_aspect_is_auto" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1856: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_cannot_change_mpl_aspect" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1860: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_primitive_artist_returned" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1871: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_seaborn_palette_needs_levels" time="0.000"><skipped type="pytest.skip" message="requires seaborn">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1876: requires seaborn</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_2d_coord_names" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1882: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_plot_rgb_image" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1886: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_plot_rgb_image_explicit" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1892: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_plot_rgb_faceted" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1898: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_plot_rgba_image_transposed" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1904: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_warns_ambigious_dim" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1910: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_rgb_errors_too_many_dims" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1918: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_rgb_errors_bad_dim_sizes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1923: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_normalize_rgb_imshow[-1-None-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_normalize_rgb_imshow[None-2-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_normalize_rgb_imshow[-1-1-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_normalize_rgb_imshow[0-0-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_normalize_rgb_imshow[0-None-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_normalize_rgb_imshow[None--1-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_normalize_rgb_one_arg_error" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1946: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_imshow_rgb_values_in_valid_range" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1956: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_regression_rgb_imshow_dim_size_one" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1963: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestImshow" name="test_origin_overrides_xyincrease" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1969: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_label_names" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1239: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_1d_raises_valueerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1244: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_bool" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1248: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_complex_raises_typeerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1251: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_3d_raises_valueerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1255: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_nonnumeric_index" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1262: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_multiindex_raises_typeerror" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1271: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_xyincrease_defaults" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1284: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_x_ticks_are_rotated_for_time" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1314: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_plot_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1321: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_can_plot_all_nans" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1330: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_can_plot_axis_size_one" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1336: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_disallows_rgb_arg" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1341: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_xy_strings" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1371: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_positional_coord_string" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1377: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_bad_x_string_exception" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1388: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_coord_strings" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1402: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_non_linked_coords" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1407: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_non_linked_coords_transpose" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1419: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_multiindex_level_as_coord" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1433: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_default_title" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1454: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_no_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1466: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_verbose_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1529: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_2d_function_and_method_signature_same" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1537: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_convenient_facetgrid_4d" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1575: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_facetgrid_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1598: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_facetgrid_cbar_kwargs" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1608: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_facetgrid_no_cbar_ax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1624: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_2d_coord_with_interval" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1634: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_colormap_error_norm_and_vmin_vmax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1642: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_primitive_artist_returned" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1987: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_2d_coord_names" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:1991: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_xyincrease_false_changes_axes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2000: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_xyincrease_true_changes_axes" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2004: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_can_pass_in_axis" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2008: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_default_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2011: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_diverging_color_limits" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2015: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_colorbar_kwargs" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2019: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_cmap_and_color_both" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2023: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_seaborn_palette_as_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2027: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_convenient_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2034: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_viridis_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2054: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_can_change_default_cmap" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2057: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_colorbar_default_label" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2060: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestSurface" name="test_facetgrid_map_only_appends_mappables" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2063: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_no_args" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2074: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_names_appear_somewhere" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2085: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_text_not_super_long" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2097: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_colorbar" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2109: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_empty_cell" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2123: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_norow_nocol_error" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2132: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_groups" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2137: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_float_index" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2146: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_nonunique_index_error" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2152: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_robust" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2158: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_can_set_vmin_vmax" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2180: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_vmin_vmax_equal" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2190: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_can_set_norm" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2197: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_figure_size" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2205: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_num_ticks" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2228: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_map" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2243: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_map_dataset" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2250: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_set_axis_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2269: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_facetgrid_colorbar" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2277: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid" name="test_facetgrid_polar" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2291: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid4d" name="test_title_kwargs" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2314: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetGrid4d" name="test_default_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2326: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetedLinePlotsLegend" name="test_legend_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2360: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetedLinePlots" name="test_facetgrid_shape" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2384: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetedLinePlots" name="test_unnamed_args" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2391: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetedLinePlots" name="test_default_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2400: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetedLinePlots" name="test_test_empty_cell" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2414: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetedLinePlots" name="test_set_axis_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2424: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetedLinePlots" name="test_axes_in_faceted_plot" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2432: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetedLinePlots" name="test_figsize_and_size" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2436: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestFacetedLinePlots" name="test_wrong_num_of_dimensions" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2440: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetQuiverPlots" name="test_quiver" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2468: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetQuiverPlots" name="test_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2480: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetQuiverPlots" name="test_add_guide[None-None-False-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2506: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetQuiverPlots" name="test_add_guide[False-None-False-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2506: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetQuiverPlots" name="test_add_guide[True-None-False-True]" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2506: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetQuiverPlots" name="test_add_guide[True-continuous-False-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2506: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetStreamplotPlots" name="test_streamline" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2552: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetStreamplotPlots" name="test_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2564: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_accessor" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2607: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_add_guide[None-None-False-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2613: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_add_guide[False-None-False-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2613: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_add_guide[True-None-False-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2613: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_add_guide[True-continuous-False-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2613: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_add_guide[False-discrete-False-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2613: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_add_guide[True-discrete-True-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2613: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_facetgrid_shape" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2644: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_default_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2651: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_axes_in_faceted_plot" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2666: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_figsize_and_size" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2670: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_bad_args[bad_y]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2674: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_bad_args[bad_x]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2674: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_datetime_hue[discrete]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2699: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_datetime_hue[continuous]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2699: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_facetgrid_hue_style[discrete]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2709: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_facetgrid_hue_style[continuous]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2709: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_scatter[A-B-x-col]" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2718: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_scatter[x-row-A-B]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2718: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_non_numeric_legend" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2730: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_legend_labels" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2737: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_legend_labels_facetgrid" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2752: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatasetScatterPlots" name="test_add_legend_by_default" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2767: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatetimePlot" name="test_datetime_line_plot" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2786: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatetimePlot" name="test_datetime_units" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2790: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatetimePlot" name="test_datetime_plot1d" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2799: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestDatetimePlot" name="test_datetime_plot2d" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2808: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestCFDatetimePlot" name="test_cfdatetime_line_plot" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2845: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestCFDatetimePlot" name="test_cfdatetime_pcolormesh_plot" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2848: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestCFDatetimePlot" name="test_cfdatetime_contour_plot" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2851: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestNcAxisNotInstalled" name="test_ncaxis_notinstalled_line_plot" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2873: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xincrease_kwarg[1-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2910: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xincrease_kwarg[1-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2910: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xincrease_kwarg[2-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2910: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xincrease_kwarg[2-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2910: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xincrease_kwarg[3-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2910: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xincrease_kwarg[3-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2910: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yincrease_kwarg[1-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2916: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yincrease_kwarg[1-False]" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2916: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yincrease_kwarg[2-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2916: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yincrease_kwarg[2-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2916: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yincrease_kwarg[3-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2916: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yincrease_kwarg[3-False]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2916: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xscale_kwarg[1-linear]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2922: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xscale_kwarg[1-logit]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2922: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xscale_kwarg[1-symlog]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2922: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xscale_kwarg[2-linear]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2922: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xscale_kwarg[2-logit]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2922: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xscale_kwarg[2-symlog]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2922: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xscale_kwarg[3-linear]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2922: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xscale_kwarg[3-logit]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2922: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xscale_kwarg[3-symlog]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2922: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yscale_kwarg[1-linear]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yscale_kwarg[1-logit]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yscale_kwarg[1-symlog]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yscale_kwarg[2-linear]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yscale_kwarg[2-logit]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yscale_kwarg[2-symlog]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yscale_kwarg[3-linear]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yscale_kwarg[3-logit]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yscale_kwarg[3-symlog]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2928: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xscale_log_kwarg[1]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2934: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xscale_log_kwarg[2]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2934: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yscale_log_kwarg[1]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2940: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yscale_log_kwarg[2]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2940: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xlim_kwarg[1]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2946: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xlim_kwarg[2]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2946: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xlim_kwarg[3]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2946: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_ylim_kwarg[1]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2952: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_ylim_kwarg[2]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2952: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_ylim_kwarg[3]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2952: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xticks_kwarg[1]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2958: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xticks_kwarg[2]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2958: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_xticks_kwarg[3]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2958: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yticks_kwarg[1]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2964: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yticks_kwarg[2]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2964: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot.TestAxesKwargs" name="test_yticks_kwarg[3]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2964: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_transposed_nondim_coord[pcolormesh]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2971: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_transposed_nondim_coord[contourf]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2971: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_transposed_nondim_coord[contour]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2971: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_transposes_properly[pcolormesh]" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2989: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_transposes_properly[imshow]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:2989: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_facetgrid_single_contour" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3002: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis_raises" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3015: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis[figsize]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3040: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis[figsize_kwargs]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3040: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis[size]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3040: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis[size_kwargs]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3040: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis[size+aspect]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3040: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis[auto_aspect]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3040: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis[equal_aspect]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3040: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis[ax]" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3040: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis[default]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3040: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis[default_kwargs]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3040: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis_cartopy[figsize]" time="0.000"><skipped type="pytest.skip" message="requires cartopy">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3073: requires cartopy</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis_cartopy[size]" time="0.000"><skipped type="pytest.skip" message="requires cartopy">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3073: requires cartopy</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis_cartopy[size+aspect]" time="0.000"><skipped type="pytest.skip" message="requires cartopy">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3073: requires cartopy</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis_cartopy[default]" time="0.000"><skipped type="pytest.skip" message="requires cartopy">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3073: requires cartopy</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_get_axis_current" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3093: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_maybe_gca" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3101: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_datarray_scatter[A-B-None-None-None-None-None-None-None]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3129: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_datarray_scatter[B-A-None-w-None-None-None-True-None]" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3129: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_datarray_scatter[A-B-None-y-x-None-None-True-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3129: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_datarray_scatter[A-B-z-None-None-None-None-None-None]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3129: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_datarray_scatter[B-A-z-w-None-None-None-True-None]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3129: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_datarray_scatter[A-B-z-y-x-None-None-True-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3129: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_datarray_scatter[A-B-z-y-x-w-None-True-True]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3129: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_assert_valid_xy" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3169: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[__call__-empty]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[__call__-scalar]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[line-empty]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[line-scalar]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[step-empty]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[step-scalar]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[contour-empty]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[contour-scalar]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[contourf-empty]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[contourf-scalar]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[hist-empty]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[hist-scalar]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[imshow-empty]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[imshow-scalar]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[pcolormesh-empty]" time="0.001"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[pcolormesh-scalar]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[scatter-empty]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[scatter-scalar]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[surface-empty]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_plot_empty_raises[surface-scalar]" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3185: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plot" name="test_facetgrid_axes_raises_deprecation_warning" time="0.000"><skipped type="pytest.skip" message="requires matplotlib">/workdir/xarray-2022.12.0/xarray/tests/test_plot.py:3210: requires matplotlib</skipped></testcase><testcase classname="xarray.tests.test_plugins" name="test_remove_duplicates" time="0.009" /><testcase classname="xarray.tests.test_plugins" name="test_broken_plugin" time="0.009" /><testcase classname="xarray.tests.test_plugins" name="test_remove_duplicates_warnings" time="0.009" /><testcase classname="xarray.tests.test_plugins" name="test_backends_dict_from_pkg" time="0.008" /><testcase classname="xarray.tests.test_plugins" name="test_set_missing_parameters" time="0.009" /><testcase classname="xarray.tests.test_plugins" name="test_set_missing_parameters_raise_error" time="0.008" /><testcase classname="xarray.tests.test_plugins" name="test_build_engines" time="0.008" /><testcase classname="xarray.tests.test_plugins" name="test_build_engines_sorted" time="0.008" /><testcase classname="xarray.tests.test_plugins" name="test_no_matching_engine_found" time="0.009" /><testcase classname="xarray.tests.test_plugins" name="test_engines_not_installed" time="0.008" /><testcase classname="xarray.tests.test_plugins" name="test_lazy_import" time="0.041" /><testcase classname="xarray.tests.test_print_versions" name="test_show_versions" time="0.129" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-1-True-1]" time="0.087" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-1-True-2]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-1-False-1]" time="0.090" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-1-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-2-True-1]" time="0.089" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-2-True-2]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-2-False-1]" time="0.086" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-2-False-2]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-3-True-1]" time="0.085" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-3-True-2]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-3-False-1]" time="0.085" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-3-False-2]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-7-True-1]" time="0.086" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-7-True-2]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-7-False-1]" time="0.085" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[numpy-7-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-7-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-7-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-7-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_iter[dask-7-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:29: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_repr[numpy-1]" time="0.010" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_repr[dask-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:47: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_repeated_rolling_rechunks" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:56: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_doc[1-numpy]" time="0.009" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_doc[1-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:64: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_properties[1-numpy]" time="0.010" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_properties[1-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:70: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-True-sum]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-True-mean]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-True-std]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-True-min]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-True-max]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-True-median]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-False-sum]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-False-mean]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-False-std]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-False-min]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-False-max]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-False-median]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-None-sum]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-None-mean]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-None-std]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-None-min]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-None-max]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-1-None-median]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-True-sum]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-True-mean]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-True-std]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-True-min]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-True-max]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-True-median]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-False-sum]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-False-mean]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-False-std]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-False-min]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-False-max]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-False-median]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-None-sum]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-None-mean]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-None-std]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-None-min]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-None-max]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_bottleneck[1-numpy-None-None-median]" time="0.009"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:87: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-1-True-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-1-True-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-1-False-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-1-False-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-1-None-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-1-None-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-None-True-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-None-True-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-None-False-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-None-False-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-None-None-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-7-None-None-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-1-True-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-1-True-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-1-False-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-1-False-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-1-None-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-1-None-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-None-True-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-None-True-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-None-False-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-None-False-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-None-None-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask[1-dask-8-None-None-count]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:107: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask_nochunk[True]" time="0.009"><skipped type="pytest.skip" message="could not import 'dask.array': No module named 'dask'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:140: could not import 'dask.array': No module named 'dask'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_wrapped_dask_nochunk[None]" time="0.009"><skipped type="pytest.skip" message="could not import 'dask.array': No module named 'dask'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:140: could not import 'dask.array': No module named 'dask'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[1-None-True]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[1-None-False]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[1-1-True]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[1-1-False]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[1-2-True]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[1-2-False]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[1-3-True]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[1-3-False]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[2-None-True]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[2-None-False]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[2-1-True]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[2-1-False]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[2-2-True]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[2-2-False]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[2-3-True]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[2-3-False]" time="0.021" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[3-None-True]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[3-None-False]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[3-1-True]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[3-1-False]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[3-2-True]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[3-2-False]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[3-3-True]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[3-3-False]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[4-None-True]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[4-None-False]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[4-1-True]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[4-1-False]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[4-2-True]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[4-2-False]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[4-3-True]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_pandas_compat[4-3-False]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_construct[1-True]" time="0.013" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_construct[1-False]" time="0.013" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_construct[2-True]" time="0.013" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_construct[2-False]" time="0.013" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_construct[3-True]" time="0.013" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_construct[3-False]" time="0.013" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_construct[4-True]" time="0.013" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_construct[4-False]" time="0.013" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-None-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-None-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-None-False-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-None-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-1-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-1-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-1-False-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-1-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-2-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-2-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-2-False-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-2-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-3-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-3-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-1-3-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-None-True-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-None-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-None-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-None-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-1-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-1-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-1-False-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-1-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-2-True-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-2-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-2-False-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-2-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-3-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-3-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-2-3-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-None-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-None-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-None-False-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-None-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-1-True-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-1-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-1-False-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-1-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-2-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-2-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-2-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-2-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-3-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-3-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-3-3-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-None-True-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-None-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-None-False-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-None-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-1-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-1-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-1-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-1-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-2-True-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-2-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-2-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-2-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-3-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-3-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-sum-4-3-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-None-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-None-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-None-False-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-None-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-1-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-1-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-1-False-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-1-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-2-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-2-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-2-False-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-2-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-3-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-3-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-3-False-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-1-3-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-None-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-None-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-None-False-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-None-False-2]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-1-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-1-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-1-False-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-1-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-2-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-2-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-2-False-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-2-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-3-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-3-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-3-False-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-2-3-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-None-True-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-None-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-None-False-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-None-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-1-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-1-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-1-False-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-1-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-2-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-2-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-2-False-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-2-False-2]" time="0.025" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-3-True-1]" time="0.040" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-3-True-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-3-False-1]" time="0.059" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-3-3-False-2]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-None-True-1]" time="0.025" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-None-True-2]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-None-False-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-None-False-2]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-1-True-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-1-True-2]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-1-False-2]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-2-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-2-True-2]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-2-False-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-2-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-3-True-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-3-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-3-False-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-mean-4-3-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-None-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-None-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-None-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-None-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-1-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-1-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-1-False-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-1-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-2-True-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-2-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-2-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-2-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-3-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-3-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-1-3-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-None-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-None-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-None-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-None-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-1-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-1-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-1-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-1-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-2-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-2-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-2-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-2-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-3-True-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-3-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-2-3-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-None-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-None-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-None-False-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-None-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-1-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-1-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-1-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-1-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-2-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-2-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-2-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-2-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-3-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-3-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-3-3-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-None-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-None-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-None-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-None-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-1-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-1-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-1-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-1-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-2-True-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-2-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-2-False-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-2-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-3-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-3-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-std-4-3-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-None-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-None-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-None-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-None-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-1-True-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-1-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-1-False-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-1-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-2-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-2-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-2-False-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-2-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-3-True-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-3-True-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-1-3-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-None-True-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-None-True-2]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-None-False-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-None-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-1-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-1-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-1-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-1-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-2-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-2-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-2-False-1]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-2-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-3-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-3-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-2-3-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-None-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-None-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-None-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-None-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-1-True-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-1-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-1-False-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-1-False-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-2-True-1]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-2-True-2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-2-False-1]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-2-False-2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-3-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-3-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-3-3-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-None-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-None-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-None-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-None-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-1-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-1-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-1-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-1-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-2-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-2-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-2-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-2-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-3-True-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-3-True-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-3-False-1]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[numpy-max-4-3-False-2]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-1-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-2-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-3-3-False-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-sum-4-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-3-False-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-1-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-2-True-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-2-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-None-False-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-3-False-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-3-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-2-True-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-mean-4-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-3-True-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-1-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-2-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-None-False-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-3-True-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-3-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-1-False-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-std-4-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-1-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-2-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-3-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-1-False-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce[dask-max-4-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-1-None-True]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-1-None-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-1-1-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-1-1-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-1-2-True]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-1-2-False]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-1-3-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-1-3-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-2-None-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-2-None-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-2-1-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-2-1-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-2-2-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-2-2-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-2-3-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-2-3-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-3-None-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-3-None-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-3-1-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-3-1-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-3-2-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-3-2-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-3-3-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-3-3-False]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-4-None-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-4-None-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-4-1-True]" time="0.014" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-4-1-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-4-2-True]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-4-2-False]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-4-3-True]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[sum-4-3-False]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-1-None-True]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-1-None-False]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-1-1-True]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-1-1-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-1-2-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-1-2-False]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-1-3-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-1-3-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-2-None-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-2-None-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-2-1-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-2-1-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-2-2-True]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-2-2-False]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-2-3-True]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-2-3-False]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-3-None-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-3-None-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-3-1-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-3-1-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-3-2-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-3-2-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-3-3-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-3-3-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-4-None-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-4-None-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-4-1-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-4-1-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-4-2-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-4-2-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-4-3-True]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_reduce_nonnumeric[max-4-3-False]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_count_correct" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-sum-None-True-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-sum-None-False-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-sum-1-True-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-sum-1-False-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-mean-None-True-1]" time="0.032" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-mean-None-False-1]" time="0.032" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-mean-1-True-1]" time="0.032" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-mean-1-False-1]" time="0.032" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-max-None-True-1]" time="0.021" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-max-None-False-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-max-1-True-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[numpy-max-1-False-1]" time="0.020" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-sum-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-sum-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-sum-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-sum-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-mean-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-mean-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-mean-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-mean-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-max-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-max-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-max-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_reduce[dask-max-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:274: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_construct[nan-True]" time="0.012" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_construct[nan-False]" time="0.012" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_construct[nan-center2]" time="0.012" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_construct[0.0-True]" time="0.012" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_construct[0.0-False]" time="0.012" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_ndrolling_construct[0.0-center2]" time="0.015" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_keep_attrs[reduce-argument0]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_keep_attrs[mean-argument1]" time="0.037" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_keep_attrs[construct-argument2]" time="0.012" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_keep_attrs[count-argument3]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_dask_dtype[int]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:374: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_dask_dtype[float32]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:374: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRolling" name="test_rolling_dask_dtype[float64]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:374: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-mean-numpy-span-5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-mean-numpy-span-5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-mean-numpy-alpha-0.5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-mean-numpy-alpha-0.5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-mean-numpy-com-0.5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-mean-numpy-com-0.5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-mean-numpy-halflife-5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-mean-numpy-halflife-5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-sum-numpy-span-5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-sum-numpy-span-5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-sum-numpy-alpha-0.5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-sum-numpy-alpha-0.5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-sum-numpy-com-0.5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-sum-numpy-com-0.5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-sum-numpy-halflife-5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_runs[1-sum-numpy-halflife-5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:387: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_mean_pandas[1-numpy-span-5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:409: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_mean_pandas[1-numpy-span-5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:409: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_mean_pandas[1-numpy-alpha-0.5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:409: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_mean_pandas[1-numpy-alpha-0.5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:409: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_mean_pandas[1-numpy-com-0.5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:409: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_mean_pandas[1-numpy-com-0.5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:409: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_mean_pandas[1-numpy-halflife-5-time]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:409: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_mean_pandas[1-numpy-halflife-5-x]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:409: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_keep_attrs[1-mean-numpy]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:431: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDataArrayRollingExp" name="test_rolling_exp_keep_attrs[1-sum-numpy]" time="0.001"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:431: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_keep_attrs[reduce-argument0]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_keep_attrs[mean-argument1]" time="0.041" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_keep_attrs[construct-argument2]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_keep_attrs[count-argument3]" time="0.025" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_properties[1-numpy]" time="0.010" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_properties[1-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:553: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-True-sum]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-True-mean]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-True-std]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-True-var]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-True-min]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-True-max]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-True-median]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-False-sum]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-False-mean]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-False-std]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-False-var]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-False-min]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-False-max]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-False-median]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-None-sum]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-None-mean]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-None-std]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-None-var]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-None-min]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-None-max]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-1-None-median]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-True-sum]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-True-mean]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-True-std]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-True-var]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-True-min]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-True-max]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-True-median]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-False-sum]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-False-mean]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-False-std]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-False-var]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-False-min]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-False-max]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-False-median]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-None-sum]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-None-mean]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-None-std]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-None-var]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-None-min]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-None-max]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z1-None-None-median]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-True-sum]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-True-mean]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-True-std]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-True-var]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-True-min]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-True-max]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-True-median]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-False-sum]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-False-mean]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-False-std]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-False-var]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-False-min]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-False-max]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-False-median]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-None-sum]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-None-mean]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-None-std]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-None-var]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-None-min]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-None-max]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-1-None-median]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-True-sum]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-True-mean]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-True-std]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-True-var]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-True-min]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-True-max]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-True-median]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-False-sum]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-False-mean]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-False-std]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-False-var]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-False-min]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-False-max]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-False-median]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-None-sum]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-None-mean]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-None-std]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-None-var]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-None-min]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-None-max]" time="0.010"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_wrapped_bottleneck[1-numpy-z2-None-None-median]" time="0.011"><skipped type="pytest.skip" message="could not import 'bottleneck': No module named 'bottleneck'">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:572: could not import 'bottleneck': No module named 'bottleneck'</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[1-None-True]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[1-None-False]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[1-1-True]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[1-1-False]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[1-2-True]" time="0.030" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[1-2-False]" time="0.030" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[1-3-True]" time="0.031" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[1-3-False]" time="0.031" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[2-None-True]" time="0.031" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[2-None-False]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[2-1-True]" time="0.030" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[2-1-False]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[2-2-True]" time="0.030" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[2-2-False]" time="0.058" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[2-3-True]" time="0.059" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[2-3-False]" time="0.067" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[3-None-True]" time="0.051" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[3-None-False]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[3-1-True]" time="0.038" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[3-1-False]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[3-2-True]" time="0.030" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[3-2-False]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[3-3-True]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[3-3-False]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[4-None-True]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[4-None-False]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[4-1-True]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[4-1-False]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[4-2-True]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[4-2-False]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[4-3-True]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_pandas_compat[4-3-False]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_construct[1-True]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_construct[1-False]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_construct[2-True]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_construct[2-False]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_construct[3-True]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_construct[3-False]" time="0.030" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_construct[4-True]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_construct[4-False]" time="0.030" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-None-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-None-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-None-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-None-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-1-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-1-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-1-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-2-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-2-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-2-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-2-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-3-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-3-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-3-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-1-3-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-None-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-None-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-None-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-None-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-1-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-1-True-2]" time="0.037" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-1-False-1]" time="0.025" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-1-False-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-2-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-2-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-2-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-2-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-3-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-3-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-3-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-2-3-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-None-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-None-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-None-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-1-True-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-1-True-2]" time="0.038" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-1-False-1]" time="0.027" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-1-False-2]" time="0.037" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-2-True-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-2-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-2-False-2]" time="0.037" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-3-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-3-3-False-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-None-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-None-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-None-False-2]" time="0.037" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-1-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-1-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-1-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-2-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-2-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-2-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-2-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-3-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-3-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-3-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-sum-4-3-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-None-True-1]" time="0.025" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-None-True-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-None-False-1]" time="0.027" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-None-False-2]" time="0.044" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-1-True-1]" time="0.032" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-1-True-2]" time="0.052" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-1-False-1]" time="0.030" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-1-False-2]" time="0.046" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-2-True-1]" time="0.027" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-2-True-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-2-False-1]" time="0.027" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-2-False-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-3-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-3-True-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-3-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-1-3-False-2]" time="0.042" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-None-True-1]" time="0.025" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-None-True-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-None-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-None-False-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-1-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-1-True-2]" time="0.044" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-1-False-1]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-1-False-2]" time="0.047" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-2-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-2-True-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-2-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-2-False-2]" time="0.044" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-3-True-1]" time="0.029" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-3-True-2]" time="0.048" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-3-False-1]" time="0.027" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-2-3-False-2]" time="0.044" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-None-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-None-True-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-None-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-None-False-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-1-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-1-True-2]" time="0.045" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-1-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-1-False-2]" time="0.048" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-2-True-1]" time="0.027" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-2-True-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-2-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-2-False-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-3-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-3-True-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-3-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-3-3-False-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-None-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-None-True-2]" time="0.044" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-None-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-None-False-2]" time="0.044" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-1-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-1-True-2]" time="0.044" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-1-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-1-False-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-2-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-2-True-2]" time="0.044" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-2-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-2-False-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-3-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-3-True-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-3-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-mean-4-3-False-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-None-True-1]" time="0.011"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-None-True-2]" time="0.010"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-None-False-1]" time="0.012"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-None-False-2]" time="0.011"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-1-True-1]" time="0.011"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-1-True-2]" time="0.011"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-1-False-1]" time="0.011"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-1-False-2]" time="0.010"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-2-True-1]" time="0.010"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-2-True-2]" time="0.010"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-2-False-1]" time="0.010"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-2-False-2]" time="0.010"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-3-True-1]" time="0.010"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-3-True-2]" time="0.010"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-3-False-1]" time="0.010"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-1-3-False-2]" time="0.010"><skipped type="pytest.skip" message="std with window == 1 is unstable in bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:664: std with window == 1 is unstable in bottleneck</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-None-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-None-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-None-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-1-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-1-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-1-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-2-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-2-True-2]" time="0.032" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-2-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-2-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-3-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-3-True-2]" time="0.037" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-2-3-False-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-None-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-None-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-None-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-None-False-2]" time="0.040" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-1-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-1-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-1-False-1]" time="0.025" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-1-False-2]" time="0.103" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-2-True-1]" time="0.067" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-2-True-2]" time="0.043" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-2-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-2-False-2]" time="0.038" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-3-True-1]" time="0.027" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-3-True-2]" time="0.038" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-3-3-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-None-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-None-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-None-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-None-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-1-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-1-True-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-1-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-1-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-2-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-2-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-2-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-2-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-3-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-3-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-3-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-std-4-3-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-None-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-None-True-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-None-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-1-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-1-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-2-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-2-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-2-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-3-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-1-3-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-None-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-None-True-2]" time="0.052" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-None-False-1]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-None-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-1-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-1-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-2-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-2-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-2-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-3-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-3-False-1]" time="0.025" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-2-3-False-2]" time="0.037" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-None-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-None-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-None-False-1]" time="0.025" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-None-False-2]" time="0.038" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-1-True-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-1-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-1-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-2-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-2-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-2-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-3-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-3-3-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-None-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-None-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-None-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-None-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-1-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-1-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-1-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-1-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-2-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-2-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-2-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-2-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-3-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-3-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-var-4-3-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-None-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-None-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-None-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-None-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-1-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-1-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-1-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-1-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-2-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-2-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-2-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-2-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-3-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-3-True-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-3-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-1-3-False-2]" time="0.033" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-None-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-None-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-None-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-1-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-1-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-2-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-2-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-2-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-3-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-2-3-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-None-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-None-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-None-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-1-True-2]" time="0.044" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-1-False-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-1-False-2]" time="0.038" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-2-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-2-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-2-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-3-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-3-3-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-None-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-None-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-None-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-1-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-1-False-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-1-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-2-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-2-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-2-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-3-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-3-False-1]" time="0.025" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-min-4-3-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-None-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-None-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-None-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-1-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-1-False-2]" time="0.039" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-2-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-2-False-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-2-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-3-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-1-3-False-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-None-True-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-None-True-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-None-False-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-None-False-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-1-True-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-1-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-1-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-2-True-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-2-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-2-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-2-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-3-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-2-3-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-None-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-None-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-None-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-1-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-1-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-2-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-2-False-1]" time="0.025" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-2-False-2]" time="0.053" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-3-True-1]" time="0.061" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-3-True-2]" time="0.098" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-3-False-1]" time="0.048" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-3-3-False-2]" time="0.044" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-None-True-1]" time="0.028" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-None-True-2]" time="0.044" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-None-False-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-None-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-1-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-1-False-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-1-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-2-True-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-2-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-2-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-3-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-max-4-3-False-2]" time="0.034" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-None-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-None-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-None-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-1-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-1-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-2-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-2-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-2-False-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-3-True-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-1-3-False-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-None-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-None-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-None-False-2]" time="0.037" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-1-True-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-1-True-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-1-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-2-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-2-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-2-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-3-True-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-3-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-2-3-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-None-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-None-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-None-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-1-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-1-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-2-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-2-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-2-False-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-2-False-2]" time="0.038" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-3-True-1]" time="0.026" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-3-True-2]" time="0.037" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-3-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-3-3-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-None-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-None-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-None-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-None-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-1-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-1-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-1-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-1-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-2-True-1]" time="0.022" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-2-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-2-False-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-2-False-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-3-True-1]" time="0.023" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-3-True-2]" time="0.035" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-3-False-1]" time="0.024" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[numpy-median-4-3-False-2]" time="0.036" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-2-False-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-1-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-1-True-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-2-3-False-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-2-True-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-3-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-1-True-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-sum-4-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-2-True-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-1-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-None-False-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-3-False-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-2-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-2-True-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-3-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-None-False-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-3-True-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-mean-4-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-1-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-None-False-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-2-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-1-False-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-3-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-3-True-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-std-4-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-1-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-None-True-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-3-True-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-2-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-1-False-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-3-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-None-True-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-2-False-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-var-4-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-1-False-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-1-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-None-True-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-2-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-1-True-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-3-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-None-True-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-min-4-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-1-3-False-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-2-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-3-3-False-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-2-True-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-max-4-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-1-True-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-3-False-1]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-1-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-2-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-3-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-None-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-None-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-1-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-1-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-2-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-2-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-2-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-2-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-3-True-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-3-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-3-False-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_rolling_reduce[dask-median-4-3-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:650: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-True-sum-None-True-2]" time="0.062" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-True-sum-None-False-2]" time="0.059" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-True-sum-1-True-2]" time="0.058" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-True-sum-1-False-2]" time="0.064" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-True-max-None-True-2]" time="0.061" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-True-max-None-False-2]" time="0.059" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-True-max-1-True-2]" time="0.059" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-True-max-1-False-2]" time="0.060" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-False-sum-None-True-2]" time="0.060" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-False-sum-None-False-2]" time="0.060" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-False-sum-1-True-2]" time="0.060" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-False-sum-1-False-2]" time="0.060" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-False-max-None-True-2]" time="0.065" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-False-max-None-False-2]" time="0.061" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-False-max-1-True-2]" time="0.062" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[numpy-False-max-1-False-2]" time="0.072" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-True-sum-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-True-sum-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-True-sum-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-True-sum-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-True-max-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-True-max-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-True-max-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-True-max-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-False-sum-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-False-sum-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-False-sum-1-True-2]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-False-sum-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-False-max-None-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-False-max-None-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-False-max-1-True-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_reduce[dask-False-max-1-False-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:680: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[True-nan-True]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[True-nan-False]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[True-nan-center2]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[True-0.0-True]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[True-0.0-False]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[True-0.0-center2]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[False-nan-True]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[False-nan-False]" time="0.019" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[False-nan-center2]" time="0.018" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[False-0.0-True]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[False-0.0-False]" time="0.017" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_ndrolling_construct[False-0.0-center2]" time="0.016" /><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_raise_no_warning_dask_rolling_assert_close[numpy-mean-2]" time="0.011"><skipped type="pytest.xfail" message="See https://github.com/pydata/xarray/pull/4369 or docstring" /></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_raise_no_warning_dask_rolling_assert_close[numpy-max-2]" time="0.011"><skipped type="pytest.xfail" message="See https://github.com/pydata/xarray/pull/4369 or docstring" /></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_raise_no_warning_dask_rolling_assert_close[dask-mean-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:738: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRolling" name="test_raise_no_warning_dask_rolling_assert_close[dask-max-2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:738: requires dask</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRollingExp" name="test_rolling_exp[1-numpy]" time="0.000"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:762: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_rolling.TestDatasetRollingExp" name="test_rolling_exp_keep_attrs[1-numpy]" time="0.001"><skipped type="pytest.skip" message="requires numbagg">/workdir/xarray-2022.12.0/xarray/tests/test_rolling.py:768: requires numbagg</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_allclose_regression" time="0.010" /><testcase classname="xarray.tests.test_testing" name="test_assert_allclose[Variable]" time="0.010" /><testcase classname="xarray.tests.test_testing" name="test_assert_allclose[DataArray]" time="0.011" /><testcase classname="xarray.tests.test_testing" name="test_assert_allclose[Dataset]" time="0.011" /><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal_failing[both arrays-numpy]" time="0.010" /><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal_failing[both arrays-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:63: requires dask</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal_failing[both arrays-pint]" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:63: requires pint</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal_failing[second scalar-numpy]" time="0.010" /><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal_failing[second scalar-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:63: requires dask</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal_failing[second scalar-pint]" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:63: requires pint</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal_failing[first scalar-numpy]" time="0.011" /><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal_failing[first scalar-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:63: requires dask</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal_failing[first scalar-pint]" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:63: requires pint</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal[both arrays-numpy]" time="0.010" /><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal[both arrays-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:96: requires dask</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal[both arrays-pint]" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:96: requires pint</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal[second scalar-numpy]" time="0.010" /><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal[second scalar-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:96: requires dask</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal[second scalar-pint]" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:96: requires pint</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal[first scalar-numpy]" time="0.010" /><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal[first scalar-dask]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:96: requires dask</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_assert_duckarray_equal[first scalar-pint]" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_testing.py:96: requires pint</skipped></testcase><testcase classname="xarray.tests.test_testing" name="test_ensure_warnings_not_elevated[assert_equal]" time="0.011" /><testcase classname="xarray.tests.test_testing" name="test_ensure_warnings_not_elevated[assert_identical]" time="0.011" /><testcase classname="xarray.tests.test_testing" name="test_ensure_warnings_not_elevated[assert_allclose]" time="0.011" /><testcase classname="xarray.tests.test_testing" name="test_ensure_warnings_not_elevated[assert_duckarray_equal]" time="0.011" /><testcase classname="xarray.tests.test_testing" name="test_ensure_warnings_not_elevated[assert_duckarray_allclose]" time="0.011" /><testcase classname="xarray.tests.test_tutorial.TestLoadDataset" name="test_download_from_github" time="0.000"><skipped type="pytest.skip" message="set --run-network-tests to run test requiring an internet connection">/workdir/xarray-2022.12.0/conftest.py:21: set --run-network-tests to run test requiring an internet connection</skipped></testcase><testcase classname="xarray.tests.test_tutorial.TestLoadDataset" name="test_download_from_github_load_without_cache" time="0.000"><skipped type="pytest.skip" message="set --run-network-tests to run test requiring an internet connection">/workdir/xarray-2022.12.0/conftest.py:21: set --run-network-tests to run test requiring an internet connection</skipped></testcase><testcase classname="xarray.tests.test_ufuncs" name="test_unary" time="0.012" /><testcase classname="xarray.tests.test_ufuncs" name="test_binary" time="0.037" /><testcase classname="xarray.tests.test_ufuncs" name="test_binary_out" time="0.012" /><testcase classname="xarray.tests.test_ufuncs" name="test_groupby" time="0.041" /><testcase classname="xarray.tests.test_ufuncs" name="test_alignment" time="0.016" /><testcase classname="xarray.tests.test_ufuncs" name="test_kwargs" time="0.010" /><testcase classname="xarray.tests.test_ufuncs" name="test_xarray_defers_to_unrecognized_type" time="0.010" /><testcase classname="xarray.tests.test_ufuncs" name="test_xarray_handles_dask" time="0.010"><skipped type="pytest.skip" message="could not import 'dask.array': No module named 'dask'">/workdir/xarray-2022.12.0/xarray/tests/test_ufuncs.py:119: could not import 'dask.array': No module named 'dask'</skipped></testcase><testcase classname="xarray.tests.test_ufuncs" name="test_dask_defers_to_xarray" time="0.009"><skipped type="pytest.skip" message="could not import 'dask.array': No module named 'dask'">/workdir/xarray-2022.12.0/xarray/tests/test_ufuncs.py:128: could not import 'dask.array': No module named 'dask'</skipped></testcase><testcase classname="xarray.tests.test_ufuncs" name="test_gufunc_methods" time="0.011" /><testcase classname="xarray.tests.test_ufuncs" name="test_out" time="0.013" /><testcase classname="xarray.tests.test_ufuncs" name="test_gufuncs" time="0.013" /><testcase classname="xarray.tests.test_utils.TestAlias" name="test" time="0.026" /><testcase classname="xarray.tests.test_utils" name="test_maybe_coerce_to_str[a-b-expected0]" time="0.014" /><testcase classname="xarray.tests.test_utils" name="test_maybe_coerce_to_str[1-2-expected1]" time="0.014" /><testcase classname="xarray.tests.test_utils" name="test_maybe_coerce_to_str_minimal_str_dtype" time="0.014" /><testcase classname="xarray.tests.test_utils.TestArrayEquiv" name="test_0d" time="0.013" /><testcase classname="xarray.tests.test_utils.TestDictionaries" name="test_equivalent" time="0.013" /><testcase classname="xarray.tests.test_utils.TestDictionaries" name="test_safe" time="0.013" /><testcase classname="xarray.tests.test_utils.TestDictionaries" name="test_unsafe" time="0.013" /><testcase classname="xarray.tests.test_utils.TestDictionaries" name="test_compat_dict_intersection" time="0.013" /><testcase classname="xarray.tests.test_utils.TestDictionaries" name="test_compat_dict_union" time="0.013" /><testcase classname="xarray.tests.test_utils.TestDictionaries" name="test_dict_equiv" time="0.013" /><testcase classname="xarray.tests.test_utils.TestDictionaries" name="test_frozen" time="0.013" /><testcase classname="xarray.tests.test_utils" name="test_repr_object" time="0.012" /><testcase classname="xarray.tests.test_utils" name="test_repr_object_magic_methods" time="0.013" /><testcase classname="xarray.tests.test_utils" name="test_is_remote_uri" time="0.012" /><testcase classname="xarray.tests.test_utils.Test_is_uniform_and_sorted" name="test_sorted_uniform" time="0.013" /><testcase classname="xarray.tests.test_utils.Test_is_uniform_and_sorted" name="test_sorted_not_uniform" time="0.013" /><testcase classname="xarray.tests.test_utils.Test_is_uniform_and_sorted" name="test_not_sorted_uniform" time="0.013" /><testcase classname="xarray.tests.test_utils.Test_is_uniform_and_sorted" name="test_not_sorted_not_uniform" time="0.014" /><testcase classname="xarray.tests.test_utils.Test_is_uniform_and_sorted" name="test_two_numbers" time="0.012" /><testcase classname="xarray.tests.test_utils.Test_is_uniform_and_sorted" name="test_relative_tolerance" time="0.012" /><testcase classname="xarray.tests.test_utils.Test_hashable" name="test_hashable" time="0.012" /><testcase classname="xarray.tests.test_utils" name="test_dask_array_is_scalar" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_utils.py:194: requires dask</skipped></testcase><testcase classname="xarray.tests.test_utils" name="test_hidden_key_dict" time="0.011" /><testcase classname="xarray.tests.test_utils" name="test_either_dict_or_kwargs" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_infix_dims[supplied0-all_0-expected0]" time="0.011" /><testcase classname="xarray.tests.test_utils" name="test_infix_dims[supplied1-all_1-expected1]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_infix_dims[supplied2-all_2-expected2]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_infix_dims[supplied3-all_3-expected3]" time="0.009" /><testcase classname="xarray.tests.test_utils" name="test_infix_dims[supplied4-all_4-expected4]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_infix_dims[supplied5-all_5-expected5]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_infix_dims_errors[supplied0-all_0]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_infix_dims_errors[supplied1-all_1]" time="0.009" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims[str]" time="0.009" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims[list_of_str]" time="0.009" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims[list_mixed]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims[tuple_of_str]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims[list_with_tuple]" time="0.009" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims[tuple_of_tuple]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims[None]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims[ellipsis]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims_set" time="0.009" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims_replace_none[None]" time="0.009" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims_replace_none[ellipsis]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims_raises[str_missing]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims_raises[list_missing_one]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_parse_dims_raises[list_missing_all]" time="0.009" /><testcase classname="xarray.tests.test_utils" name="test_parse_ordered_dims[str]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_parse_ordered_dims[list]" time="0.009" /><testcase classname="xarray.tests.test_utils" name="test_parse_ordered_dims[list_only_ellipsis]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_parse_ordered_dims[list_with_ellipsis]" time="0.012" /><testcase classname="xarray.tests.test_utils" name="test_parse_ordered_dims[list_with_middle_ellipsis]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_parse_ordered_dims_raises" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_iterate_nested[nested_list0-expected0]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_iterate_nested[nested_list1-expected1]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_iterate_nested[nested_list2-expected2]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_iterate_nested[nested_list3-expected3]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_iterate_nested[nested_list4-expected4]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_iterate_nested[nested_list5-expected5]" time="0.010" /><testcase classname="xarray.tests.test_utils" name="test_find_stack_level" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_properties" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_attrs" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_dict" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_1d" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_1d_fancy" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_with_mask" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_with_mask_size_zero" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_with_mask_nd_indexer" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_index_0d_int" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_index_0d_float" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_index_0d_string" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_index_0d_datetime" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_index_0d_timedelta64" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_index_0d_not_a_time" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_index_0d_object" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_0d_object_array_with_list" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_index_and_concat_datetime" time="0.029" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_0d_time_data" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_datetime64_conversion" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_timedelta64_conversion" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_object_conversion" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_datetime64_valid_range" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_timedelta64_valid_range" time="0.010"><skipped type="pytest.xfail" message="pandas issue 36615" /></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pandas_data" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pandas_period_index" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_1d_math" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_1d_reduce" time="0.009" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_array_interface" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test___array__" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_equals_all_dtypes" time="0.016" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_eq_all_dtypes" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_encoding_preserved" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_concat" time="0.015" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_concat_attrs" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_concat_fixed_len_str" time="0.014" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_concat_number_strings" time="0.022" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_concat_mixed_dtypes" time="0.029" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy[float-True]" time="0.016" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy[float-False]" time="0.026" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy[int-True]" time="0.026" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy[int-False]" time="0.027" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy[str-True]" time="0.022" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy[str-False]" time="0.014" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy_deep_recursive" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy_index" time="0.014" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy_with_data" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy_with_data_errors" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy_index_with_data" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_copy_index_with_data_errors" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_replace" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_real_and_imag" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_aggregate_complex" time="0.015" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pandas_cateogrical_dtype" time="0.018" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pandas_datetime64_with_tz" time="0.015" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_multiindex" time="0.015" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_load" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_advanced" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_uint_1d" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_uint" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_0d_array" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_fancy" time="0.014" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_error" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg0-np_arg0-mean]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg0-np_arg0-median]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg0-np_arg0-reflect]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg0-np_arg0-edge]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg0-np_arg0-linear_ramp]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg0-np_arg0-maximum]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg0-np_arg0-minimum]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg0-np_arg0-symmetric]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg0-np_arg0-wrap]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg1-np_arg1-mean]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg1-np_arg1-median]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg1-np_arg1-reflect]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg1-np_arg1-edge]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg1-np_arg1-linear_ramp]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg1-np_arg1-maximum]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg1-np_arg1-minimum]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg1-np_arg1-symmetric]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg1-np_arg1-wrap]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg2-np_arg2-mean]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg2-np_arg2-median]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg2-np_arg2-reflect]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg2-np_arg2-edge]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg2-np_arg2-linear_ramp]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg2-np_arg2-maximum]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg2-np_arg2-minimum]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg2-np_arg2-symmetric]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg2-np_arg2-wrap]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg3-np_arg3-mean]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg3-np_arg3-median]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg3-np_arg3-reflect]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg3-np_arg3-edge]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg3-np_arg3-linear_ramp]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg3-np_arg3-maximum]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg3-np_arg3-minimum]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg3-np_arg3-symmetric]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg3-np_arg3-wrap]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg4-np_arg4-mean]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg4-np_arg4-median]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg4-np_arg4-reflect]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg4-np_arg4-edge]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg4-np_arg4-linear_ramp]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg4-np_arg4-maximum]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg4-np_arg4-minimum]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg4-np_arg4-symmetric]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad[xr_arg4-np_arg4-wrap]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad_constant_values[xr_arg0-np_arg0]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad_constant_values[xr_arg1-np_arg1]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad_constant_values[xr_arg2-np_arg2]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad_constant_values[xr_arg3-np_arg3]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_pad_constant_values[xr_arg4-np_arg4]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_rolling_window[x-3]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_rolling_window[y-5]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_rolling_1d" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_nd_rolling[dims0-center0]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_nd_rolling[dims0-center1]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_nd_rolling[dims1-center0]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_nd_rolling[dims1-center1]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_nd_rolling[dims2-center0]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_nd_rolling[dims2-center1]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_rolling_window_errors[x-window0-x_w-True]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_rolling_window_errors[x-3-window_dim1-True]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_rolling_window_errors[x-3-x_w-center2]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_data_and_values" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_numpy_same_methods" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_datetime64_conversion_scalar" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_timedelta64_conversion_scalar" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_0d_str" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_0d_datetime" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_0d_timedelta" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_equals_and_identical" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_broadcast_equals" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_no_conflicts" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_as_variable" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_repr" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_repr_lazy_data" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_detect_indexer_type" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_indexer_type" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_items" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_basic" time="0.271" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_getitem_with_mask_2d_input" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_isel" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_index_0d_numpy_string" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_indexing_0d_unicode" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_shift[fill_value0]" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_shift[2]" time="0.015" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_shift[2.0]" time="0.014" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_shift2d" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_roll" time="0.016" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_roll_consistency" time="0.016" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_transpose" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_transpose_0d" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_squeeze" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_get_axis_num" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_set_dims" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_set_dims_object_dtype" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_stack" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_stack_errors" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_unstack" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_unstack_errors" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_unstack_2d" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_stack_unstack_consistency" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_broadcasting_math" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_broadcasting_failures" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_inplace_math" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_inplace_math_error" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_reduce" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_reduce_use_bottleneck" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1715: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[None-None-0.25-True]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[None-None-0.25-False]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[None-None-0.25-None]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[None-None-q1-True]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[None-None-q1-False]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[None-None-q1-None]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[None-None-q2-True]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[None-None-q2-False]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[None-None-q2-None]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[0-x-0.25-True]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[0-x-0.25-False]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[0-x-0.25-None]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[0-x-q1-True]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[0-x-q1-False]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[0-x-q1-None]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[0-x-q2-True]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[0-x-q2-False]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[0-x-q2-None]" time="0.015" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis2-dim2-0.25-True]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis2-dim2-0.25-False]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis2-dim2-0.25-None]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis2-dim2-q1-True]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis2-dim2-q1-False]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis2-dim2-q1-None]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis2-dim2-q2-True]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis2-dim2-q2-False]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis2-dim2-q2-None]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis3-dim3-0.25-True]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis3-dim3-0.25-False]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis3-dim3-0.25-None]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis3-dim3-q1-True]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis3-dim3-q1-False]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis3-dim3-q1-None]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis3-dim3-q2-True]" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis3-dim3-q2-False]" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile[axis3-dim3-q2-None]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_dask[1-y-0.25]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1748: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_dask[1-y-q1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1748: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_dask[1-y-q2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1748: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_dask[axis1-dim1-0.25]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1748: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_dask[axis1-dim1-q1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1748: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_dask[axis1-dim1-q2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1748: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_method[True-midpoint]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1758: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_method[True-lower]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1758: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_method[False-midpoint]" time="0.014" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_method[False-lower]" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_interpolation_deprecation[midpoint]" time="0.016" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_interpolation_deprecation[lower]" time="0.014" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_chunked_dim_error" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1801: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_out_of_bounds[-0.1]" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_out_of_bounds[1.1]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_out_of_bounds[q2]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_quantile_out_of_bounds[q3]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_rank_dask_raises" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1819: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_rank_use_bottleneck" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_rank" time="0.000"><skipped type="pytest.skip" message="requires bottleneck">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1832: requires bottleneck</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_big_endian_reduce" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_reduce_funcs" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_reduce_keepdims" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_reduce_keepdims_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:1911: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariable" name="test_reduce_keep_attrs" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_binary_ops_keep_attrs" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_count" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_setitem" time="0.011" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_setitem_fancy" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_coarsen" time="0.012" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_coarsen_2d" time="0.013" /><testcase classname="xarray.tests.test_variable.TestVariable" name="test_coarsen_keep_attrs" time="0.010" /><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_properties" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:68: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_attrs" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:82: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_dict" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:92: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_1d" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:98: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_with_mask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:143: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_with_mask_size_zero" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:155: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_index_0d_int" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:192: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_index_0d_float" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:197: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_index_0d_string" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:202: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_index_0d_datetime" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:208: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_index_0d_timedelta64" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:219: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_index_0d_not_a_time" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:228: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_index_0d_object" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:233: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_index_and_concat_datetime" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:259: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_0d_time_data" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:273: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_datetime64_conversion" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:279: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_timedelta64_conversion" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:294: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_object_conversion" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:309: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_datetime64_valid_range" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:314: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_timedelta64_valid_range" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:320: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pandas_data" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:327: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pandas_period_index" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:333: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_1d_math" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:339: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_1d_reduce" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:383: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test___array__" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:415: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_equals_all_dtypes" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:422: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_encoding_preserved" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:445: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_concat" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:460: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_concat_attrs" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:492: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_concat_fixed_len_str" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:502: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_concat_number_strings" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:511: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_concat_mixed_dtypes" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:520: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy[float-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:528: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy[float-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:528: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy[int-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:528: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy[int-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:528: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy[str-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:528: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy[str-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:528: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy_deep_recursive" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:543: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy_with_data" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:575: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy_with_data_errors" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:583: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy_index_with_data" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:589: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy_index_with_data_errors" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:596: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_replace" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:606: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_real_and_imag" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:615: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_aggregate_complex" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:626: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pandas_cateogrical_dtype" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:632: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pandas_datetime64_with_tz" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:638: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_load" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:657: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_advanced" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:667: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_uint_1d" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:707: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_uint" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:717: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_0d_array" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:730: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_error" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:831: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg0-np_arg0-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg0-np_arg0-median]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg0-np_arg0-reflect]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg0-np_arg0-edge]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg0-np_arg0-linear_ramp]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg0-np_arg0-maximum]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg0-np_arg0-minimum]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg0-np_arg0-symmetric]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg0-np_arg0-wrap]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg1-np_arg1-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg1-np_arg1-median]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg1-np_arg1-reflect]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg1-np_arg1-edge]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg1-np_arg1-linear_ramp]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg1-np_arg1-maximum]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg1-np_arg1-minimum]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg1-np_arg1-symmetric]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg1-np_arg1-wrap]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg2-np_arg2-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg2-np_arg2-median]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg2-np_arg2-reflect]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg2-np_arg2-edge]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg2-np_arg2-linear_ramp]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg2-np_arg2-maximum]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg2-np_arg2-minimum]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg2-np_arg2-symmetric]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg2-np_arg2-wrap]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg3-np_arg3-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg3-np_arg3-median]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg3-np_arg3-reflect]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg3-np_arg3-edge]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg3-np_arg3-linear_ramp]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg3-np_arg3-maximum]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg3-np_arg3-minimum]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg3-np_arg3-symmetric]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg3-np_arg3-wrap]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg4-np_arg4-mean]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg4-np_arg4-median]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg4-np_arg4-reflect]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg4-np_arg4-edge]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg4-np_arg4-linear_ramp]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg4-np_arg4-maximum]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg4-np_arg4-minimum]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg4-np_arg4-symmetric]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad[xr_arg4-np_arg4-wrap]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:851: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad_constant_values[xr_arg0-np_arg0]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:889: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad_constant_values[xr_arg1-np_arg1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:889: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad_constant_values[xr_arg2-np_arg2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:889: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad_constant_values[xr_arg3-np_arg3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:889: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_pad_constant_values[xr_arg4-np_arg4]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:889: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_rolling_window[x-3]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:914: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_rolling_window[y-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:914: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_rolling_1d" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:935: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_nd_rolling[dims0-center0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:962: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_nd_rolling[dims0-center1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:962: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_nd_rolling[dims1-center0]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:962: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_nd_rolling[dims1-center1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:962: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_nd_rolling[dims2-center0]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:962: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_nd_rolling[dims2-center1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:962: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_rolling_window_errors[x-window0-x_w-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:988: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_rolling_window_errors[x-3-window_dim1-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:988: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_rolling_window_errors[x-3-x_w-center2]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:988: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_chunk" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2186: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_0d_object_array_with_list" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2220: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_array_interface" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2224: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_copy_index" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2229: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_eq_all_dtypes" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2233: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_fancy" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2238: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_1d_fancy" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2241: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_getitem_with_mask_nd_indexer" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2244: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[True-3-x]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[True-3-y]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[True-8-x]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[True-8-y]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[True-11-x]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[True-11-y]" time="0.001"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[False-3-x]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[False-3-y]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[False-8-x]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[False-8-y]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[False-11-x]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_dask_rolling[False-11-y]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2254: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithDask" name="test_multiindex" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2277: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestVariableWithSparse" name="test_as_sparse" time="0.000"><skipped type="pytest.skip" message="requires sparse">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2288: requires sparse</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_properties" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_attrs" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_dict" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_1d" time="0.017" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_1d_fancy" time="0.013" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_with_mask" time="0.013" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_with_mask_size_zero" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_with_mask_nd_indexer" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_index_0d_int" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_index_0d_float" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_index_0d_string" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_index_0d_datetime" time="0.014" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_index_0d_timedelta64" time="0.013" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_index_0d_not_a_time" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_index_0d_object" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_0d_object_array_with_list" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_index_and_concat_datetime" time="0.031" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_0d_time_data" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_datetime64_conversion" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_timedelta64_conversion" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_object_conversion" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_datetime64_valid_range" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_timedelta64_valid_range" time="0.011"><skipped type="pytest.xfail" message="pandas issue 36615" /></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pandas_data" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pandas_period_index" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_1d_math" time="0.013" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_1d_reduce" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_array_interface" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test___array__" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_equals_all_dtypes" time="0.016" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_eq_all_dtypes" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_encoding_preserved" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_concat" time="0.015" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_concat_attrs" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_concat_fixed_len_str" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_concat_number_strings" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_concat_mixed_dtypes" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy[float-True]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy[float-False]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy[int-True]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy[int-False]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy[str-True]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy[str-False]" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy_deep_recursive" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy_index" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy_with_data" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy_with_data_errors" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy_index_with_data" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_copy_index_with_data_errors" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_replace" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_real_and_imag" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_aggregate_complex" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pandas_cateogrical_dtype" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pandas_datetime64_with_tz" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_multiindex" time="0.016" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_load" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_uint_1d" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_0d_array" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_init" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_to_index" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_to_index_multiindex_level" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_multiindex_default_level_names" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_data" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_name" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_level_names" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_get_level_variable" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_concat_periods" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_concat_multiindex" time="0.012" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_concat_str_dtype[str]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_concat_str_dtype[bytes]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_coordinate_alias" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_datetime64" time="0.010" /><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_error" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2399: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_advanced" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2403: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_fancy" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2407: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_getitem_uint" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2411: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg0-np_arg0-mean]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg0-np_arg0-median]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg0-np_arg0-reflect]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg0-np_arg0-edge]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg0-np_arg0-linear_ramp]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg0-np_arg0-maximum]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg0-np_arg0-minimum]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg0-np_arg0-symmetric]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg0-np_arg0-wrap]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg1-np_arg1-mean]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg1-np_arg1-median]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg1-np_arg1-reflect]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg1-np_arg1-edge]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg1-np_arg1-linear_ramp]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg1-np_arg1-maximum]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg1-np_arg1-minimum]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg1-np_arg1-symmetric]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg1-np_arg1-wrap]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg2-np_arg2-mean]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg2-np_arg2-median]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg2-np_arg2-reflect]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg2-np_arg2-edge]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg2-np_arg2-linear_ramp]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg2-np_arg2-maximum]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg2-np_arg2-minimum]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg2-np_arg2-symmetric]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg2-np_arg2-wrap]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg3-np_arg3-mean]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg3-np_arg3-median]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg3-np_arg3-reflect]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg3-np_arg3-edge]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg3-np_arg3-linear_ramp]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg3-np_arg3-maximum]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg3-np_arg3-minimum]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg3-np_arg3-symmetric]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg3-np_arg3-wrap]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg4-np_arg4-mean]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg4-np_arg4-median]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg4-np_arg4-reflect]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg4-np_arg4-edge]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg4-np_arg4-linear_ramp]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg4-np_arg4-maximum]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg4-np_arg4-minimum]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg4-np_arg4-symmetric]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad[xr_arg4-np_arg4-wrap]" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2415: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_pad_constant_values" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2434: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_rolling_window" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2438: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_rolling_1d" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2442: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_nd_rolling" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2446: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_rolling_window_errors" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2450: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_coarsen_2d" time="0.000"><skipped type="pytest.skip" message="unconditional skip">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2454: unconditional skip</skipped></testcase><testcase classname="xarray.tests.test_variable.TestIndexVariable" name="test_to_index_variable_copy" time="0.011" /><testcase classname="xarray.tests.test_variable.TestAsCompatibleData" name="test_unchanged_types" time="0.012" /><testcase classname="xarray.tests.test_variable.TestAsCompatibleData" name="test_converted_types" time="0.011" /><testcase classname="xarray.tests.test_variable.TestAsCompatibleData" name="test_masked_array" time="0.011" /><testcase classname="xarray.tests.test_variable.TestAsCompatibleData" name="test_datetime" time="0.011" /><testcase classname="xarray.tests.test_variable.TestAsCompatibleData" name="test_tz_datetime" time="0.011" /><testcase classname="xarray.tests.test_variable.TestAsCompatibleData" name="test_full_like" time="0.011" /><testcase classname="xarray.tests.test_variable.TestAsCompatibleData" name="test_full_like_dask" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2569: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestAsCompatibleData" name="test_zeros_like" time="0.011" /><testcase classname="xarray.tests.test_variable.TestAsCompatibleData" name="test_ones_like" time="0.011" /><testcase classname="xarray.tests.test_variable.TestAsCompatibleData" name="test_unsupported_type" time="0.012" /><testcase classname="xarray.tests.test_variable" name="test_raise_no_warning_for_nan_in_binary_ops" time="0.010" /><testcase classname="xarray.tests.test_variable.TestBackendIndexing" name="test_NumpyIndexingAdapter" time="0.011" /><testcase classname="xarray.tests.test_variable.TestBackendIndexing" name="test_LazilyIndexedArray" time="0.011" /><testcase classname="xarray.tests.test_variable.TestBackendIndexing" name="test_CopyOnWriteArray" time="0.011" /><testcase classname="xarray.tests.test_variable.TestBackendIndexing" name="test_MemoryCachedArray" time="0.011" /><testcase classname="xarray.tests.test_variable.TestBackendIndexing" name="test_DaskIndexingAdapter" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2706: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable" name="test_clip" time="0.013" /><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_numpy[Variable]" time="0.011" /><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_numpy[IndexVariable]" time="0.012" /><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_dask[Variable]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2752: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_dask[IndexVariable]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2752: requires dask</skipped></testcase><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_pint[Variable]" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2760: requires pint</skipped></testcase><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_pint[IndexVariable]" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2760: requires pint</skipped></testcase><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_sparse[Variable]" time="0.000"><skipped type="pytest.skip" message="requires sparse">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2774: requires sparse</skipped></testcase><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_sparse[IndexVariable]" time="0.000"><skipped type="pytest.skip" message="requires sparse">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2774: requires sparse</skipped></testcase><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_cupy[Variable]" time="0.000"><skipped type="pytest.skip" message="requires cupy">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2788: requires cupy</skipped></testcase><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_cupy[IndexVariable]" time="0.000"><skipped type="pytest.skip" message="requires cupy">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2788: requires cupy</skipped></testcase><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_pint_wrapping_dask[Variable]" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2800: requires pint</skipped></testcase><testcase classname="xarray.tests.test_variable.TestNumpyCoercion" name="test_from_pint_wrapping_dask[IndexVariable]" time="0.000"><skipped type="pytest.skip" message="requires pint">/workdir/xarray-2022.12.0/xarray/tests/test_variable.py:2800: requires pint</skipped></testcase><testcase classname="xarray.tests.test_variable" name="test_datetime_conversion_warning[2000-01-01T00:00:00.000000000-False]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_datetime_conversion_warning[2000-01-01T00:00:00-True]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_datetime_conversion_warning[['2000-01-01T00:00:00.000000000']-False]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_datetime_conversion_warning[['2000-01-01T00:00:00']-True]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_datetime_conversion_warning[DatetimeIndex(['2000-01-01'], dtype='datetime64[ns]', freq='D')-False]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_datetime_conversion_warning[2000-01-01 00:00:00-False]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_datetime_conversion_warning[[datetime.datetime(2000, 1, 1, 0, 0)]-False]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_datetime_conversion_warning[DatetimeIndex(['2000-01-01 00:00:00-05:00'], dtype='datetime64[ns, US/Eastern]', freq='D')-False]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_datetime_conversion_warning[0   2000-01-01 00:00:00-05:00\ndtype: datetime64[ns, US/Eastern]-False]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_pandas_two_only_datetime_conversion_warnings" time="0.013" /><testcase classname="xarray.tests.test_variable" name="test_timedelta_conversion_warning[10 nanoseconds-False]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_timedelta_conversion_warning[10 seconds-True]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_timedelta_conversion_warning[[10]-False]" time="0.010" /><testcase classname="xarray.tests.test_variable" name="test_timedelta_conversion_warning[[10]-True]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_timedelta_conversion_warning[TimedeltaIndex(['0 days 00:00:00.000000001'], dtype='timedelta64[ns]', freq='D')-False]" time="0.010" /><testcase classname="xarray.tests.test_variable" name="test_timedelta_conversion_warning[1 day, 0:00:00-False]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_timedelta_conversion_warning[[datetime.timedelta(days=1)]-False]" time="0.011" /><testcase classname="xarray.tests.test_variable" name="test_pandas_two_only_timedelta_conversion_warning" time="0.011" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_non_DataArray_weights[True]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_non_DataArray_weights[False]" time="0.010" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_weights_nan_raises[weights0-True]" time="0.011" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_weights_nan_raises[weights0-False]" time="0.011" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_weights_nan_raises[weights1-True]" time="0.011" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_weights_nan_raises[weights1-False]" time="0.011" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_weights_nan_raises_dask[weights0-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:38: requires dask</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_weights_nan_raises_dask[weights0-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:38: requires dask</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_weights_nan_raises_dask[weights1-True]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:38: requires dask</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_weights_nan_raises_dask[weights1-False]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:38: requires dask</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_lazy_resample[1AS-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:56: requires dask</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_lazy_resample[1AS-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:56: requires dask</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_lazy_resample[5AS-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:56: requires dask</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_lazy_resample[5AS-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:56: requires dask</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_lazy_resample[10AS-1]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:56: requires dask</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_lazy_resample[10AS-5]" time="0.000"><skipped type="pytest.skip" message="requires dask">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:56: requires dask</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_weights_no_nan[weights0-3]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_weights_no_nan[weights1-2]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_weights_no_nan[weights2-nan]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_weights_no_nan[weights3-nan]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_weights_nan[weights0-2]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_weights_nan[weights1-nan]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_weights_nan[weights2-nan]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_weights_nan[weights3-1]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_weights_bool" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[True-0-da0]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[True-0-da1]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[True-0-da2]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[True-1-da0]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[True-1-da1]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[True-1-da2]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[True-3.14-da0]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[True-3.14-da1]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[True-3.14-da2]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[False-0-da0]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[False-0-da1]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[False-0-da2]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[False-1-da0]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[False-1-da1]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[False-1-da2]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[False-3.14-da0]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[False-3.14-da1]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_equal_weights[False-3.14-da2]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_no_nan[weights0-5]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_no_nan[weights1-4]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_no_nan[weights2-0]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_nan[True-weights0-4]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_nan[True-weights1-4]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_nan[True-weights2-0]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_nan[True-weights3-0]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_nan[False-weights0-4]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_nan[False-weights1-4]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_nan[False-weights2-0]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_nan[False-weights3-0]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[1-True-da0]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[1-True-da1]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[1-True-da2]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[1-False-da0]" time="0.016" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[1-False-da1]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[1-False-da2]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[2-True-da0]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[2-True-da1]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[2-True-da2]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[2-False-da0]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[2-False-da1]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[2-False-da2]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[3.14-True-da0]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[3.14-True-da1]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[3.14-True-da2]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[3.14-False-da0]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[3.14-False-da1]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_equal_weights[3.14-False-da2]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_no_nan[weights0-1.6]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_no_nan[weights1-1.0]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_no_nan[weights2-nan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_no_nan[weights0-expected0]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_no_nan[weights1-expected1]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_zero_weights" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_simple" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_nan[True]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_nan[False]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-True-0.5-nonan]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-True-0.5-singlenan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-True-0.5-allnan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-True-q1-nonan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-True-q1-singlenan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-True-q1-allnan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-False-0.5-nonan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-False-0.5-singlenan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-False-0.5-allnan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-False-q1-nonan]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-False-q1-singlenan]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[1-False-q1-allnan]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-True-0.5-nonan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-True-0.5-singlenan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-True-0.5-allnan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-True-q1-nonan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-True-q1-singlenan]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-True-q1-allnan]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-False-0.5-nonan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-False-0.5-singlenan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-False-0.5-allnan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-False-q1-nonan]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-False-q1-singlenan]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights[3.14-False-q1-allnan]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-True-0.5-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-True-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-True-0.5-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-True-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-True-q1-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-True-q1-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-False-0.5-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-False-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-False-0.5-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-False-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-False-q1-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[linear-False-q1-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-True-0.5-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-True-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-True-0.5-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-True-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-True-q1-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-True-q1-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-False-0.5-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-False-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-False-0.5-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-False-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-False-q1-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[interpolated_inverted_cdf-False-q1-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-True-0.5-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-True-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-True-0.5-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-True-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-True-q1-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-True-q1-da2]" time="0.001"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-False-0.5-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-False-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-False-0.5-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-False-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-False-q1-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[hazen-False-q1-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-True-0.5-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-True-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-True-0.5-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-True-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-True-q1-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-True-q1-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-False-0.5-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-False-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-False-0.5-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-False-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-False-q1-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[weibull-False-q1-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-True-0.5-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-True-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-True-0.5-da2]" time="0.001"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-True-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-True-q1-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-True-q1-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-False-0.5-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-False-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-False-0.5-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-False-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-False-q1-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[median_unbiased-False-q1-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-True-0.5-da0]" time="0.001"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-True-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-True-0.5-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-True-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-True-q1-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-True-q1-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-False-0.5-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-False-0.5-da1]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-False-0.5-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-False-q1-da0]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-False-q1-da1]" time="0.001"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_equal_weights_all_methods[normal_unbiased2-False-q1-da2]" time="0.000"><skipped type="pytest.skip" message="`method` argument is not currently exposed">/workdir/xarray-2022.12.0/xarray/tests/test_weighted.py:302: `method` argument is not currently exposed</skipped></testcase><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_bool" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_with_invalid_q[-1]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_with_invalid_q[1.1]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_with_invalid_q[q2]" time="0.011" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_with_invalid_q[q3]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_nan[True-weights0-2.0]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_nan[True-weights1-nan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_nan[True-weights2-nan]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_nan[False-weights0-2.0]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_nan[False-weights1-nan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_nan[False-weights2-nan]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_mean_bool" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_squares_no_nan[weights0-0.6666666666666666]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_squares_no_nan[weights1-0]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_squares_no_nan[weights2-0]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_squares_no_nan[weights3-0]" time="0.016" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_squares_nan[weights0-0]" time="0.016" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_squares_nan[weights1-0]" time="0.016" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_squares_nan[weights2-0]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_sum_of_squares_nan[weights3-0]" time="0.045" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[1-True-da0]" time="0.047" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[1-True-da1]" time="0.036" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[1-False-da0]" time="0.040" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[1-False-da1]" time="0.035" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[2-True-da0]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[2-True-da1]" time="0.022" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[2-False-da0]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[2-False-da1]" time="0.021" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[3.14-True-da0]" time="0.021" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[3.14-True-da1]" time="0.019" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[3.14-False-da0]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_equal_weights[3.14-False-da1]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_no_nan[weights0-0.24]" time="0.017" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_no_nan[weights1-0.0]" time="0.017" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_no_nan[weights2-nan]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_nan[weights0-0]" time="0.019" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_nan[weights1-nan]" time="0.019" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_nan[weights2-nan]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_var_bool" time="0.017" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[1-True-da0]" time="0.019" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[1-True-da1]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[1-False-da0]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[1-False-da1]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[2-True-da0]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[2-True-da1]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[2-False-da0]" time="0.019" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[2-False-da1]" time="0.019" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[3.14-True-da0]" time="0.020" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[3.14-True-da1]" time="0.020" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[3.14-False-da0]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_equal_weights[3.14-False-da1]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_no_nan[weights0-0.4898979485566356]" time="0.017" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_no_nan[weights1-0.0]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_no_nan[weights2-nan]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_nan[weights0-0]" time="0.019" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_nan[weights1-nan]" time="0.019" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_nan[weights2-nan]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_std_bool" time="0.017" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-True-a]" time="0.165" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-True-b]" time="0.164" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-True-c]" time="0.164" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-True-dim3]" time="0.151" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-True-dim4]" time="0.137" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-True-None]" time="0.134" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-False-a]" time="0.163" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-False-b]" time="0.178" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-False-c]" time="0.166" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-False-dim3]" time="0.155" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-False-dim4]" time="0.137" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[None-False-None]" time="0.141" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-True-a]" time="0.174" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-True-b]" time="0.172" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-True-c]" time="0.169" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-True-dim3]" time="0.155" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-True-dim4]" time="0.136" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-True-None]" time="0.136" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-False-a]" time="0.167" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-False-b]" time="0.169" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-False-c]" time="0.168" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-False-dim3]" time="0.157" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-False-dim4]" time="0.140" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[True-False-None]" time="0.143" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-True-a]" time="0.157" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-True-b]" time="0.162" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-True-c]" time="0.154" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-True-dim3]" time="0.141" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-True-dim4]" time="0.124" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-True-None]" time="0.123" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-False-a]" time="0.154" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-False-b]" time="0.159" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-False-c]" time="0.155" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-False-dim3]" time="0.287" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-False-dim4]" time="0.158" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_3D[False-False-None]" time="0.124" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-0.5-a]" time="0.029" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-0.5-b]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-0.5-c]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-0.5-dim3]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-0.5-dim4]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-0.5-None]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q1-a]" time="0.028" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q1-b]" time="0.028" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q1-c]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q1-dim3]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q1-dim4]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q1-None]" time="0.024" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q2-a]" time="0.031" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q2-b]" time="0.031" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q2-c]" time="0.028" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q2-dim3]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q2-dim4]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-True-q2-None]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-0.5-a]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-0.5-b]" time="0.031" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-0.5-c]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-0.5-dim3]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-0.5-dim4]" time="0.022" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-0.5-None]" time="0.022" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q1-a]" time="0.028" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q1-b]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q1-c]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q1-dim3]" time="0.024" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q1-dim4]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q1-None]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q2-a]" time="0.028" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q2-b]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q2-c]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q2-dim3]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q2-dim4]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[None-False-q2-None]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-0.5-a]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-0.5-b]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-0.5-c]" time="0.026" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-0.5-dim3]" time="0.024" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-0.5-dim4]" time="0.022" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-0.5-None]" time="0.022" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q1-a]" time="0.031" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q1-b]" time="0.029" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q1-c]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q1-dim3]" time="0.024" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q1-dim4]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q1-None]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q2-a]" time="0.028" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q2-b]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q2-c]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q2-dim3]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q2-dim4]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-True-q2-None]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-0.5-a]" time="0.028" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-0.5-b]" time="0.026" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-0.5-c]" time="0.026" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-0.5-dim3]" time="0.028" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-0.5-dim4]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-0.5-None]" time="0.026" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q1-a]" time="0.032" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q1-b]" time="0.029" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q1-c]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q1-dim3]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q1-dim4]" time="0.022" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q1-None]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q2-a]" time="0.029" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q2-b]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q2-c]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q2-dim3]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q2-dim4]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[True-False-q2-None]" time="0.024" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-0.5-a]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-0.5-b]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-0.5-c]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-0.5-dim3]" time="0.024" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-0.5-dim4]" time="0.026" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-0.5-None]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q1-a]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q1-b]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q1-c]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q1-dim3]" time="0.024" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q1-dim4]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q1-None]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q2-a]" time="0.026" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q2-b]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q2-c]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q2-dim3]" time="0.024" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q2-dim4]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-True-q2-None]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-0.5-a]" time="0.029" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-0.5-b]" time="0.029" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-0.5-c]" time="0.028" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-0.5-dim3]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-0.5-dim4]" time="0.022" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-0.5-None]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q1-a]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q1-b]" time="0.026" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q1-c]" time="0.026" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q1-dim3]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q1-dim4]" time="0.024" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q1-None]" time="0.024" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q2-a]" time="0.028" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q2-b]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q2-c]" time="0.027" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q2-dim3]" time="0.025" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q2-dim4]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_quantile_3D[False-False-q2-None]" time="0.023" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_nonequal_coords[coords_weights0-coords_data0-2.5]" time="0.131" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_nonequal_coords[coords_weights1-coords_data1-1.8]" time="0.132" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_nonequal_coords[coords_weights2-coords_data2-3.8]" time="0.134" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-True-shape_weights0-shape_data0]" time="0.184" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-True-shape_weights0-shape_data1]" time="0.208" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-True-shape_weights0-shape_data2]" time="0.212" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-True-shape_weights1-shape_data0]" time="0.210" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-True-shape_weights1-shape_data1]" time="0.207" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-True-shape_weights1-shape_data2]" time="0.216" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-True-shape_weights2-shape_data0]" time="0.222" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-True-shape_weights2-shape_data1]" time="0.201" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-True-shape_weights2-shape_data2]" time="0.188" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-False-shape_weights0-shape_data0]" time="0.181" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-False-shape_weights0-shape_data1]" time="0.276" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-False-shape_weights0-shape_data2]" time="0.248" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-False-shape_weights1-shape_data0]" time="0.185" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-False-shape_weights1-shape_data1]" time="0.193" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-False-shape_weights1-shape_data2]" time="0.185" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-False-shape_weights2-shape_data0]" time="0.183" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-False-shape_weights2-shape_data1]" time="0.196" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[None-False-shape_weights2-shape_data2]" time="0.188" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-True-shape_weights0-shape_data0]" time="0.177" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-True-shape_weights0-shape_data1]" time="0.182" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-True-shape_weights0-shape_data2]" time="0.215" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-True-shape_weights1-shape_data0]" time="0.185" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-True-shape_weights1-shape_data1]" time="0.181" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-True-shape_weights1-shape_data2]" time="0.185" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-True-shape_weights2-shape_data0]" time="0.183" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-True-shape_weights2-shape_data1]" time="0.186" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-True-shape_weights2-shape_data2]" time="0.185" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-False-shape_weights0-shape_data0]" time="0.190" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-False-shape_weights0-shape_data1]" time="0.183" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-False-shape_weights0-shape_data2]" time="0.184" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-False-shape_weights1-shape_data0]" time="0.183" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-False-shape_weights1-shape_data1]" time="0.181" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-False-shape_weights1-shape_data2]" time="0.186" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-False-shape_weights2-shape_data0]" time="0.184" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-False-shape_weights2-shape_data1]" time="0.190" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[True-False-shape_weights2-shape_data2]" time="0.192" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-True-shape_weights0-shape_data0]" time="0.158" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-True-shape_weights0-shape_data1]" time="0.159" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-True-shape_weights0-shape_data2]" time="0.174" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-True-shape_weights1-shape_data0]" time="0.162" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-True-shape_weights1-shape_data1]" time="0.159" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-True-shape_weights1-shape_data2]" time="0.164" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-True-shape_weights2-shape_data0]" time="0.216" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-True-shape_weights2-shape_data1]" time="0.268" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-True-shape_weights2-shape_data2]" time="0.169" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-False-shape_weights0-shape_data0]" time="0.155" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-False-shape_weights0-shape_data1]" time="0.173" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-False-shape_weights0-shape_data2]" time="0.166" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-False-shape_weights1-shape_data0]" time="0.163" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-False-shape_weights1-shape_data1]" time="0.167" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-False-shape_weights1-shape_data2]" time="0.176" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-False-shape_weights2-shape_data0]" time="0.164" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-False-shape_weights2-shape_data1]" time="0.164" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_different_shapes[False-False-shape_weights2-shape_data2]" time="0.163" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-True-sum_of_weights]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-True-sum]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-True-mean]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-True-sum_of_squares]" time="0.017" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-True-var]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-True-std]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-True-quantile]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-False-sum_of_weights]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-False-sum]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-False-mean]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-False-sum_of_squares]" time="0.016" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-False-var]" time="0.019" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-False-std]" time="0.020" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[True-False-quantile]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-True-sum_of_weights]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-True-sum]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-True-mean]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-True-sum_of_squares]" time="0.016" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-True-var]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-True-std]" time="0.019" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-True-quantile]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-False-sum_of_weights]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-False-sum]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-False-mean]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-False-sum_of_squares]" time="0.016" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-False-var]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-False-std]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[False-False-quantile]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-True-sum_of_weights]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-True-sum]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-True-mean]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-True-sum_of_squares]" time="0.016" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-True-var]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-True-std]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-True-quantile]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-False-sum_of_weights]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-False-sum]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-False-mean]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-False-sum_of_squares]" time="0.016" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-False-var]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-False-std]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr[None-False-quantile]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr_da_in_ds[sum_of_weights]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr_da_in_ds[sum]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr_da_in_ds[mean]" time="0.015" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr_da_in_ds[sum_of_squares]" time="0.016" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr_da_in_ds[var]" time="0.018" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr_da_in_ds[std]" time="0.019" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_operations_keep_attr_da_in_ds[quantile]" time="0.014" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_bad_dim[True-sum_of_weights]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_bad_dim[True-sum]" time="0.013" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_bad_dim[True-mean]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_bad_dim[True-quantile]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_bad_dim[False-sum_of_weights]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_bad_dim[False-sum]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_bad_dim[False-mean]" time="0.012" /><testcase classname="xarray.tests.test_weighted" name="test_weighted_bad_dim[False-quantile]" time="0.262" /></testsuite></testsuites>