<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="0" skipped="2" tests="243" time="6.032" timestamp="2023-11-22T14:09:07.432988" hostname="80ac3eb7f7f2"><testcase classname="numpydoc.numpydoc" name="numpydoc.numpydoc.match_items" time="0.020" /><testcase classname="numpydoc.validate" name="numpydoc.validate.Validator._load_obj" time="0.003" /><testcase classname="numpydoc.tests.test_docscrape" name="test_signature[flush]" time="0.006" /><testcase classname="numpydoc.tests.test_docscrape" name="test_signature[newline_indented]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_summary[flush]" time="0.004" /><testcase classname="numpydoc.tests.test_docscrape" name="test_summary[newline_indented]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_extended_summary[flush]" time="0.004" /><testcase classname="numpydoc.tests.test_docscrape" name="test_extended_summary[newline_indented]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_parameters[flush]" time="0.006" /><testcase classname="numpydoc.tests.test_docscrape" name="test_parameters[newline_indented]" time="0.004" /><testcase classname="numpydoc.tests.test_docscrape" name="test_other_parameters[flush]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_other_parameters[newline_indented]" time="0.004" /><testcase classname="numpydoc.tests.test_docscrape" name="test_returns[flush]" time="0.004" /><testcase classname="numpydoc.tests.test_docscrape" name="test_returns[newline_indented]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_yields" time="0.001" /><testcase classname="numpydoc.tests.test_docscrape" name="test_sent" time="0.001" /><testcase classname="numpydoc.tests.test_docscrape" name="test_returnyield" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_section_twice" time="0.032" /><testcase classname="numpydoc.tests.test_docscrape" name="test_notes[flush]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_notes[newline_indented]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_references[flush]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_references[newline_indented]" time="0.007" /><testcase classname="numpydoc.tests.test_docscrape" name="test_examples[flush]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_examples[newline_indented]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_index[flush]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_index[newline_indented]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_str[flush]" time="0.006" /><testcase classname="numpydoc.tests.test_docscrape" name="test_str[newline_indented]" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_yield_str" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_receives_str" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_no_index_in_str" time="0.003" /><testcase classname="numpydoc.tests.test_docscrape" name="test_sphinx_str" time="0.012" /><testcase classname="numpydoc.tests.test_docscrape" name="test_sphinx_yields_str" time="0.008" /><testcase classname="numpydoc.tests.test_docscrape" name="test_parameters_without_extended_description" time="0.001" /><testcase classname="numpydoc.tests.test_docscrape" name="test_escape_stars" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_empty_extended_summary" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_raises" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_warns" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_see_also[]" time="0.003" /><testcase classname="numpydoc.tests.test_docscrape" name="test_see_also[\n    ]" time="0.003" /><testcase classname="numpydoc.tests.test_docscrape" name="test_see_also_parse_error" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_see_also_print" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_see_also_trailing_comma_warning" time="0.004" /><testcase classname="numpydoc.tests.test_docscrape" name="test_unknown_section" time="0.016" /><testcase classname="numpydoc.tests.test_docscrape" name="test_empty_first_line" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_returns_with_roles_no_names" time="0.003" /><testcase classname="numpydoc.tests.test_docscrape" name="test_trailing_colon" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_no_summary" time="0.013" /><testcase classname="numpydoc.tests.test_docscrape" name="test_unicode" time="0.015" /><testcase classname="numpydoc.tests.test_docscrape" name="test_plot_examples" time="0.032" /><testcase classname="numpydoc.tests.test_docscrape" name="test_class_members" time="0.040" /><testcase classname="numpydoc.tests.test_docscrape" name="test_duplicate_signature" time="0.002" /><testcase classname="numpydoc.tests.test_docscrape" name="test_class_members_doc" time="0.004" /><testcase classname="numpydoc.tests.test_docscrape" name="test_class_members_doc_sphinx" time="0.017" /><testcase classname="numpydoc.tests.test_docscrape" name="test_class_attributes_as_member_list" time="0.028" /><testcase classname="numpydoc.tests.test_docscrape" name="test_templated_sections" time="0.005" /><testcase classname="numpydoc.tests.test_docscrape" name="test_nonstandard_property" time="0.034" /><testcase classname="numpydoc.tests.test_docscrape" name="test_args_and_kwargs" time="0.013" /><testcase classname="numpydoc.tests.test_docscrape" name="test_autoclass" time="0.013" /><testcase classname="numpydoc.tests.test_docscrape" name="test_xref" time="0.016" /><testcase classname="numpydoc.tests.test_docscrape" name="test__error_location_no_name_attr" time="0.014" /><testcase classname="numpydoc.tests.test_docscrape" name="test_class_docstring_cached_property" time="0.036" /><testcase classname="numpydoc.tests.test_full" name="test_MyClass" time="2.758" /><testcase classname="numpydoc.tests.test_full" name="test_my_function" time="0.003" /><testcase classname="numpydoc.tests.test_full" name="test_reference[html_file0-1]" time="0.004" /><testcase classname="numpydoc.tests.test_full" name="test_reference[html_file1-1]" time="0.003" /><testcase classname="numpydoc.tests.test_full" name="test_reference[html_file2-1]" time="0.004" /><testcase classname="numpydoc.tests.test_main" name="test_main._capture_stdout" time="0.003" /><testcase classname="numpydoc.tests.test_main" name="test_renders_package_docstring" time="0.012" /><testcase classname="numpydoc.tests.test_main" name="test_renders_module_docstring" time="0.009" /><testcase classname="numpydoc.tests.test_main" name="test_renders_function_docstring" time="0.016" /><testcase classname="numpydoc.tests.test_main" name="test_render_object_returns_correct_exit_status" time="0.016" /><testcase classname="numpydoc.tests.test_main" name="test_validate_detects_errors" time="0.011" /><testcase classname="numpydoc.tests.test_main" name="test_validate_perfect_docstring" time="0.013" /><testcase classname="numpydoc.tests.test_numpydoc" name="test_mangle_docstrings_basic" time="0.039" /><testcase classname="numpydoc.tests.test_numpydoc" name="test_mangle_docstrings_inherited_class_members" time="0.039" /><testcase classname="numpydoc.tests.test_numpydoc" name="test_clean_text_signature" time="0.002" /><testcase classname="numpydoc.tests.test_numpydoc" name="test_mangle_docstring_validation_warnings[numpydoc_validation_checks0-expected_warn0-non_warnings0]" time="0.011" /><testcase classname="numpydoc.tests.test_numpydoc" name="test_mangle_docstring_validation_warnings[numpydoc_validation_checks1-expected_warn1-non_warnings1]" time="0.013" /><testcase classname="numpydoc.tests.test_numpydoc" name="test_mangle_docstring_validation_warnings[numpydoc_validation_checks2-expected_warn2-non_warnings2]" time="0.013" /><testcase classname="numpydoc.tests.test_numpydoc" name="test_mangle_docstring_validation_exclude" time="0.013" /><testcase classname="numpydoc.tests.test_numpydoc" name="test_update_config_invalid_validation_set" time="0.002" /><testcase classname="numpydoc.tests.test_numpydoc" name="test_update_config_exclude_str" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.BadExamples.indentation_is_not_a_multiple_of_four" time="0.003" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.BadExamples.missing_whitespace_after_comma" time="0.003" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.BadExamples.missing_whitespace_around_arithmetic_operator" time="0.003" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.BadGenericDocStrings.sections_in_wrong_order" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.contains" time="0.003" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.empty_returns" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.good_imports" time="0.003" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.head" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.head1" time="0.003" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.mode" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.multiple_variables_on_one_line" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.no_returns" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.other_parameters" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.parameters_with_trailing_underscores" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.plot" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.random_letters" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.sample" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.sample_values" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.summary_starts_with_number" time="0.003" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.swap" time="0.003" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.valid_options_in_parameter_description_sets" time="0.002" /><testcase classname="numpydoc.tests.test_validate" name="test_validate.GoodDocStrings.warnings" time="0.002" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_one_liner" time="0.010" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_class" time="0.018" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[plot]" time="0.009" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[swap]" time="0.008" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[sample]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[random_letters]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[sample_values]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[head]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[head1]" time="0.009" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[summary_starts_with_number]" time="0.009" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[contains]" time="0.013" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[mode]" time="0.010" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[good_imports]" time="0.009" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[no_returns]" time="0.008" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[empty_returns]" time="0.008" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[multiple_variables_on_one_line]" time="0.009" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[other_parameters]" time="0.009" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[warnings]" time="0.008" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[valid_options_in_parameter_description_sets]" time="0.009" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_good_functions[parameters_with_trailing_underscores]" time="0.009" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_class" time="0.015" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_generic_functions[func]" time="0.008" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_generic_functions[astype]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_generic_functions[astype1]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_generic_functions[astype2]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_generic_functions[astype3]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_generic_functions[plot]" time="0.009" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_generic_functions[directives_without_two_colons]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadGenericDocStrings-unknown_section-msgs0]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadGenericDocStrings-sections_in_wrong_order-msgs1]" time="0.008" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadGenericDocStrings-deprecation_in_wrong_order-msgs2]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadGenericDocStrings-directives_without_two_colons-msgs3]" time="0.009" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadSeeAlso-no_desc-msgs4]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadSeeAlso-desc_no_period-msgs5]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadSeeAlso-desc_first_letter_lowercase-msgs6]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadSummaries-no_summary-msgs7]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadSummaries-heading_whitespaces-msgs8]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadSummaries-wrong_line-msgs9]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadSummaries-no_punctuation-msgs10]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadSummaries-no_capitalization-msgs11]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadSummaries-no_capitalization-msgs12]" time="0.005" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadSummaries-multi_line-msgs13]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadSummaries-two_paragraph_multi_line-msgs14]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-no_type-msgs15]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-type_with_period-msgs16]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-no_description-msgs17]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-missing_params-msgs18]" time="0.008" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-bad_colon_spacing-msgs19]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-no_description_period-msgs20]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-no_description_period_with_directive-msgs21]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-parameter_capitalization-msgs22]" time="0.005" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-integer_parameter-msgs23]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-string_parameter-msgs24]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-boolean_parameter-msgs25]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-list_incorrect_parameter_type-msgs26]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-list_incorrect_parameter_type-msgs27]" time="0.008" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-list_incorrect_parameter_type-msgs28]" time="0.009" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-bad_parameter_spacing-msgs29]" time="0.010" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadParameters-blank_lines-msgs30]" time="0.008"><skipped type="pytest.xfail" message="" /></testcase><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadReturns-return_not_documented-msgs31]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadReturns-yield_not_documented-msgs32]" time="0.005" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadReturns-no_type-msgs33]" time="0.007"><skipped type="pytest.xfail" message="" /></testcase><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadReturns-no_description-msgs34]" time="0.005" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadReturns-no_punctuation-msgs35]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadReturns-named_single_return-msgs36]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadReturns-no_capitalization-msgs37]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadReturns-no_period_multi-msgs38]" time="0.006" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadGenericDocStrings-method_wo_docstrings-msgs39]" time="0.004" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadGenericDocStrings-two_linebreaks_between_sections-msgs40]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidator" name="test_bad_docstrings[BadGenericDocStrings-linebreak_at_end_of_docstring-msgs41]" time="0.007" /><testcase classname="numpydoc.tests.test_validate.TestValidatorClass" name="test_raises_for_invalid_module_name[unknown_mod]" time="0.004" /><testcase classname="numpydoc.tests.test_validate.TestValidatorClass" name="test_raises_for_invalid_module_name[unknown_mod.MyClass]" time="0.005" /><testcase classname="numpydoc.tests.test_validate.TestValidatorClass" name="test_raises_for_invalid_attribute_name[datetime.BadClassName]" time="0.003" /><testcase classname="numpydoc.tests.test_validate.TestValidatorClass" name="test_raises_for_invalid_attribute_name[datetime.bad_method_name]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[(...) array_like, float, optional-(...) :term:`numpy:array_like`, :class:`python:float`, optional]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[(2,) ndarray-(2,) :obj:`ndarray &lt;numpy.ndarray&gt;`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[(...,M,N) array_like-(...,M,N) :term:`numpy:array_like`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[(..., M, N) array_like-(..., :obj:`M`, :obj:`N`) :term:`numpy:array_like`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[(float, float), optional-(:class:`python:float`, :class:`python:float`), optional]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[1-D array or sequence-1-D :obj:`array &lt;numpy.ndarray&gt;` or :term:`python:sequence`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[array of str or unicode-like-:obj:`array &lt;numpy.ndarray&gt;` of :class:`python:str` or unicode-like]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[array_like of float-:term:`numpy:array_like` of :class:`python:float`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[bool or callable-:ref:`bool &lt;python:bltin-boolean-values&gt;` or :func:`python:callable`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[int in [0, 255]-:class:`python:int` in [0, 255]]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[int or None, optional-:class:`python:int` or :data:`python:None`, optional]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[list of str or array_like-:class:`python:list` of :class:`python:str` or :term:`numpy:array_like`]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[sequence of array_like-:term:`python:sequence` of :term:`numpy:array_like`]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[str or pathlib.Path-:class:`python:str` or :obj:`pathlib.Path`]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[{'', string}, optional-{'', :class:`python:str`}, optional]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[{'C', 'F', 'A', or 'K'}, optional-{'C', 'F', 'A', or 'K'}, optional]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[{'linear', 'lower', 'higher', 'midpoint', 'nearest'}-{'linear', 'lower', 'higher', 'midpoint', 'nearest'}]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[{False, True, 'greedy', 'optimal'}-{:data:`python:False`, :data:`python:True`, 'greedy', 'optimal'}]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[{{'begin', 1}, {'end', 0}}, {string, int}-{{'begin', 1}, {'end', 0}}, {:class:`python:str`, :class:`python:int`}]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[callable f'(x,*args)-:func:`python:callable` f'(x,*args)]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[callable ``fhess(x, *args)``, optional-:func:`python:callable` ``fhess(x, *args)``, optional]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[spmatrix (format: ``csr``, ``bsr``, ``dia`` or coo``)-:obj:`spmatrix` (format: ``csr``, ``bsr``, ``dia`` or coo``)]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[:ref:`strftime &lt;strftime-strptime-behavior&gt;`-:ref:`strftime &lt;strftime-strptime-behavior&gt;`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[callable or :ref:`strftime &lt;strftime-strptime-behavior&gt;`-:func:`python:callable` or :ref:`strftime &lt;strftime-strptime-behavior&gt;`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[callable or :ref:`strftime behavior &lt;strftime-strptime-behavior&gt;`-:func:`python:callable` or :ref:`strftime behavior &lt;strftime-strptime-behavior&gt;`]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[list(int)-:class:`python:list`\\(:class:`python:int`)]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[list[int]-:class:`python:list`\\[:class:`python:int`]]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[dict(str, int)-:class:`python:dict`\\(:class:`python:str`, :class:`python:int`)]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[dict[str,  int]-:class:`python:dict`\\[:class:`python:str`,  :class:`python:int`]]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[tuple(float, float)-:class:`python:tuple`\\(:class:`python:float`, :class:`python:float`)]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref[dict[tuple(str, str), int]-:class:`python:dict`\\[:class:`python:tuple`\\(:class:`python:str`, :class:`python:str`), :class:`python:int`]]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[(...) array_like, float, optional-(...) :term:`numpy:array_like`, :class:`python:float`, optional]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[(2,) ndarray-(2,) :obj:`ndarray &lt;numpy.ndarray&gt;`]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[(...,M,N) array_like-(...,M,N) :term:`numpy:array_like`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[(..., M, N) array_like-(..., M, N) :term:`numpy:array_like`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[(float, float), optional-(:class:`python:float`, :class:`python:float`), optional]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[1-D array or sequence-1-D :obj:`array &lt;numpy.ndarray&gt;` or :term:`python:sequence`]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[array of str or unicode-like-:obj:`array &lt;numpy.ndarray&gt;` of :class:`python:str` or unicode-like]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[array_like of float-:term:`numpy:array_like` of :class:`python:float`]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[bool or callable-:ref:`bool &lt;python:bltin-boolean-values&gt;` or :func:`python:callable`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[int in [0, 255]-:class:`python:int` in [0, 255]]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[int or None, optional-:class:`python:int` or :data:`python:None`, optional]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[list of str or array_like-:class:`python:list` of :class:`python:str` or :term:`numpy:array_like`]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[sequence of array_like-:term:`python:sequence` of :term:`numpy:array_like`]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[str or pathlib.Path-:class:`python:str` or pathlib.Path]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[{'', string}, optional-{'', :class:`python:str`}, optional]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[{'C', 'F', 'A', or 'K'}, optional-{'C', 'F', 'A', or 'K'}, optional]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[{'linear', 'lower', 'higher', 'midpoint', 'nearest'}-{'linear', 'lower', 'higher', 'midpoint', 'nearest'}]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[{False, True, 'greedy', 'optimal'}-{:data:`python:False`, :data:`python:True`, 'greedy', 'optimal'}]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[{{'begin', 1}, {'end', 0}}, {string, int}-{{'begin', 1}, {'end', 0}}, {:class:`python:str`, :class:`python:int`}]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[callable f'(x,*args)-:func:`python:callable` f'(x,*args)]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[callable ``fhess(x, *args)``, optional-:func:`python:callable` ``fhess(x, *args)``, optional]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[spmatrix (format: ``csr``, ``bsr``, ``dia`` or coo``)-spmatrix (format: ``csr``, ``bsr``, ``dia`` or coo``)]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[:ref:`strftime &lt;strftime-strptime-behavior&gt;`-:ref:`strftime &lt;strftime-strptime-behavior&gt;`]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[callable or :ref:`strftime &lt;strftime-strptime-behavior&gt;`-:func:`python:callable` or :ref:`strftime &lt;strftime-strptime-behavior&gt;`]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[callable or :ref:`strftime behavior &lt;strftime-strptime-behavior&gt;`-:func:`python:callable` or :ref:`strftime behavior &lt;strftime-strptime-behavior&gt;`]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[list(int)-:class:`python:list`\\(:class:`python:int`)]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[list[int]-:class:`python:list`\\[:class:`python:int`]]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[dict(str, int)-:class:`python:dict`\\(:class:`python:str`, :class:`python:int`)]" time="0.002" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[dict[str,  int]-:class:`python:dict`\\[:class:`python:str`,  :class:`python:int`]]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[tuple(float, float)-:class:`python:tuple`\\(:class:`python:float`, :class:`python:float`)]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_make_xref_ignore_unknown[dict[tuple(str, str), int]-:class:`python:dict`\\[:class:`python:tuple`\\(:class:`python:str`, :class:`python:str`), :class:`python:int`]]" time="0.003" /><testcase classname="numpydoc.tests.test_xref" name="test_xref_ignore_is_all" time="0.003" /></testsuite></testsuites>