# MCD: Automatically copied from pyproject.toml's legacy_tox_ini key
[tox]
# Only run unittest envs when no args given to tox
envlist = py{37,38,39,310}
isolated_build = True

[testenv:py{37,38,39,310}]
description = run tests against a built package
commands =
    python -m unittest {posargs}

[testenv:profile]
description = run profiler (use e.g. `firefox .tox/prof/combined.svg` to open)
setenv =
    PROFILER_ITERATIONS=1000
deps =
    -r profiler/requirements.txt
commands =
    pytest profiler/test_for_profiler.py --profile-svg --pstats-dir "{toxworkdir}/prof"
    python -c 'import pathlib; print("profiler svg output under file://\{0\}".format(pathlib.Path(r"{toxworkdir}") / "prof" / "combined.svg"))'

[testenv:pre-commit]
description = run linters
skip_install = True
deps = pre-commit
commands = pre-commit run {posargs:--all}

[testenv:benchmark]
description = run the benchmark script against a local Tomli version
deps =
    -r benchmark/requirements.txt
commands =
    python -c 'import datetime; print(datetime.date.today())'
    python --version
    python benchmark/run.py

[testenv:benchmark-pypi]
description = run the benchmark script against the latest Tomli in PyPI
skip_install = True
deps =
    tomli
    -r benchmark/requirements.txt
commands =
    python -c 'import datetime; print(datetime.date.today())'
    python --version
    python benchmark/run.py

[testenv:fuzz]
description = run the fuzzer against a local Tomli version (needs "apt install clang")
deps =
    -r fuzzer/requirements.txt
allowlist_externals =
    mkdir
    cp
commands =
    # Create a folder for persistent corpus and use benchmark data as initial seed
    mkdir -p {toxworkdir}/fuzzer-corpus
    cp -n benchmark/data.toml {toxworkdir}/fuzzer-corpus/data.toml
    # Run fuzzer
    python fuzzer/fuzz.py {toxworkdir}/fuzzer-corpus {posargs:-len_control=10000}
