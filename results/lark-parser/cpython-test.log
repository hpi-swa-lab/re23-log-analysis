GLOB sdist-make: /workdir/lark-parser-0.12.0/setup.py
cpythonlibtest-unit-test-tests create: /workdir/lark-parser-0.12.0/.tox/cpythonlibtest-unit-test-tests
cpythonlibtest-unit-test-tests installdeps: mock, unittest-xml-reporting, -rtest-requirements.txt
cpythonlibtest-unit-test-tests inst: /workdir/lark-parser-0.12.0/.tox/.tmp/package/1/lark-parser-0.12.0.zip
cpythonlibtest-unit-test-tests installed: Js2Py==0.68,lark-parser @ file:///workdir/lark-parser-0.12.0/.tox/.tmp/package/1/lark-parser-0.12.0.zip#sha256=49fae465c416f7039c8f3e020c0a3b0615662325a19138f46ec17aaaaa02c355,lxml==4.9.3,mock==5.1.0,pyjsparser==2.7.1,regex==2023.10.3,six==1.16.0,tzlocal==5.2,unittest-xml-reporting==3.2.0
cpythonlibtest-unit-test-tests run-test-pre: PYTHONHASHSEED='4130282048'
cpythonlibtest-unit-test-tests run-test: commands[0] | /workdir/lark-parser-0.12.0/.tox/cpythonlibtest-unit-test-tests/bin/python -m xmlrunner --output-file /workdir/results/lark-parser/0.12.0/1/cpython-test-results.xml

Running tests...
----------------------------------------------------------------------
...............................Unused rule: <n__ws : xrule_1>
Unused rule: <n_int : xrule_5 xrule_2>
Unused rule: <n_unsigned_decimal : xrule_2 xrule_7>
Unused rule: <n_jsonfloat : xrule_8 xrule_2 xrule_7 xrule_11>
Unused rule: <xrule_1 : __xrule_0_star_0>
Unused rule: <xrule_5 : xrule_3>
Unused rule: <xrule_5 : xrule_4>
Unused rule: <xrule_5 : >
Unused rule: <xrule_11 : __ANON_4 xrule_10 xrule_2>
Unused rule: <xrule_11 : >
Unused rule: <xrule_4 : PLUS>
Unused rule: <xrule_10 : __ANON_3>
Unused rule: <xrule_10 : >
Unused terminals: ['PLUS', '__ANON_3', '__ANON_4']
............Unused terminals: ['CONTINUATION_BYTE']
...ssssss....Unused terminals: ['D', 'E']
...s...Unused terminals: ['B', 'C']
Unused terminals: ['B', 'C']
...s...sssUnused rule: <unused : __unused_star_1>
Unused rule: <unused : >
Unused rule: <__unused_star_1 : x>
Unused rule: <__unused_star_1 : __unused_star_1 x>
...ss..ss..s..................ss.s.s........Unused terminals: ['LCASE_LETTER']
.........s....Unused terminals: ['ID_START', 'ID_CONTINUE']
..........Unused terminals: ['CONTINUATION_BYTE']
...ssssss....Unused terminals: ['D', 'E']
...s...Unused terminals: ['B', 'C']
Unused terminals: ['B', 'C']
.......sssUnused rule: <unused : __unused_star_1>
Unused rule: <unused : >
Unused rule: <__unused_star_1 : x>
Unused rule: <__unused_star_1 : __unused_star_1 x>
...ss..ss..s..................ss.s.s........Unused terminals: ['LCASE_LETTER']
.........s....Unused terminals: ['ID_START', 'ID_CONTINUE']
..........Unused terminals: ['CONTINUATION_BYTE']
........s....Unused terminals: ['D', 'E']
.......Unused terminals: ['B', 'C']
Unused terminals: ['B', 'C']
...s...s..Unused rule: <unused : __unused_star_1>
Unused rule: <unused : >
Unused rule: <__unused_star_1 : x>
Unused rule: <__unused_star_1 : __unused_star_1 x>
...ss...ss.s..................ss...s........Unused terminals: ['LCASE_LETTER']
..............Unused terminals: ['ID_START', 'ID_CONTINUE']
..........Unused terminals: ['CONTINUATION_BYTE']
........s....Unused terminals: ['D', 'E']
.......Unused terminals: ['B', 'C']
Unused terminals: ['B', 'C']
...s...Same State match at example [0][0]
Same State match at example [0][0]
Exact Match at example [1][0]
Same State match at example [2][0]
Same State match at example [2][0]
Same State match at example [2][0]
Same State match at example [2][0]
...Unused rule: <unused : __unused_star_1>
Unused rule: <unused : >
Unused rule: <__unused_star_1 : x>
Unused rule: <__unused_star_1 : __unused_star_1 x>
...ssss..s.s..................ss...s........Unused terminals: ['LCASE_LETTER']
..............Unused terminals: ['ID_START', 'ID_CONTINUE']
..........Unused terminals: ['CONTINUATION_BYTE']
........s....Unused terminals: ['D', 'E']
.......Unused terminals: ['B', 'C']
Unused terminals: ['B', 'C']
...s...Same State match at example [0][0]
Same State match at example [0][0]
Exact Match at example [1][0]
Same State match at example [2][0]
Same State match at example [2][0]
Same State match at example [2][0]
Same State match at example [2][0]
...Unused rule: <unused : __unused_star_1>
Unused rule: <unused : >
Unused rule: <__unused_star_1 : x>
Unused rule: <__unused_star_1 : __unused_star_1 x>
...ssss..s.s..................ss...s........Unused terminals: ['LCASE_LETTER']
..............Unused terminals: ['ID_START', 'ID_CONTINUE']
..........Unused terminals: ['CONTINUATION_BYTE']
........s....Unused terminals: ['D', 'E']
.......Unused terminals: ['B', 'C']
Unused terminals: ['B', 'C']
.......Same State match at example [0][0]
Exact Match at example [1][0]
Same State match at example [2][0]
Exact Match at example [2][0]
Same State match at example [2][1]
Same State match at example [2][1]
...Unused rule: <unused : __unused_star_1>
Unused rule: <unused : >
Unused rule: <__unused_star_1 : x>
Unused rule: <__unused_star_1 : __unused_star_1 x>
...ss...ss.s..................ss...s........Unused terminals: ['LCASE_LETTER']
..............Unused terminals: ['ID_START', 'ID_CONTINUE']
.............Cycle encountered in the SPPF at node: (start, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (start, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
.Cycle encountered in the SPPF at node: (_operation, 0, 2, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
.Cycle encountered in the SPPF at node: (a, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (__b_star_0, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (a, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (__b_star_0, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
.Cycle encountered in the SPPF at node: (_x, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (_x, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (x, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (x, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
...s...s.Cycle encountered in the SPPF at node: (start ::= start* start, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (start, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (start, 0, 1, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (start, 0, 1, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
............Cycle encountered in the SPPF at node: (start, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (start, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
.Cycle encountered in the SPPF at node: (_operation, 0, 2, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
.Cycle encountered in the SPPF at node: (a, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (__b_star_0, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (a, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (__b_star_0, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
.Cycle encountered in the SPPF at node: (_x, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (_x, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (x, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (x, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
.........Cycle encountered in the SPPF at node: (start ::= start* start, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (start, 0, 0, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (start, 0, 1, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
Cycle encountered in the SPPF at node: (start, 0, 1, -inf). As infinite ambiguities cannot be represented in a tree, this family of derivations will be discarded.
.........Unused terminals: ['CONTINUATION_BYTE']
.............Unused terminals: ['D', 'E']
.......Unused terminals: ['B', 'C']
Unused terminals: ['B', 'C']
...s...Same State match at example [0][0]
Same State match at example [0][0]
Exact Match at example [1][0]
Same State match at example [2][0]
Exact Match at example [2][0]
Same State match at example [2][0]
Same State match at example [2][0]
...Unused rule: <unused : __unused_star_1>
Unused rule: <unused : >
Unused rule: <__unused_star_1 : x>
Unused rule: <__unused_star_1 : __unused_star_1 x>
...s....s..s...................s...s........Unused terminals: ['LCASE_LETTER']
..............Unused terminals: ['ID_START', 'ID_CONTINUE']
..........Unused terminals: ['CONTINUATION_BYTE']
.............Unused terminals: ['D', 'E']
.......Unused terminals: ['B', 'C']
Unused terminals: ['B', 'C']
...s...Same State match at example [0][0]
Same State match at example [0][0]
Exact Match at example [1][0]
Same State match at example [2][0]
Exact Match at example [2][0]
Same State match at example [2][0]
Same State match at example [2][0]
...Unused rule: <unused : __unused_star_1>
Unused rule: <unused : >
Unused rule: <__unused_star_1 : x>
Unused rule: <__unused_star_1 : __unused_star_1 x>
...s....s..s..................ss...s........Unused terminals: ['LCASE_LETTER']
..............Unused terminals: ['ID_START', 'ID_CONTINUE']
..........Unused terminals: ['CONTINUATION_BYTE']
.............Unused terminals: ['D', 'E']
.......Unused terminals: ['B', 'C']
Unused terminals: ['B', 'C']
.......Same State match at example [0][0]
Same State match at example [0][0]
Exact Match at example [1][0]
Same State match at example [2][0]
Exact Match at example [2][0]
Same State match at example [2][0]
Same State match at example [2][0]
...Unused rule: <unused : __unused_star_1>
Unused rule: <unused : >
Unused rule: <__unused_star_1 : x>
Unused rule: <__unused_star_1 : __unused_star_1 x>
...s....s..s...................s...s........Unused terminals: ['LCASE_LETTER']
..............Unused terminals: ['ID_START', 'ID_CONTINUE']
........Unused rule: <c : UNRELATED>
Unused terminals: ['UNRELATED']
.............Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
...Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
...Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
Unused terminals: [Token('TERMINAL', 'NUMBER')]
................................
----------------------------------------------------------------------
Ran 1022 tests in 16.614s

OK (skipped=103)

Generating XML reports...
___________________________________ summary ____________________________________
  cpythonlibtest-unit-test-tests: commands succeeded
  congratulations :)
